                        .module time.c
                        .area text(rom, con, rel)
 0000                   .dbfile time.c
 0000                   .dbfile E:\ICCDemo\Temp_Control\temp_control\time.c
 0000                   .dbfunc e Write1302 _Write1302 fV
 0000           ;           temp -> R10
 0000           ;              i -> R20
 0000           ;            dat -> R18
 0000           ;           addr -> R16
                        .even
 0000           _Write1302::
 0000 AA92              st -y,R10
 0002 4A93              st -y,R20
 0004                   .dbline -1
 0004                   .dbline 36
 0004           ; #include<iom128v.h>
 0004           ; #include "time.h"
 0004           ; #include "delay.h"
 0004           ; #include "lcd.h"
 0004           ; //寄存器宏定义
 0004           ; #define WRITE_SECOND 0x80
 0004           ; #define WRITE_MINUTE 0x82 
 0004           ; #define WRITE_HOUR 0x84
 0004           ; #define WRITE_DAY 0x86
 0004           ; #define WRITE_MONTH 0x88 
 0004           ; #define WRITE_WEEK 0x8A
 0004           ; #define WRITE_YEAE 0x8C
 0004           ; #define WRITE_PROTECT 0x8E 
 0004           ; 
 0004           ; #define READ_SECOND 0x81 
 0004           ; #define READ_MINUTE 0x83 
 0004           ; #define READ_HOUR 0x85 
 0004           ; #define READ_DAY 0x87
 0004           ; #define READ_MONTH 0x89
 0004           ; #define READ_WEEK 0x8B
 0004           ; #define READ_YEAE 0x8D
 0004           ; #define READ_PROTECT 0x8F
 0004           ; 
 0004           ; 
 0004           ; #define  SCLK_H  PORTD|=1<<PD0 //
 0004           ; #define  SCLK_L  PORTD&=~(1<<PD0) //
 0004           ; #define  DIO    PORTD&(~(1<<PD1)) //会获得PB1的值，判断是否等于0来确定值
 0004           ; #define  DIO_H   PORTD|=1<<PD1 //
 0004           ; #define  DIO_L  PORTD&=~(1<<PD1)  //
 0004           ; #define  CE_H    PORTD|=1<<PD2
 0004           ; #define  CE_L   PORTD&=~(1<<PD2) 
 0004           ; 
 0004           ; 
 0004           ; //地址、数据发送子程序
 0004           ; void Write1302  ( unsigned char  addr,unsigned char dat )
 0004           ; { 
 0004                   .dbline 38
 0004           ;   unsigned char  i,temp; 
 0004           ;   CE_L; //CE引脚为低，数据传送中止
 0004 9298              cbi 0x12,2
 0006                   .dbline 39
 0006           ;   SCLK_L;//清零时钟总线?
 0006 9098              cbi 0x12,0
 0008                   .dbline 40
 0008           ;   CE_H;//CE引脚为高，逻辑控制有效
 0008 929A              sbi 0x12,2
 000A                   .dbline 42
 000A           ;   //发送地址?
 000A           ;     for ( i=8; i>0; i-- ) //循环8次移位
 000A 48E0              ldi R20,8
 000C 0AC0              xjmp L5
 000E           L2:
 000E                   .dbline 43
 000E           ;     { 
 000E                   .dbline 44
 000E           ;        SCLK_L;
 000E 9098              cbi 0x12,0
 0010                   .dbline 45
 0010           ;          temp=addr;
 0010 A02E              mov R10,R16
 0012                   .dbline 46
 0012           ;        if((temp&0x01))//每次传输低字节
 0012 00FF              sbrs R16,0
 0014 02C0              rjmp L6
 0016           X0:
 0016                   .dbline 47
 0016           ;          {
 0016                   .dbline 48
 0016           ;               DIO_H;
 0016 919A              sbi 0x12,1
 0018                   .dbline 49
 0018           ;          }else{
 0018 01C0              xjmp L7
 001A           L6:
 001A                   .dbline 49
 001A                   .dbline 50
 001A           ;          DIO_L;
 001A 9198              cbi 0x12,1
 001C                   .dbline 51
 001C           ;          }
 001C           L7:
 001C                   .dbline 52
 001C           ;        addr>>=1;//右移一位
 001C 0695              lsr R16
 001E                   .dbline 53
 001E           ;                         SCLK_H;
 001E 909A              sbi 0x12,0
 0020                   .dbline 54
 0020           ;  }
 0020           L3:
 0020                   .dbline 42
 0020 4A95              dec R20
 0022           L5:
 0022                   .dbline 42
 0022 80E0              ldi R24,0
 0024 8417              cp R24,R20
 0026 98F3              brlo L2
 0028           X1:
 0028                   .dbline 56
 0028           ; //发送数据?
 0028           ; for(i=8;i>0;i--){
 0028 48E0              ldi R20,8
 002A 0AC0              xjmp L11
 002C           L8:
 002C                   .dbline 56
 002C                   .dbline 57
 002C           ;    SCLK_L; 
 002C 9098              cbi 0x12,0
 002E                   .dbline 58
 002E           ;    temp=dat;
 002E A22E              mov R10,R18
 0030                   .dbline 59
 0030           ;    if((temp&0x01))//每次传输低字节
 0030 20FF              sbrs R18,0
 0032 02C0              rjmp L12
 0034           X2:
 0034                   .dbline 60
 0034           ;          {
 0034                   .dbline 61
 0034           ;               DIO_H;
 0034 919A              sbi 0x12,1
 0036                   .dbline 62
 0036           ;          }else{
 0036 01C0              xjmp L13
 0038           L12:
 0038                   .dbline 62
 0038                   .dbline 63
 0038           ;          DIO_L;
 0038 9198              cbi 0x12,1
 003A                   .dbline 64
 003A           ;          }
 003A           L13:
 003A                   .dbline 65
 003A           ;       dat>>=1;
 003A 2695              lsr R18
 003C                   .dbline 66
 003C           ;     SCLK_H;
 003C 909A              sbi 0x12,0
 003E                   .dbline 67
 003E           ;   }
 003E           L9:
 003E                   .dbline 56
 003E 4A95              dec R20
 0040           L11:
 0040                   .dbline 56
 0040 80E0              ldi R24,0
 0042 8417              cp R24,R20
 0044 98F3              brlo L8
 0046           X3:
 0046                   .dbline 68
 0046           ;    CE_L;
 0046 9298              cbi 0x12,2
 0048                   .dbline -2
 0048           L1:
 0048                   .dbline 0 ; func end
 0048 4991              ld R20,y+
 004A A990              ld R10,y+
 004C 0895              ret
 004E                   .dbsym r temp 10 c
 004E                   .dbsym r i 20 c
 004E                   .dbsym r dat 18 c
 004E                   .dbsym r addr 16 c
 004E                   .dbend
 004E                   .dbfunc e Read1302 _Read1302 fc
 004E           ;           data -> R10
 004E           ;           temp -> R14
 004E           ;              i -> R20
 004E           ;           addr -> R12
                        .even
 004E           _Read1302::
 004E 0E940000          xcall push_xgset30FC
 0052 C02E              mov R12,R16
 0054                   .dbline -1
 0054                   .dbline 71
 0054           ; }
 0054           ; //数据读取子程序
 0054           ; unsigned char Read1302( unsigned char addr ){
 0054                   .dbline 72
 0054           ;    unsigned char i,temp,data=0;
 0054 AA24              clr R10
 0056                   .dbline 73
 0056           ;    CE_L;
 0056 9298              cbi 0x12,2
 0058                   .dbline 74
 0058           ;    SCLK_L;
 0058 9098              cbi 0x12,0
 005A                   .dbline 75
 005A           ;    CE_H;//发送地址?
 005A 929A              sbi 0x12,2
 005C                   .dbline 76
 005C           ;    for(i=8;i>0;i--)//循环8次移位
 005C 48E0              ldi R20,8
 005E 0AC0              xjmp L18
 0060           L15:
 0060                   .dbline 77
 0060           ;    {
 0060                   .dbline 79
 0060           ;       
 0060           ;          temp=addr;
 0060 EC2C              mov R14,R12
 0062                   .dbline 80
 0062           ;       if((temp&0x01))//每次传输低字节
 0062 C0FE              sbrs R12,0
 0064 02C0              rjmp L19
 0066           X4:
 0066                   .dbline 81
 0066           ;          {
 0066                   .dbline 82
 0066           ;               DIO_H;
 0066 919A              sbi 0x12,1
 0068                   .dbline 83
 0068           ;          }else{
 0068 01C0              xjmp L20
 006A           L19:
 006A                   .dbline 83
 006A                   .dbline 84
 006A           ;          DIO_L;
 006A 9198              cbi 0x12,1
 006C                   .dbline 85
 006C           ;          }
 006C           L20:
 006C                   .dbline 86
 006C           ;          SCLK_L;
 006C 9098              cbi 0x12,0
 006E                   .dbline 87
 006E           ;        addr>>=1;//右移一位
 006E C694              lsr R12
 0070                   .dbline 88
 0070           ;         SCLK_H;
 0070 909A              sbi 0x12,0
 0072                   .dbline 89
 0072           ;    }
 0072           L16:
 0072                   .dbline 76
 0072 4A95              dec R20
 0074           L18:
 0074                   .dbline 76
 0074 80E0              ldi R24,0
 0076 8417              cp R24,R20
 0078 98F3              brlo L15
 007A           X5:
 007A                   .dbline 91
 007A           ; //读取数据
 007A           ; DDRD&=0xFD;
 007A 81B3              in R24,0x11
 007C 8D7F              andi R24,253
 007E 81BB              out 0x11,R24
 0080                   .dbline 92
 0080           ;  for(i=0;i<8;i++)
 0080 4427              clr R20
 0082 0EC0              xjmp L24
 0084           L21:
 0084                   .dbline 93
 0084           ;   {
 0084                   .dbline 94
 0084           ;      SCLK_H;
 0084 909A              sbi 0x12,0
 0086                   .dbline 95
 0086           ;        SCLK_L;
 0086 9098              cbi 0x12,0
 0088                   .dbline 96
 0088           ;        delay_ms(1);
 0088 01E0              ldi R16,1
 008A 10E0              ldi R17,0
 008C 0E940000          xcall _delay_ms
 0090                   .dbline 97
 0090           ;        data |=(((PIND&(1<<PD1))>>1)<<i);
 0090 00B3              in R16,0x10
 0092 0270              andi R16,2
 0094 0695              lsr R16
 0096 142F              mov R17,R20
 0098 0E940000          xcall lsl8
 009C A02A              or R10,R16
 009E                   .dbline 99
 009E           ;            
 009E           ;     }
 009E           L22:
 009E                   .dbline 92
 009E 4395              inc R20
 00A0           L24:
 00A0                   .dbline 92
 00A0 4830              cpi R20,8
 00A2 80F3              brlo L21
 00A4           X6:
 00A4                   .dbline 101
 00A4           ;       ///PORTE=data;
 00A4           ;    DDRD|=0x07;
 00A4 81B3              in R24,0x11
 00A6 8760              ori R24,7
 00A8 81BB              out 0x11,R24
 00AA                   .dbline 102
 00AA           ;     CE_L;
 00AA 9298              cbi 0x12,2
 00AC                   .dbline 107
 00AC           ;     // temp = data>>4;
 00AC           ;    // data &= 0x0f;
 00AC           ;     //data = temp*10 + data;
 00AC           ;       
 00AC           ;     return(data);
 00AC 0A2D              mov R16,R10
 00AE                   .dbline -2
 00AE           L14:
 00AE                   .dbline 0 ; func end
 00AE 0C940000          xjmp pop_xgset30FC
 00B2                   .dbsym r data 10 c
 00B2                   .dbsym r temp 14 c
 00B2                   .dbsym r i 20 c
 00B2                   .dbsym r addr 12 c
 00B2                   .dbend
 00B2                   .dbfunc e Initial_time _Initial_time fV
                        .even
 00B2           _Initial_time::
 00B2                   .dbline -1
 00B2                   .dbline 110
 00B2           ; }
 00B2           ; //初始化DS1302?
 00B2           ; void Initial_time(void) {
 00B2                   .dbline 111
 00B2           ;    DDRD|=0x07;
 00B2 81B3              in R24,0x11
 00B4 8760              ori R24,7
 00B6 81BB              out 0x11,R24
 00B8                   .dbline 112
 00B8           ;    PORTD=0x00;
 00B8 2224              clr R2
 00BA 22BA              out 0x12,R2
 00BC                   .dbline 113
 00BC           ;    Write1302(WRITE_PROTECT,0X00);//禁止写保护
 00BC 2227              clr R18
 00BE 0EE8              ldi R16,142
 00C0 9FDF              xcall _Write1302
 00C2                   .dbline 114
 00C2           ;    Write1302(WRITE_SECOND,0x00);//秒位初始化
 00C2 2227              clr R18
 00C4 00E8              ldi R16,128
 00C6 9CDF              xcall _Write1302
 00C8                   .dbline 115
 00C8           ;    Write1302(WRITE_MINUTE,0x50);//分钟初始化
 00C8 20E5              ldi R18,80
 00CA 02E8              ldi R16,130
 00CC 99DF              xcall _Write1302
 00CE                   .dbline 116
 00CE           ;    Write1302(WRITE_HOUR,0x91);//小时初始化
 00CE 21E9              ldi R18,145
 00D0 04E8              ldi R16,132
 00D2 96DF              xcall _Write1302
 00D4                   .dbline 117
 00D4           ;    Write1302(WRITE_PROTECT,0x80);//写保护
 00D4 20E8              ldi R18,128
 00D6 0EE8              ldi R16,142
 00D8                   .dbline -2
 00D8           L25:
 00D8                   .dbline 0 ; func end
 00D8 93CF              xjmp _Write1302
 00DA                   .dbend
 00DA                   .dbfunc e showTimeLcd _showTimeLcd fV
                        .even
 00DA           _showTimeLcd::
 00DA AA92              st -y,R10
 00DC 4A93              st -y,R20
 00DE 2197              sbiw R28,1
 00E0                   .dbline -1
 00E0                   .dbline 120
 00E0           ; }
 00E0           ; //显示时间，时分秒
 00E0           ; void showTimeLcd(void){
 00E0                   .dbline 122
 00E0           ;    //PORTE=~Read1302(0x81);
 00E0           ;       if(Read1302(0x85)&0x80){
 00E0 05E8              ldi R16,133
 00E2 B5DF              xcall _Read1302
 00E4 07FF              sbrs R16,7
 00E6 48C0              rjmp L27
 00E8           X7:
 00E8                   .dbline 122
 00E8                   .dbline 123
 00E8           ;       if( (Read1302(0x85)>>4)&0x01 )
 00E8 05E8              ldi R16,133
 00EA B1DF              xcall _Read1302
 00EC 802F              mov R24,R16
 00EE 8295              swap R24
 00F0 8F70              andi R24,#0x0F
 00F2 8170              andi R24,1
 00F4 B9F0              breq L29
 00F6           X8:
 00F6                   .dbline 124
 00F6           ;       {
 00F6                   .dbline 125
 00F6           ;        lcd_write_char(0x00,1,0x30|((Read1302(0x85)>>4)&0x01));
 00F6 05E8              ldi R16,133
 00F8 AADF              xcall _Read1302
 00FA A02E              mov R10,R16
 00FC 8A2D              mov R24,R10
 00FE 8295              swap R24
 0100 8F70              andi R24,#0x0F
 0102 8170              andi R24,1
 0104 8063              ori R24,48
 0106 8883              std y+0,R24
 0108 21E0              ldi R18,1
 010A 0027              clr R16
 010C 0E940000          xcall _lcd_write_char
 0110                   .dbline 126
 0110           ;        lcd_write_char_con(1,0x30|(Read1302(0x85)&0x0F));
 0110 05E8              ldi R16,133
 0112 9DDF              xcall _Read1302
 0114 402F              mov R20,R16
 0116 242F              mov R18,R20
 0118 2F70              andi R18,15
 011A 2063              ori R18,48
 011C 01E0              ldi R16,1
 011E 0E940000          xcall _lcd_write_char_con
 0122                   .dbline 127
 0122           ;       }else{
 0122 0FC0              xjmp L30
 0124           L29:
 0124                   .dbline 127
 0124                   .dbline 128
 0124           ;        lcd_write_char(0x00,1,' ' );
 0124 80E2              ldi R24,32
 0126 8883              std y+0,R24
 0128 21E0              ldi R18,1
 012A 0027              clr R16
 012C 0E940000          xcall _lcd_write_char
 0130                   .dbline 129
 0130           ;        lcd_write_char_con(1,0x30|(Read1302(0x85)&0x0F));
 0130 05E8              ldi R16,133
 0132 8DDF              xcall _Read1302
 0134 402F              mov R20,R16
 0136 242F              mov R18,R20
 0138 2F70              andi R18,15
 013A 2063              ori R18,48
 013C 01E0              ldi R16,1
 013E 0E940000          xcall _lcd_write_char_con
 0142                   .dbline 130
 0142           ;       }
 0142           L30:
 0142                   .dbline 132
 0142           ; 
 0142           ;          if(((Read1302(0x85))&0x20)){
 0142 05E8              ldi R16,133
 0144 84DF              xcall _Read1302
 0146 A02E              mov R10,R16
 0148 05FF              sbrs R16,5
 014A 0BC0              rjmp L31
 014C           X9:
 014C                   .dbline 132
 014C                   .dbline 133
 014C           ;             lcd_write_char(0x05,1, 'P');
 014C 80E5              ldi R24,80
 014E 8883              std y+0,R24
 0150 21E0              ldi R18,1
 0152 05E0              ldi R16,5
 0154 0E940000          xcall _lcd_write_char
 0158                   .dbline 134
 0158           ;            lcd_write_char_con(1, 'M');
 0158 2DE4              ldi R18,77
 015A 01E0              ldi R16,1
 015C 0E940000          xcall _lcd_write_char_con
 0160                   .dbline 135
 0160           ;          }else{
 0160 21C0              xjmp L28
 0162           L31:
 0162                   .dbline 135
 0162                   .dbline 136
 0162           ;            lcd_write_char(0x05,1, 'A');
 0162 81E4              ldi R24,65
 0164 8883              std y+0,R24
 0166 21E0              ldi R18,1
 0168 05E0              ldi R16,5
 016A 0E940000          xcall _lcd_write_char
 016E                   .dbline 137
 016E           ;            lcd_write_char_con(1, 'M');
 016E 2DE4              ldi R18,77
 0170 01E0              ldi R16,1
 0172 0E940000          xcall _lcd_write_char_con
 0176                   .dbline 138
 0176           ;           }
 0176                   .dbline 139
 0176           ;       }else{
 0176 16C0              xjmp L28
 0178           L27:
 0178                   .dbline 139
 0178                   .dbline 140
 0178           ;        lcd_write_char(0x00,1, 0x30|((Read1302(0x85)>>4)&0x03));
 0178 05E8              ldi R16,133
 017A 69DF              xcall _Read1302
 017C A02E              mov R10,R16
 017E 8A2D              mov R24,R10
 0180 8295              swap R24
 0182 8F70              andi R24,#0x0F
 0184 8370              andi R24,3
 0186 8063              ori R24,48
 0188 8883              std y+0,R24
 018A 21E0              ldi R18,1
 018C 0027              clr R16
 018E 0E940000          xcall _lcd_write_char
 0192                   .dbline 141
 0192           ;        lcd_write_char_con(1,0x30|(Read1302(0x85)&0x0F)); 
 0192 05E8              ldi R16,133
 0194 5CDF              xcall _Read1302
 0196 402F              mov R20,R16
 0198 242F              mov R18,R20
 019A 2F70              andi R18,15
 019C 2063              ori R18,48
 019E 01E0              ldi R16,1
 01A0 0E940000          xcall _lcd_write_char_con
 01A4                   .dbline 142
 01A4           ;       }
 01A4           L28:
 01A4                   .dbline 144
 01A4           ;       
 01A4           ;       lcd_write_char(0x01,1,':');
 01A4 8AE3              ldi R24,58
 01A6 8883              std y+0,R24
 01A8 21E0              ldi R18,1
 01AA 01E0              ldi R16,1
 01AC 0E940000          xcall _lcd_write_char
 01B0                   .dbline 146
 01B0           ;       
 01B0           ;       lcd_write_char_con(1, 0x30|Read1302(0x83)>>4);
 01B0 03E8              ldi R16,131
 01B2 4DDF              xcall _Read1302
 01B4 A02E              mov R10,R16
 01B6 2A2D              mov R18,R10
 01B8 2295              swap R18
 01BA 2F70              andi R18,#0x0F
 01BC 2063              ori R18,48
 01BE 01E0              ldi R16,1
 01C0 0E940000          xcall _lcd_write_char_con
 01C4                   .dbline 147
 01C4           ;       lcd_write_char_con(1,0x30|(Read1302(0x83)&0x0F));
 01C4 03E8              ldi R16,131
 01C6 43DF              xcall _Read1302
 01C8 402F              mov R20,R16
 01CA 242F              mov R18,R20
 01CC 2F70              andi R18,15
 01CE 2063              ori R18,48
 01D0 01E0              ldi R16,1
 01D2 0E940000          xcall _lcd_write_char_con
 01D6                   .dbline 149
 01D6           ; 
 01D6           ;       lcd_write_char_con(1,':');
 01D6 2AE3              ldi R18,58
 01D8 01E0              ldi R16,1
 01DA 0E940000          xcall _lcd_write_char_con
 01DE                   .dbline 151
 01DE           ;       
 01DE           ;        lcd_write_char_con(1, 0x30|(Read1302(0x81)>>4));
 01DE 01E8              ldi R16,129
 01E0 36DF              xcall _Read1302
 01E2 A02E              mov R10,R16
 01E4 2A2D              mov R18,R10
 01E6 2295              swap R18
 01E8 2F70              andi R18,#0x0F
 01EA 2063              ori R18,48
 01EC 01E0              ldi R16,1
 01EE 0E940000          xcall _lcd_write_char_con
 01F2                   .dbline 152
 01F2           ;       lcd_write_char_con(1,0x30|(Read1302(0x81)&0x0F));
 01F2 01E8              ldi R16,129
 01F4 2CDF              xcall _Read1302
 01F6 402F              mov R20,R16
 01F8 242F              mov R18,R20
 01FA 2F70              andi R18,15
 01FC 2063              ori R18,48
 01FE 01E0              ldi R16,1
 0200 0E940000          xcall _lcd_write_char_con
 0204                   .dbline -2
 0204           L26:
 0204                   .dbline 0 ; func end
 0204 2196              adiw R28,1
 0206 4991              ld R20,y+
 0208 A990              ld R10,y+
 020A 0895              ret
 020C                   .dbend
 020C                   .dbfunc e getYear _getYear fi
                        .even
 020C           _getYear::
 020C                   .dbline -1
 020C                   .dbline 155
 020C           ; }
 020C           ; 
 020C           ; uint getYear(void){
 020C                   .dbline 156
 020C           ;  return 1;
 020C 01E0              ldi R16,1
 020E 10E0              ldi R17,0
 0210                   .dbline -2
 0210           L33:
 0210                   .dbline 0 ; func end
 0210 0895              ret
 0212                   .dbend
 0212                   .dbfunc e getMonth _getMonth fi
                        .even
 0212           _getMonth::
 0212                   .dbline -1
 0212                   .dbline 158
 0212           ; }
 0212           ; uint getMonth(void){
 0212                   .dbline 159
 0212           ;   return 1;
 0212 01E0              ldi R16,1
 0214 10E0              ldi R17,0
 0216                   .dbline -2
 0216           L34:
 0216                   .dbline 0 ; func end
 0216 0895              ret
 0218                   .dbend
 0218                   .dbfunc e getDay _getDay fi
                        .even
 0218           _getDay::
 0218                   .dbline -1
 0218                   .dbline 161
 0218           ; }
 0218           ; uint getDay(void){
 0218                   .dbline 162
 0218           ;  return 1;
 0218 01E0              ldi R16,1
 021A 10E0              ldi R17,0
 021C                   .dbline -2
 021C           L35:
 021C                   .dbline 0 ; func end
 021C 0895              ret
 021E                   .dbend
 021E                   .dbfunc e getWeek _getWeek fi
                        .even
 021E           _getWeek::
 021E                   .dbline -1
 021E                   .dbline 164
 021E           ; }
 021E           ; uint getWeek(void){
 021E                   .dbline 165
 021E           ;  return 1;
 021E 01E0              ldi R16,1
 0220 10E0              ldi R17,0
 0222                   .dbline -2
 0222           L36:
 0222                   .dbline 0 ; func end
 0222 0895              ret
 0224                   .dbend
 0224                   .dbfunc e getHour _getHour fi
                        .even
 0224           _getHour::
 0224                   .dbline -1
 0224                   .dbline 167
 0224           ; }
 0224           ; uint getHour(void){
 0224                   .dbline 168
 0224           ;  return 1;
 0224 01E0              ldi R16,1
 0226 10E0              ldi R17,0
 0228                   .dbline -2
 0228           L37:
 0228                   .dbline 0 ; func end
 0228 0895              ret
 022A                   .dbend
 022A                   .dbfunc e getMinute _getMinute fi
                        .even
 022A           _getMinute::
 022A                   .dbline -1
 022A                   .dbline 170
 022A           ; }
 022A           ; uint getMinute(void){
 022A                   .dbline 171
 022A           ;  return 1;
 022A 01E0              ldi R16,1
 022C 10E0              ldi R17,0
 022E                   .dbline -2
 022E           L38:
 022E                   .dbline 0 ; func end
 022E 0895              ret
 0230                   .dbend
 0230                   .dbfunc e getSecond _getSecond fi
                        .even
 0230           _getSecond::
 0230                   .dbline -1
 0230                   .dbline 173
 0230           ; }
 0230           ; uint getSecond(void){
 0230                   .dbline 174
 0230           ;  return 1;
 0230 01E0              ldi R16,1
 0232 10E0              ldi R17,0
 0234                   .dbline -2
 0234           L39:
 0234                   .dbline 0 ; func end
 0234 0895              ret
 0236                   .dbend
 0236                   .dbfunc e setTime _setTime fV
 0236           ;         second -> R6,R7
 0236           ;         minute -> R5,R6
 0236           ;           hour -> R4,R5
 0236           ;           week -> R3,R4
 0236           ;            day -> R2,R3
 0236           ;          month -> R1,R2
 0236           ;           year -> R0,R1
                        .even
 0236           _setTime::
 0236                   .dbline -1
 0236                   .dbline 176
 0236           ; }
 0236           ; void setTime(uint year,uint month,uint day,uint week,uint hour,uint minute,uint second){
 0236                   .dbline -2
 0236           L40:
 0236                   .dbline 0 ; func end
 0236 0895              ret
 0238                   .dbsym l second 12 i
 0238                   .dbsym l minute 10 i
 0238                   .dbsym l hour 8 i
 0238                   .dbsym l week 6 i
 0238                   .dbsym l day 4 i
 0238                   .dbsym l month 2 i
 0238                   .dbsym l year 0 i
 0238                   .dbend
 0238                   .dbfunc e showTime_page _showTime_page fV
 0238           ;              y -> R10,R11
                        .even
 0238           _showTime_page::
 0238 0E940000          xcall push_xgset303C
 023C 5801              movw R10,R16
 023E                   .dbline -1
 023E                   .dbline 180
 023E           ; 
 023E           ; }
 023E           ; //显示时间，年月日时分秒，用于page调用。没有改变AC，会接着写
 023E           ; void showTime_page(uint y){
 023E                   .dbline 183
 023E           ;    //PORTE=~Read1302(0x81);
 023E           ;    //年
 023E           ;     lcd_write_str_con(y, "20");
 023E 20E0              ldi R18,<L42
 0240 30E0              ldi R19,>L42
 0242 0A2D              mov R16,R10
 0244 0E940000          xcall _lcd_write_str_con
 0248                   .dbline 184
 0248           ;     lcd_write_char_con(y, 0x30|((Read1302(0x8D)>>4)&0x0F));
 0248 0DE8              ldi R16,141
 024A 01DF              xcall _Read1302
 024C 202F              mov R18,R16
 024E 2295              swap R18
 0250 2F70              andi R18,#0x0F
 0252 2F70              andi R18,15
 0254 2063              ori R18,48
 0256 0A2D              mov R16,R10
 0258 0E940000          xcall _lcd_write_char_con
 025C                   .dbline 185
 025C           ;     lcd_write_char_con(y,0x30|(Read1302(0x8D)&0x0F)); 
 025C 0DE8              ldi R16,141
 025E F7DE              xcall _Read1302
 0260 202F              mov R18,R16
 0262 2F70              andi R18,15
 0264 2063              ori R18,48
 0266 0A2D              mov R16,R10
 0268 0E940000          xcall _lcd_write_char_con
 026C                   .dbline 186
 026C           ;       lcd_write_char_con(y,'-');
 026C 2DE2              ldi R18,45
 026E 0A2D              mov R16,R10
 0270 0E940000          xcall _lcd_write_char_con
 0274                   .dbline 188
 0274           ;        //月
 0274           ;        lcd_write_char_con(y, 0x30|((Read1302(0x89)>>4)&0x01));
 0274 09E8              ldi R16,137
 0276 EBDE              xcall _Read1302
 0278 C02E              mov R12,R16
 027A 2C2D              mov R18,R12
 027C 2295              swap R18
 027E 2F70              andi R18,#0x0F
 0280 2170              andi R18,1
 0282 2063              ori R18,48
 0284 0A2D              mov R16,R10
 0286 0E940000          xcall _lcd_write_char_con
 028A                   .dbline 189
 028A           ;      lcd_write_char_con(y,0x30|(Read1302(0x89)&0x0F)); 
 028A 09E8              ldi R16,137
 028C E0DE              xcall _Read1302
 028E 402F              mov R20,R16
 0290 242F              mov R18,R20
 0292 2F70              andi R18,15
 0294 2063              ori R18,48
 0296 0A2D              mov R16,R10
 0298 0E940000          xcall _lcd_write_char_con
 029C                   .dbline 190
 029C           ;        lcd_write_char_con(y,'-');
 029C 2DE2              ldi R18,45
 029E 0A2D              mov R16,R10
 02A0 0E940000          xcall _lcd_write_char_con
 02A4                   .dbline 192
 02A4           ;        //日
 02A4           ;        lcd_write_char_con(y, 0x30|((Read1302(0x87)>>4)&0x03));
 02A4 07E8              ldi R16,135
 02A6 D3DE              xcall _Read1302
 02A8 C02E              mov R12,R16
 02AA 2C2D              mov R18,R12
 02AC 2295              swap R18
 02AE 2F70              andi R18,#0x0F
 02B0 2370              andi R18,3
 02B2 2063              ori R18,48
 02B4 0A2D              mov R16,R10
 02B6 0E940000          xcall _lcd_write_char_con
 02BA                   .dbline 193
 02BA           ;      lcd_write_char_con(y,0x30|(Read1302(0x87)&0x0F)); 
 02BA 07E8              ldi R16,135
 02BC C8DE              xcall _Read1302
 02BE 402F              mov R20,R16
 02C0 242F              mov R18,R20
 02C2 2F70              andi R18,15
 02C4 2063              ori R18,48
 02C6 0A2D              mov R16,R10
 02C8 0E940000          xcall _lcd_write_char_con
 02CC                   .dbline 194
 02CC           ;        lcd_write_char_con(y,' ');
 02CC 20E2              ldi R18,32
 02CE 0A2D              mov R16,R10
 02D0 0E940000          xcall _lcd_write_char_con
 02D4                   .dbline 196
 02D4           ;       //时
 02D4           ;        lcd_write_char_con(y, 0x30|((Read1302(0x85)>>4)&0x03));
 02D4 05E8              ldi R16,133
 02D6 BBDE              xcall _Read1302
 02D8 C02E              mov R12,R16
 02DA 2C2D              mov R18,R12
 02DC 2295              swap R18
 02DE 2F70              andi R18,#0x0F
 02E0 2370              andi R18,3
 02E2 2063              ori R18,48
 02E4 0A2D              mov R16,R10
 02E6 0E940000          xcall _lcd_write_char_con
 02EA                   .dbline 197
 02EA           ;        lcd_write_char_con(y,0x30|(Read1302(0x85)&0x0F)); 
 02EA 05E8              ldi R16,133
 02EC B0DE              xcall _Read1302
 02EE 402F              mov R20,R16
 02F0 242F              mov R18,R20
 02F2 2F70              andi R18,15
 02F4 2063              ori R18,48
 02F6 0A2D              mov R16,R10
 02F8 0E940000          xcall _lcd_write_char_con
 02FC                   .dbline 198
 02FC           ;        lcd_write_char_con(y,':');
 02FC 2AE3              ldi R18,58
 02FE 0A2D              mov R16,R10
 0300 0E940000          xcall _lcd_write_char_con
 0304                   .dbline 200
 0304           ;       //分
 0304           ;        lcd_write_char_con(y, 0x30|Read1302(0x83)>>4);
 0304 03E8              ldi R16,131
 0306 A3DE              xcall _Read1302
 0308 C02E              mov R12,R16
 030A 2C2D              mov R18,R12
 030C 2295              swap R18
 030E 2F70              andi R18,#0x0F
 0310 2063              ori R18,48
 0312 0A2D              mov R16,R10
 0314 0E940000          xcall _lcd_write_char_con
 0318                   .dbline 201
 0318           ;        lcd_write_char_con(y,0x30|(Read1302(0x83)&0x0F));
 0318 03E8              ldi R16,131
 031A 99DE              xcall _Read1302
 031C 402F              mov R20,R16
 031E 242F              mov R18,R20
 0320 2F70              andi R18,15
 0322 2063              ori R18,48
 0324 0A2D              mov R16,R10
 0326 0E940000          xcall _lcd_write_char_con
 032A                   .dbline 202
 032A           ;        lcd_write_char_con(y,':');
 032A 2AE3              ldi R18,58
 032C 0A2D              mov R16,R10
 032E 0E940000          xcall _lcd_write_char_con
 0332                   .dbline 204
 0332           ;       //秒
 0332           ;        lcd_write_char_con(y, 0x30|(Read1302(0x81)>>4));
 0332 01E8              ldi R16,129
 0334 8CDE              xcall _Read1302
 0336 C02E              mov R12,R16
 0338 2C2D              mov R18,R12
 033A 2295              swap R18
 033C 2F70              andi R18,#0x0F
 033E 2063              ori R18,48
 0340 0A2D              mov R16,R10
 0342 0E940000          xcall _lcd_write_char_con
 0346                   .dbline 205
 0346           ;        lcd_write_char_con(y,0x30|(Read1302(0x81)&0x0F));
 0346 01E8              ldi R16,129
 0348 82DE              xcall _Read1302
 034A 402F              mov R20,R16
 034C 242F              mov R18,R20
 034E 2F70              andi R18,15
 0350 2063              ori R18,48
 0352 0A2D              mov R16,R10
 0354 0E940000          xcall _lcd_write_char_con
 0358                   .dbline -2
 0358           L41:
 0358                   .dbline 0 ; func end
 0358 0C940000          xjmp pop_xgset303C
 035C                   .dbsym r y 10 i
 035C                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile E:\ICCDemo\Temp_Control\temp_control\time.c
 0000           L42:
 0000                   .blkb 3
                        .area idata
 0000 323000            .byte 50,48,0
                        .area data(ram, con, rel)
 0003                   .dbfile E:\ICCDemo\Temp_Control\temp_control\time.c
 0003           ; }
 0003           ; 
 0003           ; 
 0003           ; 
 0003           ; 
