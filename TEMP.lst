Interrupt Vectors
    00000 940C 0420 JMP	__start|__text_start
    00014 940C 0C88 JMP	_int_timer2
    0001C 940C 0C37 JMP	_int_timer1
    00020 940C 0BE9 JMP	_int_timer0
    0003A 940C 0CD9 JMP	_int_timer3

Program Code (text area)
__start|__text_start:
    00420 EFCF      LDI	R28,0xFF
    00421 E1D0      LDI	R29,0x10
    00422 BFCD      OUT	0x3D,R28
    00423 BFDE      OUT	0x3E,R29
    00424 51CE      SUBI	R28,0x1E
    00425 40D0      SBCI	R29,0
    00426 EA0A      LDI	R16,0xAA
    00427 8308      ST	Y,R16
    00428 2400      CLR	R0
    00429 EBE4      LDI	R30,0xB4
    0042A E0F8      LDI	R31,0x8
    0042B E01D      LDI	R17,0xD
    0042C 37EF      CPI	R30,0x7F
    0042D 07F1      CPC	R31,R17
    0042E F011      BEQ	0x0431
    0042F 9201      ST	Z+,R0
    00430 CFFB      RJMP	0x042C
    00431 8300      ST	Z,R16
    00432 E8EC      LDI	R30,0x8C
    00433 E0F0      LDI	R31,0
    00434 E0A0      LDI	R26,0
    00435 E0B1      LDI	R27,1
    00436 E018      LDI	R17,0x8
    00437 E000      LDI	R16,0
    00438 BF0B      OUT	0x3B,R16
    00439 34E0      CPI	R30,0x40
    0043A 07F1      CPC	R31,R17
    0043B F021      BEQ	0x0440
    0043C 95C8      LPM
    0043D 9631      ADIW	R30,1
    0043E 920D      ST	X+,R0
    0043F CFF9      RJMP	0x0439
    00440 940E 0B64 CALL	_main
_exit:
    00442 CFFF      RJMP	_exit
FILE: E:\ICCDemo\Temp_Control\temp_control\delay.c
(0001) #include<iom128v.h>
(0002) #include "delay.h"
(0003) 
(0004) 
(0005) void delay_us(uint n)//延时us
(0006) {
(0007)   n=2*n;
_delay_us:
  n                    --> R16
    00443 0F00      LSL	R16
    00444 1F11      ROL	R17
(0008)   do{ n--;
    00445 5001      SUBI	R16,1
    00446 4010      SBCI	R17,0
(0009)   }while(n>1);
    00447 E081      LDI	R24,1
    00448 E090      LDI	R25,0
    00449 1780      CP	R24,R16
    0044A 0791      CPC	R25,R17
    0044B F3C8      BCS	0x0445
    0044C 9508      RET
_delay_ms:
  j                    --> R20
    0044D 934A      ST	-Y,R20
    0044E 935A      ST	-Y,R21
    0044F 01A8      MOVW	R20,R16
(0010) }
(0011) void delay_ms(uint j)//延时ms
(0012) {
(0013)    do{j--;
    00450 5041      SUBI	R20,1
    00451 4050      SBCI	R21,0
(0014)      delay_us(1141);
    00452 E705      LDI	R16,0x75
    00453 E014      LDI	R17,4
    00454 DFEE      RCALL	_delay_us
(0015)    }while(j>1);
    00455 E081      LDI	R24,1
    00456 E090      LDI	R25,0
    00457 1784      CP	R24,R20
    00458 0795      CPC	R25,R21
    00459 F3B0      BCS	0x0450
    0045A 9159      LD	R21,Y+
    0045B 9149      LD	R20,Y+
    0045C 9508      RET
_delay_s:
  i                    --> R20
    0045D 934A      ST	-Y,R20
    0045E 935A      ST	-Y,R21
    0045F 01A8      MOVW	R20,R16
(0016) }
(0017) void delay_s(uint i)
(0018) {
(0019)    do{
(0020)    i--;
    00460 5041      SUBI	R20,1
    00461 4050      SBCI	R21,0
(0021)    delay_ms(1000);
    00462 EE08      LDI	R16,0xE8
    00463 E013      LDI	R17,3
    00464 DFE8      RCALL	_delay_ms
(0022)    }while(i>1);
    00465 E081      LDI	R24,1
    00466 E090      LDI	R25,0
    00467 1784      CP	R24,R20
    00468 0795      CPC	R25,R21
    00469 F3B0      BCS	0x0460
    0046A 9159      LD	R21,Y+
    0046B 9149      LD	R20,Y+
    0046C 9508      RET
_Write1302:
  temp                 --> R10
  i                    --> R20
  dat                  --> R18
  addr                 --> R16
    0046D 92AA      ST	-Y,R10
    0046E 934A      ST	-Y,R20
FILE: E:\ICCDemo\Temp_Control\temp_control\time.c
(0001) #include<iom128v.h>
(0002) #include "time.h"
(0003) #include "delay.h"
(0004) #include "lcd.h"
(0005) //寄存器宏定义
(0006) #define WRITE_SECOND 0x80
(0007) #define WRITE_MINUTE 0x82 
(0008) #define WRITE_HOUR 0x84
(0009) #define WRITE_DAY 0x86
(0010) #define WRITE_MONTH 0x88 
(0011) #define WRITE_WEEK 0x8A
(0012) #define WRITE_YEAE 0x8C
(0013) #define WRITE_PROTECT 0x8E 
(0014) 
(0015) #define READ_SECOND 0x81 
(0016) #define READ_MINUTE 0x83 
(0017) #define READ_HOUR 0x85 
(0018) #define READ_DAY 0x87
(0019) #define READ_MONTH 0x89
(0020) #define READ_WEEK 0x8B
(0021) #define READ_YEAE 0x8D
(0022) #define READ_PROTECT 0x8F
(0023) 
(0024) 
(0025) #define  SCLK_H  PORTD|=1<<PD0 //
(0026) #define  SCLK_L  PORTD&=~(1<<PD0) //
(0027) #define  DIO    PORTD&(~(1<<PD1)) //会获得PB1的值，判断是否等于0来确定值
(0028) #define  DIO_H   PORTD|=1<<PD1 //
(0029) #define  DIO_L  PORTD&=~(1<<PD1)  //
(0030) #define  CE_H    PORTD|=1<<PD2
(0031) #define  CE_L   PORTD&=~(1<<PD2) 
(0032) 
(0033) 
(0034) //地址、数据发送子程序
(0035) void Write1302  ( unsigned char  addr,unsigned char dat )
(0036) { 
(0037)   unsigned char  i,temp; 
(0038)   CE_L; //CE引脚为低，数据传送中止
    0046F 9892      CBI	0x12,2
(0039)   SCLK_L;//清零时钟总线?
    00470 9890      CBI	0x12,0
(0040)   CE_H;//CE引脚为高，逻辑控制有效
    00471 9A92      SBI	0x12,2
(0041)   //发送地址?
(0042)     for ( i=8; i>0; i-- ) //循环8次移位
    00472 E048      LDI	R20,0x8
    00473 C00A      RJMP	0x047E
(0043)     { 
(0044)        SCLK_L;
    00474 9890      CBI	0x12,0
(0045) 	   temp=addr;
    00475 2EA0      MOV	R10,R16
(0046)        if((temp&0x01))//每次传输低字节
    00476 FF00      SBRS	R16,0
    00477 C002      RJMP	0x047A
(0047) 	   {
(0048) 	   	DIO_H;
    00478 9A91      SBI	0x12,1
(0049) 	   }else{
    00479 C001      RJMP	0x047B
(0050) 	   DIO_L;
    0047A 9891      CBI	0x12,1
(0051) 	   }
(0052)        addr>>=1;//右移一位
    0047B 9506      LSR	R16
(0053) 			  SCLK_H;
    0047C 9A90      SBI	0x12,0
    0047D 954A      DEC	R20
    0047E E080      LDI	R24,0
    0047F 1784      CP	R24,R20
    00480 F398      BCS	0x0474
(0054)  }
(0055) //发送数据?
(0056) for(i=8;i>0;i--){
    00481 E048      LDI	R20,0x8
    00482 C00A      RJMP	0x048D
(0057)    SCLK_L; 
    00483 9890      CBI	0x12,0
(0058)    temp=dat;
    00484 2EA2      MOV	R10,R18
(0059)    if((temp&0x01))//每次传输低字节
    00485 FF20      SBRS	R18,0
    00486 C002      RJMP	0x0489
(0060) 	   {
(0061) 	   	DIO_H;
    00487 9A91      SBI	0x12,1
(0062) 	   }else{
    00488 C001      RJMP	0x048A
(0063) 	   DIO_L;
    00489 9891      CBI	0x12,1
(0064) 	   }
(0065) 	dat>>=1;
    0048A 9526      LSR	R18
(0066)     SCLK_H;
    0048B 9A90      SBI	0x12,0
    0048C 954A      DEC	R20
    0048D E080      LDI	R24,0
    0048E 1784      CP	R24,R20
    0048F F398      BCS	0x0483
(0067)   }
(0068)    CE_L;
    00490 9892      CBI	0x12,2
    00491 9149      LD	R20,Y+
    00492 90A9      LD	R10,Y+
    00493 9508      RET
_Read1302:
  data                 --> R10
  temp                 --> R14
  i                    --> R20
  addr                 --> R12
    00494 940E 1E07 CALL	push_xgset30FC
    00496 2EC0      MOV	R12,R16
(0069) }
(0070) //数据读取子程序
(0071) unsigned char Read1302( unsigned char addr ){
(0072)    unsigned char i,temp,data=0;
    00497 24AA      CLR	R10
(0073)    CE_L;
    00498 9892      CBI	0x12,2
(0074)    SCLK_L;
    00499 9890      CBI	0x12,0
(0075)    CE_H;//发送地址?
    0049A 9A92      SBI	0x12,2
(0076)    for(i=8;i>0;i--)//循环8次移位
    0049B E048      LDI	R20,0x8
    0049C C00A      RJMP	0x04A7
(0077)    {
(0078)       
(0079) 	   temp=addr;
    0049D 2CEC      MOV	R14,R12
(0080)       if((temp&0x01))//每次传输低字节
    0049E FEC0      SBRS	R12,0
    0049F C002      RJMP	0x04A2
(0081) 	   {
(0082) 	   	DIO_H;
    004A0 9A91      SBI	0x12,1
(0083) 	   }else{
    004A1 C001      RJMP	0x04A3
(0084) 	   DIO_L;
    004A2 9891      CBI	0x12,1
(0085) 	   }
(0086) 	   SCLK_L;
    004A3 9890      CBI	0x12,0
(0087)        addr>>=1;//右移一位
    004A4 94C6      LSR	R12
(0088) 	  SCLK_H;
    004A5 9A90      SBI	0x12,0
    004A6 954A      DEC	R20
    004A7 E080      LDI	R24,0
    004A8 1784      CP	R24,R20
    004A9 F398      BCS	0x049D
(0089)    }
(0090) //读取数据
(0091) DDRD&=0xFD;
    004AA B381      IN	R24,0x11
    004AB 7F8D      ANDI	R24,0xFD
    004AC BB81      OUT	0x11,R24
(0092)  for(i=0;i<8;i++)
    004AD 2744      CLR	R20
    004AE C00E      RJMP	0x04BD
(0093)   {
(0094)      SCLK_H;
    004AF 9A90      SBI	0x12,0
(0095) 	 SCLK_L;
    004B0 9890      CBI	0x12,0
(0096) 	 delay_ms(1);
    004B1 E001      LDI	R16,1
    004B2 E010      LDI	R17,0
    004B3 940E 044D CALL	_delay_ms
(0097)    	 data |=(((PIND&(1<<PD1))>>1)<<i);
    004B5 B300      IN	R16,0x10
    004B6 7002      ANDI	R16,2
    004B7 9506      LSR	R16
    004B8 2F14      MOV	R17,R20
    004B9 940E 1E59 CALL	lsl8
    004BB 2AA0      OR	R10,R16
    004BC 9543      INC	R20
    004BD 3048      CPI	R20,0x8
    004BE F380      BCS	0x04AF
(0098)            
(0099)     }
(0100) 	///PORTE=data;
(0101)    DDRD|=0x07;
    004BF B381      IN	R24,0x11
    004C0 6087      ORI	R24,7
    004C1 BB81      OUT	0x11,R24
(0102)     CE_L;
    004C2 9892      CBI	0x12,2
(0103)     // temp = data>>4;
(0104)    // data &= 0x0f;
(0105)     //data = temp*10 + data;
(0106) 	
(0107)     return(data);
    004C3 2D0A      MOV	R16,R10
    004C4 940C 1DF1 JMP	pop_xgset30FC
(0108) }
(0109) //初始化DS1302?
(0110) void Initial_time(void) {
(0111)    DDRD|=0x07;
_Initial_time:
    004C6 B381      IN	R24,0x11
    004C7 6087      ORI	R24,7
    004C8 BB81      OUT	0x11,R24
(0112)    PORTD=0x00;
    004C9 2422      CLR	R2
    004CA BA22      OUT	0x12,R2
(0113)    Write1302(WRITE_PROTECT,0X00);//禁止写保护
    004CB 2722      CLR	R18
    004CC E80E      LDI	R16,0x8E
    004CD DF9F      RCALL	_Write1302
(0114)    Write1302(WRITE_SECOND,0x00);//秒位初始化
    004CE 2722      CLR	R18
    004CF E800      LDI	R16,0x80
    004D0 DF9C      RCALL	_Write1302
(0115)    Write1302(WRITE_MINUTE,0x50);//分钟初始化
    004D1 E520      LDI	R18,0x50
    004D2 E802      LDI	R16,0x82
    004D3 DF99      RCALL	_Write1302
(0116)    Write1302(WRITE_HOUR,0x91);//小时初始化
    004D4 E921      LDI	R18,0x91
    004D5 E804      LDI	R16,0x84
    004D6 DF96      RCALL	_Write1302
(0117)    Write1302(WRITE_PROTECT,0x80);//写保护
    004D7 E820      LDI	R18,0x80
    004D8 E80E      LDI	R16,0x8E
    004D9 CF93      RJMP	_Write1302
_showTimeLcd:
    004DA 92AA      ST	-Y,R10
    004DB 934A      ST	-Y,R20
    004DC 9721      SBIW	R28,1
(0118) }
(0119) //显示时间，时分秒
(0120) void showTimeLcd(void){
(0121)    //PORTE=~Read1302(0x81);
(0122) 	if(Read1302(0x85)&0x80){
    004DD E805      LDI	R16,0x85
    004DE DFB5      RCALL	_Read1302
    004DF FF07      SBRS	R16,7
    004E0 C048      RJMP	0x0529
(0123) 	if( (Read1302(0x85)>>4)&0x01 )
    004E1 E805      LDI	R16,0x85
    004E2 DFB1      RCALL	_Read1302
    004E3 2F80      MOV	R24,R16
    004E4 9582      SWAP	R24
    004E5 708F      ANDI	R24,0xF
    004E6 7081      ANDI	R24,1
    004E7 F0B9      BEQ	0x04FF
(0124) 	{
(0125) 	 lcd_write_char(0x00,1,0x30|((Read1302(0x85)>>4)&0x01));
    004E8 E805      LDI	R16,0x85
    004E9 DFAA      RCALL	_Read1302
    004EA 2EA0      MOV	R10,R16
    004EB 2D8A      MOV	R24,R10
    004EC 9582      SWAP	R24
    004ED 708F      ANDI	R24,0xF
    004EE 7081      ANDI	R24,1
    004EF 6380      ORI	R24,0x30
    004F0 8388      ST	Y,R24
    004F1 E021      LDI	R18,1
    004F2 2700      CLR	R16
    004F3 940E 0826 CALL	_lcd_write_char
(0126) 	 lcd_write_char_con(1,0x30|(Read1302(0x85)&0x0F));
    004F5 E805      LDI	R16,0x85
    004F6 DF9D      RCALL	_Read1302
    004F7 2F40      MOV	R20,R16
    004F8 2F24      MOV	R18,R20
    004F9 702F      ANDI	R18,0xF
    004FA 6320      ORI	R18,0x30
    004FB E001      LDI	R16,1
    004FC 940E 07F4 CALL	_lcd_write_char_con
(0127) 	}else{
    004FE C00F      RJMP	0x050E
(0128) 	 lcd_write_char(0x00,1,' ' );
    004FF E280      LDI	R24,0x20
    00500 8388      ST	Y,R24
    00501 E021      LDI	R18,1
    00502 2700      CLR	R16
    00503 940E 0826 CALL	_lcd_write_char
(0129) 	 lcd_write_char_con(1,0x30|(Read1302(0x85)&0x0F));
    00505 E805      LDI	R16,0x85
    00506 DF8D      RCALL	_Read1302
    00507 2F40      MOV	R20,R16
    00508 2F24      MOV	R18,R20
    00509 702F      ANDI	R18,0xF
    0050A 6320      ORI	R18,0x30
    0050B E001      LDI	R16,1
    0050C 940E 07F4 CALL	_lcd_write_char_con
(0130) 	}
(0131) 
(0132) 	   if(((Read1302(0x85))&0x20)){
    0050E E805      LDI	R16,0x85
    0050F DF84      RCALL	_Read1302
    00510 2EA0      MOV	R10,R16
    00511 FF05      SBRS	R16,5
    00512 C00B      RJMP	0x051E
(0133) 	      lcd_write_char(0x05,1, 'P');
    00513 E580      LDI	R24,0x50
    00514 8388      ST	Y,R24
    00515 E021      LDI	R18,1
    00516 E005      LDI	R16,5
    00517 940E 0826 CALL	_lcd_write_char
(0134) 	     lcd_write_char_con(1, 'M');
    00519 E42D      LDI	R18,0x4D
    0051A E001      LDI	R16,1
    0051B 940E 07F4 CALL	_lcd_write_char_con
(0135) 	   }else{
    0051D C021      RJMP	0x053F
(0136) 	     lcd_write_char(0x05,1, 'A');
    0051E E481      LDI	R24,0x41
    0051F 8388      ST	Y,R24
    00520 E021      LDI	R18,1
    00521 E005      LDI	R16,5
    00522 940E 0826 CALL	_lcd_write_char
(0137) 	     lcd_write_char_con(1, 'M');
    00524 E42D      LDI	R18,0x4D
    00525 E001      LDI	R16,1
    00526 940E 07F4 CALL	_lcd_write_char_con
(0138) 	    }
(0139) 	}else{
    00528 C016      RJMP	0x053F
(0140) 	 lcd_write_char(0x00,1, 0x30|((Read1302(0x85)>>4)&0x03));
    00529 E805      LDI	R16,0x85
    0052A DF69      RCALL	_Read1302
    0052B 2EA0      MOV	R10,R16
    0052C 2D8A      MOV	R24,R10
    0052D 9582      SWAP	R24
    0052E 708F      ANDI	R24,0xF
    0052F 7083      ANDI	R24,3
    00530 6380      ORI	R24,0x30
    00531 8388      ST	Y,R24
    00532 E021      LDI	R18,1
    00533 2700      CLR	R16
    00534 940E 0826 CALL	_lcd_write_char
(0141) 	 lcd_write_char_con(1,0x30|(Read1302(0x85)&0x0F)); 
    00536 E805      LDI	R16,0x85
    00537 DF5C      RCALL	_Read1302
    00538 2F40      MOV	R20,R16
    00539 2F24      MOV	R18,R20
    0053A 702F      ANDI	R18,0xF
    0053B 6320      ORI	R18,0x30
    0053C E001      LDI	R16,1
    0053D 940E 07F4 CALL	_lcd_write_char_con
(0142) 	}
(0143) 	
(0144) 	lcd_write_char(0x01,1,':');
    0053F E38A      LDI	R24,0x3A
    00540 8388      ST	Y,R24
    00541 E021      LDI	R18,1
    00542 E001      LDI	R16,1
    00543 940E 0826 CALL	_lcd_write_char
(0145) 	
(0146) 	lcd_write_char_con(1, 0x30|Read1302(0x83)>>4);
    00545 E803      LDI	R16,0x83
    00546 DF4D      RCALL	_Read1302
    00547 2EA0      MOV	R10,R16
    00548 2D2A      MOV	R18,R10
    00549 9522      SWAP	R18
    0054A 702F      ANDI	R18,0xF
    0054B 6320      ORI	R18,0x30
    0054C E001      LDI	R16,1
    0054D 940E 07F4 CALL	_lcd_write_char_con
(0147) 	lcd_write_char_con(1,0x30|(Read1302(0x83)&0x0F));
    0054F E803      LDI	R16,0x83
    00550 DF43      RCALL	_Read1302
    00551 2F40      MOV	R20,R16
    00552 2F24      MOV	R18,R20
    00553 702F      ANDI	R18,0xF
    00554 6320      ORI	R18,0x30
    00555 E001      LDI	R16,1
    00556 940E 07F4 CALL	_lcd_write_char_con
(0148) 
(0149) 	lcd_write_char_con(1,':');
    00558 E32A      LDI	R18,0x3A
    00559 E001      LDI	R16,1
    0055A 940E 07F4 CALL	_lcd_write_char_con
(0150) 	
(0151) 	 lcd_write_char_con(1, 0x30|(Read1302(0x81)>>4));
    0055C E801      LDI	R16,0x81
    0055D DF36      RCALL	_Read1302
    0055E 2EA0      MOV	R10,R16
    0055F 2D2A      MOV	R18,R10
    00560 9522      SWAP	R18
    00561 702F      ANDI	R18,0xF
    00562 6320      ORI	R18,0x30
    00563 E001      LDI	R16,1
    00564 940E 07F4 CALL	_lcd_write_char_con
(0152) 	lcd_write_char_con(1,0x30|(Read1302(0x81)&0x0F));
    00566 E801      LDI	R16,0x81
    00567 DF2C      RCALL	_Read1302
    00568 2F40      MOV	R20,R16
    00569 2F24      MOV	R18,R20
    0056A 702F      ANDI	R18,0xF
    0056B 6320      ORI	R18,0x30
    0056C E001      LDI	R16,1
    0056D 940E 07F4 CALL	_lcd_write_char_con
    0056F 9621      ADIW	R28,1
    00570 9149      LD	R20,Y+
    00571 90A9      LD	R10,Y+
    00572 9508      RET
(0153) }
(0154) 
(0155) uint getYear(void){
(0156)  return 1;
_getYear:
    00573 E001      LDI	R16,1
    00574 E010      LDI	R17,0
    00575 9508      RET
(0157) }
(0158) uint getMonth(void){
(0159)   return 1;
_getMonth:
    00576 E001      LDI	R16,1
    00577 E010      LDI	R17,0
    00578 9508      RET
(0160) }
(0161) uint getDay(void){
(0162)  return 1;
_getDay:
    00579 E001      LDI	R16,1
    0057A E010      LDI	R17,0
    0057B 9508      RET
(0163) }
(0164) uint getWeek(void){
(0165)  return 1;
_getWeek:
    0057C E001      LDI	R16,1
    0057D E010      LDI	R17,0
    0057E 9508      RET
(0166) }
(0167) uint getHour(void){
(0168)  return 1;
_getHour:
    0057F E001      LDI	R16,1
    00580 E010      LDI	R17,0
    00581 9508      RET
(0169) }
(0170) uint getMinute(void){
(0171)  return 1;
_getMinute:
    00582 E001      LDI	R16,1
    00583 E010      LDI	R17,0
    00584 9508      RET
(0172) }
(0173) uint getSecond(void){
(0174)  return 1;
_getSecond:
    00585 E001      LDI	R16,1
    00586 E010      LDI	R17,0
    00587 9508      RET
(0175) }
(0176) void setTime(uint year,uint month,uint day,uint week,uint hour,uint minute,uint second){
_setTime:
  second               --> Y,+12
  minute               --> Y,+10
  hour                 --> Y,+8
  week                 --> Y,+6
  day                  --> Y,+4
  month                --> Y,+2
  year                 --> Y,+0
    00588 9508      RET
_showTime_page:
  y                    --> R10
    00589 940E 1E32 CALL	push_xgset303C
    0058B 0158      MOVW	R10,R16
(0177) 
(0178) }
(0179) //显示时间，年月日时分秒，用于page调用。没有改变AC，会接着写
(0180) void showTime_page(uint y){
(0181)    //PORTE=~Read1302(0x81);
(0182)    //年
(0183)     lcd_write_str_con(y, "20");
    0058C E020      LDI	R18,0
    0058D E031      LDI	R19,1
    0058E 2D0A      MOV	R16,R10
    0058F 940E 0896 CALL	_lcd_write_str_con
(0184)     lcd_write_char_con(y, 0x30|((Read1302(0x8D)>>4)&0x0F));
    00591 E80D      LDI	R16,0x8D
    00592 DF01      RCALL	_Read1302
    00593 2F20      MOV	R18,R16
    00594 9522      SWAP	R18
    00595 702F      ANDI	R18,0xF
    00596 702F      ANDI	R18,0xF
    00597 6320      ORI	R18,0x30
    00598 2D0A      MOV	R16,R10
    00599 940E 07F4 CALL	_lcd_write_char_con
(0185)     lcd_write_char_con(y,0x30|(Read1302(0x8D)&0x0F)); 
    0059B E80D      LDI	R16,0x8D
    0059C DEF7      RCALL	_Read1302
    0059D 2F20      MOV	R18,R16
    0059E 702F      ANDI	R18,0xF
    0059F 6320      ORI	R18,0x30
    005A0 2D0A      MOV	R16,R10
    005A1 940E 07F4 CALL	_lcd_write_char_con
(0186) 	lcd_write_char_con(y,'-');
    005A3 E22D      LDI	R18,0x2D
    005A4 2D0A      MOV	R16,R10
    005A5 940E 07F4 CALL	_lcd_write_char_con
(0187) 	 //月
(0188) 	 lcd_write_char_con(y, 0x30|((Read1302(0x89)>>4)&0x01));
    005A7 E809      LDI	R16,0x89
    005A8 DEEB      RCALL	_Read1302
    005A9 2EC0      MOV	R12,R16
    005AA 2D2C      MOV	R18,R12
    005AB 9522      SWAP	R18
    005AC 702F      ANDI	R18,0xF
    005AD 7021      ANDI	R18,1
    005AE 6320      ORI	R18,0x30
    005AF 2D0A      MOV	R16,R10
    005B0 940E 07F4 CALL	_lcd_write_char_con
(0189)      lcd_write_char_con(y,0x30|(Read1302(0x89)&0x0F)); 
    005B2 E809      LDI	R16,0x89
    005B3 DEE0      RCALL	_Read1302
    005B4 2F40      MOV	R20,R16
    005B5 2F24      MOV	R18,R20
    005B6 702F      ANDI	R18,0xF
    005B7 6320      ORI	R18,0x30
    005B8 2D0A      MOV	R16,R10
    005B9 940E 07F4 CALL	_lcd_write_char_con
(0190) 	 lcd_write_char_con(y,'-');
    005BB E22D      LDI	R18,0x2D
    005BC 2D0A      MOV	R16,R10
    005BD 940E 07F4 CALL	_lcd_write_char_con
(0191) 	 //日
(0192) 	 lcd_write_char_con(y, 0x30|((Read1302(0x87)>>4)&0x03));
    005BF E807      LDI	R16,0x87
    005C0 DED3      RCALL	_Read1302
    005C1 2EC0      MOV	R12,R16
    005C2 2D2C      MOV	R18,R12
    005C3 9522      SWAP	R18
    005C4 702F      ANDI	R18,0xF
    005C5 7023      ANDI	R18,3
    005C6 6320      ORI	R18,0x30
    005C7 2D0A      MOV	R16,R10
    005C8 940E 07F4 CALL	_lcd_write_char_con
(0193)      lcd_write_char_con(y,0x30|(Read1302(0x87)&0x0F)); 
    005CA E807      LDI	R16,0x87
    005CB DEC8      RCALL	_Read1302
    005CC 2F40      MOV	R20,R16
    005CD 2F24      MOV	R18,R20
    005CE 702F      ANDI	R18,0xF
    005CF 6320      ORI	R18,0x30
    005D0 2D0A      MOV	R16,R10
    005D1 940E 07F4 CALL	_lcd_write_char_con
(0194) 	 lcd_write_char_con(y,' ');
    005D3 E220      LDI	R18,0x20
    005D4 2D0A      MOV	R16,R10
    005D5 940E 07F4 CALL	_lcd_write_char_con
(0195) 	//时
(0196) 	 lcd_write_char_con(y, 0x30|((Read1302(0x85)>>4)&0x03));
    005D7 E805      LDI	R16,0x85
    005D8 DEBB      RCALL	_Read1302
    005D9 2EC0      MOV	R12,R16
    005DA 2D2C      MOV	R18,R12
    005DB 9522      SWAP	R18
    005DC 702F      ANDI	R18,0xF
    005DD 7023      ANDI	R18,3
    005DE 6320      ORI	R18,0x30
    005DF 2D0A      MOV	R16,R10
    005E0 940E 07F4 CALL	_lcd_write_char_con
(0197) 	 lcd_write_char_con(y,0x30|(Read1302(0x85)&0x0F)); 
    005E2 E805      LDI	R16,0x85
    005E3 DEB0      RCALL	_Read1302
    005E4 2F40      MOV	R20,R16
    005E5 2F24      MOV	R18,R20
    005E6 702F      ANDI	R18,0xF
    005E7 6320      ORI	R18,0x30
    005E8 2D0A      MOV	R16,R10
    005E9 940E 07F4 CALL	_lcd_write_char_con
(0198) 	 lcd_write_char_con(y,':');
    005EB E32A      LDI	R18,0x3A
    005EC 2D0A      MOV	R16,R10
    005ED 940E 07F4 CALL	_lcd_write_char_con
(0199) 	//分
(0200) 	 lcd_write_char_con(y, 0x30|Read1302(0x83)>>4);
    005EF E803      LDI	R16,0x83
    005F0 DEA3      RCALL	_Read1302
    005F1 2EC0      MOV	R12,R16
    005F2 2D2C      MOV	R18,R12
    005F3 9522      SWAP	R18
    005F4 702F      ANDI	R18,0xF
    005F5 6320      ORI	R18,0x30
    005F6 2D0A      MOV	R16,R10
    005F7 940E 07F4 CALL	_lcd_write_char_con
(0201) 	 lcd_write_char_con(y,0x30|(Read1302(0x83)&0x0F));
    005F9 E803      LDI	R16,0x83
    005FA DE99      RCALL	_Read1302
    005FB 2F40      MOV	R20,R16
    005FC 2F24      MOV	R18,R20
    005FD 702F      ANDI	R18,0xF
    005FE 6320      ORI	R18,0x30
    005FF 2D0A      MOV	R16,R10
    00600 940E 07F4 CALL	_lcd_write_char_con
(0202) 	 lcd_write_char_con(y,':');
    00602 E32A      LDI	R18,0x3A
    00603 2D0A      MOV	R16,R10
    00604 940E 07F4 CALL	_lcd_write_char_con
(0203) 	//秒
(0204) 	 lcd_write_char_con(y, 0x30|(Read1302(0x81)>>4));
    00606 E801      LDI	R16,0x81
    00607 DE8C      RCALL	_Read1302
    00608 2EC0      MOV	R12,R16
    00609 2D2C      MOV	R18,R12
    0060A 9522      SWAP	R18
    0060B 702F      ANDI	R18,0xF
    0060C 6320      ORI	R18,0x30
    0060D 2D0A      MOV	R16,R10
    0060E 940E 07F4 CALL	_lcd_write_char_con
(0205) 	 lcd_write_char_con(y,0x30|(Read1302(0x81)&0x0F));
    00610 E801      LDI	R16,0x81
    00611 DE82      RCALL	_Read1302
    00612 2F40      MOV	R20,R16
    00613 2F24      MOV	R18,R20
    00614 702F      ANDI	R18,0xF
    00615 6320      ORI	R18,0x30
    00616 2D0A      MOV	R16,R10
    00617 940E 07F4 CALL	_lcd_write_char_con
    00619 940C 1E39 JMP	pop_xgset303C
FILE: E:\ICCDemo\Temp_Control\temp_control\key.c
(0001) #include<iom128v.h>
(0002) #include "delay.h"
(0003) #include "lcd.h"
(0004) uchar key_value='n';
(0005) void KeyInit(void){
_KeyInit:
    0061B 9508      RET
_KeyScan:
    0061C 934A      ST	-Y,R20
    0061D 935A      ST	-Y,R21
(0006) }
(0007) uchar KeyScan(void){
(0008)   //初始化端口
(0009)    DDRC=0xE0;
    0061E EE80      LDI	R24,0xE0
    0061F BB84      OUT	0x14,R24
(0010)    DDRG|=0x10;
    00620 9180 0064 LDS	R24,0x64
    00622 6180      ORI	R24,0x10
    00623 9380 0064 STS	0x64,R24
(0011)    
(0012)    //第一次扫描
(0013)    PORTC=0xDF;
    00625 ED8F      LDI	R24,0xDF
    00626 BB85      OUT	0x15,R24
(0014)    PORTG|=0x10;
    00627 9180 0065 LDS	R24,0x65
    00629 6180      ORI	R24,0x10
    0062A 9380 0065 STS	0x65,R24
(0015)    delay_us(1);
    0062C E001      LDI	R16,1
    0062D E010      LDI	R17,0
    0062E 940E 0443 CALL	_delay_us
(0016)    switch(PINC)
    00630 B343      IN	R20,0x13
    00631 2755      CLR	R21
    00632 3C4F      CPI	R20,0xCF
    00633 E0E0      LDI	R30,0
    00634 075E      CPC	R21,R30
    00635 F0E9      BEQ	0x0653
    00636 3C4F      CPI	R20,0xCF
    00637 E0E0      LDI	R30,0
    00638 075E      CPC	R21,R30
    00639 F0DC      BLT	0x0655
    0063A 3D47      CPI	R20,0xD7
    0063B E0E0      LDI	R30,0
    0063C 075E      CPC	R21,R30
    0063D F099      BEQ	0x0651
    0063E 3D4B      CPI	R20,0xDB
    0063F E0E0      LDI	R30,0
    00640 075E      CPC	R21,R30
    00641 F069      BEQ	0x064F
    00642 3D4D      CPI	R20,0xDD
    00643 E0E0      LDI	R30,0
    00644 075E      CPC	R21,R30
    00645 F039      BEQ	0x064D
    00646 3D4E      CPI	R20,0xDE
    00647 E0E0      LDI	R30,0
    00648 075E      CPC	R21,R30
    00649 F009      BEQ	0x064B
    0064A C00A      RJMP	0x0655
(0017)    {
(0018)    		case 0xDE:return  'e';//'esc';
    0064B E605      LDI	R16,0x65
    0064C C099      RJMP	0x06E6
(0019) 		case 0xdd:return  'a';//'alm';
    0064D E601      LDI	R16,0x61
    0064E C097      RJMP	0x06E6
(0020) 		case 0xdb:return  'd';//'down';  
    0064F E604      LDI	R16,0x64
    00650 C095      RJMP	0x06E6
(0021) 		case 0xd7:return  'u';//'up';
    00651 E705      LDI	R16,0x75
    00652 C093      RJMP	0x06E6
(0022) 		case 0xcf:return  'l';//'left';
    00653 E60C      LDI	R16,0x6C
    00654 C091      RJMP	0x06E6
(0023) 		default:break;	   
(0024)    } 
(0025)     //第二次扫描
(0026)    PORTC=0xBF;
    00655 EB8F      LDI	R24,0xBF
    00656 BB85      OUT	0x15,R24
(0027)    PORTG|=0x10;
    00657 9180 0065 LDS	R24,0x65
    00659 6180      ORI	R24,0x10
    0065A 9380 0065 STS	0x65,R24
(0028)    delay_us(1);
    0065C E001      LDI	R16,1
    0065D E010      LDI	R17,0
    0065E 940E 0443 CALL	_delay_us
(0029)    switch(PINC)
    00660 B343      IN	R20,0x13
    00661 2755      CLR	R21
    00662 3A4F      CPI	R20,0xAF
    00663 E0E0      LDI	R30,0
    00664 075E      CPC	R21,R30
    00665 F0E9      BEQ	0x0683
    00666 3A4F      CPI	R20,0xAF
    00667 E0E0      LDI	R30,0
    00668 075E      CPC	R21,R30
    00669 F0DC      BLT	0x0685
    0066A 3B47      CPI	R20,0xB7
    0066B E0E0      LDI	R30,0
    0066C 075E      CPC	R21,R30
    0066D F099      BEQ	0x0681
    0066E 3B4B      CPI	R20,0xBB
    0066F E0E0      LDI	R30,0
    00670 075E      CPC	R21,R30
    00671 F069      BEQ	0x067F
    00672 3B4D      CPI	R20,0xBD
    00673 E0E0      LDI	R30,0
    00674 075E      CPC	R21,R30
    00675 F039      BEQ	0x067D
    00676 3B4E      CPI	R20,0xBE
    00677 E0E0      LDI	R30,0
    00678 075E      CPC	R21,R30
    00679 F009      BEQ	0x067B
    0067A C00A      RJMP	0x0685
(0030)    {
(0031)    		case 0xbE:return 's';//'set';
    0067B E703      LDI	R16,0x73
    0067C C069      RJMP	0x06E6
(0032) 		case 0xbd:return 'r';//'right';
    0067D E702      LDI	R16,0x72
    0067E C067      RJMP	0x06E6
(0033) 		case 0xbb:return 't';//'ent';  
    0067F E704      LDI	R16,0x74
    00680 C065      RJMP	0x06E6
(0034) 		case 0xb7:return 'c';//'clr';
    00681 E603      LDI	R16,0x63
    00682 C063      RJMP	0x06E6
(0035) 		case 0xaf:return '+';//'+/-';
    00683 E20B      LDI	R16,0x2B
    00684 C061      RJMP	0x06E6
(0036) 		default:break;	   
(0037)    } 
(0038)     //第三次扫描
(0039)    PORTC=0x7F;
    00685 E78F      LDI	R24,0x7F
    00686 BB85      OUT	0x15,R24
(0040)    PORTG|=0x10;
    00687 9180 0065 LDS	R24,0x65
    00689 6180      ORI	R24,0x10
    0068A 9380 0065 STS	0x65,R24
(0041)    delay_us(1);
    0068C E001      LDI	R16,1
    0068D E010      LDI	R17,0
    0068E 940E 0443 CALL	_delay_us
(0042)    switch(PINC)
    00690 B343      IN	R20,0x13
    00691 2755      CLR	R21
    00692 364F      CPI	R20,0x6F
    00693 E0E0      LDI	R30,0
    00694 075E      CPC	R21,R30
    00695 F0E9      BEQ	0x06B3
    00696 364F      CPI	R20,0x6F
    00697 E0E0      LDI	R30,0
    00698 075E      CPC	R21,R30
    00699 F0DC      BLT	0x06B5
    0069A 3747      CPI	R20,0x77
    0069B E0E0      LDI	R30,0
    0069C 075E      CPC	R21,R30
    0069D F099      BEQ	0x06B1
    0069E 374B      CPI	R20,0x7B
    0069F E0E0      LDI	R30,0
    006A0 075E      CPC	R21,R30
    006A1 F069      BEQ	0x06AF
    006A2 374D      CPI	R20,0x7D
    006A3 E0E0      LDI	R30,0
    006A4 075E      CPC	R21,R30
    006A5 F039      BEQ	0x06AD
    006A6 374E      CPI	R20,0x7E
    006A7 E0E0      LDI	R30,0
    006A8 075E      CPC	R21,R30
    006A9 F009      BEQ	0x06AB
    006AA C00A      RJMP	0x06B5
(0043)    {
(0044)    		case 0x7E:return '0';
    006AB E300      LDI	R16,0x30
    006AC C039      RJMP	0x06E6
(0045) 		case 0x7d:return '3';
    006AD E303      LDI	R16,0x33
    006AE C037      RJMP	0x06E6
(0046) 		case 0x7b:return '2';  
    006AF E302      LDI	R16,0x32
    006B0 C035      RJMP	0x06E6
(0047) 		case 0x77:return '1';
    006B1 E301      LDI	R16,0x31
    006B2 C033      RJMP	0x06E6
(0048) 		case 0x6f:return '6';
    006B3 E306      LDI	R16,0x36
    006B4 C031      RJMP	0x06E6
(0049) 		default:break;	   
(0050)    } 
(0051)       //第四次扫描
(0052)    PORTC=0xFF;
    006B5 EF8F      LDI	R24,0xFF
    006B6 BB85      OUT	0x15,R24
(0053)    PORTG&=0x0F;
    006B7 9180 0065 LDS	R24,0x65
    006B9 708F      ANDI	R24,0xF
    006BA 9380 0065 STS	0x65,R24
(0054)    delay_us(1);
    006BC E001      LDI	R16,1
    006BD E010      LDI	R17,0
    006BE 940E 0443 CALL	_delay_us
(0055)    switch(PINC)
    006C0 B343      IN	R20,0x13
    006C1 2755      CLR	R21
    006C2 3E4F      CPI	R20,0xEF
    006C3 E0E0      LDI	R30,0
    006C4 075E      CPC	R21,R30
    006C5 F0E9      BEQ	0x06E3
    006C6 3E4F      CPI	R20,0xEF
    006C7 E0E0      LDI	R30,0
    006C8 075E      CPC	R21,R30
    006C9 F0DC      BLT	0x06E5
    006CA 3F47      CPI	R20,0xF7
    006CB E0E0      LDI	R30,0
    006CC 075E      CPC	R21,R30
    006CD F099      BEQ	0x06E1
    006CE 3F4B      CPI	R20,0xFB
    006CF E0E0      LDI	R30,0
    006D0 075E      CPC	R21,R30
    006D1 F069      BEQ	0x06DF
    006D2 3F4D      CPI	R20,0xFD
    006D3 E0E0      LDI	R30,0
    006D4 075E      CPC	R21,R30
    006D5 F039      BEQ	0x06DD
    006D6 3F4E      CPI	R20,0xFE
    006D7 E0E0      LDI	R30,0
    006D8 075E      CPC	R21,R30
    006D9 F009      BEQ	0x06DB
    006DA C00A      RJMP	0x06E5
(0056)    {
(0057)    		case 0xFE:return '7';
    006DB E307      LDI	R16,0x37
    006DC C009      RJMP	0x06E6
(0058) 		case 0xFd:return '8';
    006DD E308      LDI	R16,0x38
    006DE C007      RJMP	0x06E6
(0059) 		case 0xFb:return '9';  
    006DF E309      LDI	R16,0x39
    006E0 C005      RJMP	0x06E6
(0060) 		case 0xF7:return '4';
    006E1 E304      LDI	R16,0x34
    006E2 C003      RJMP	0x06E6
(0061) 		case 0xEf:return '5';
    006E3 E305      LDI	R16,0x35
    006E4 C001      RJMP	0x06E6
(0062) 		default:break;	   
(0063)    }
(0064)  return 'n';
    006E5 E60E      LDI	R16,0x6E
    006E6 9159      LD	R21,Y+
    006E7 9149      LD	R20,Y+
    006E8 9508      RET
_KeyScan_once:
  keyValue2            --> R10
  keyValue             --> R20
    006E9 92AA      ST	-Y,R10
    006EA 934A      ST	-Y,R20
(0065)    
(0066) }
(0067) //********************************
(0068) //		加上延时抖动的读取，一次读取一个
(0069) //********************************
(0070) uchar KeyScan_once(void){
(0071) 	  uchar keyValue,keyValue2;
(0072) 	  keyValue=KeyScan();
    006EB DF30      RCALL	_KeyScan
    006EC 2F40      MOV	R20,R16
(0073) 	  delay_ms(2);
    006ED E002      LDI	R16,2
    006EE E010      LDI	R17,0
    006EF 940E 044D CALL	_delay_ms
(0074) 	  keyValue2=KeyScan();
    006F1 DF2A      RCALL	_KeyScan
    006F2 2EA0      MOV	R10,R16
(0075) 	 if(keyValue==keyValue2 && keyValue!='n'){//两次扫描，消除抖动
    006F3 1740      CP	R20,R16
    006F4 F461      BNE	0x0701
    006F5 364E      CPI	R20,0x6E
    006F6 F051      BEQ	0x0701
(0076) 	 	if(key_value==keyValue){//如果还是上一次保存的值则代表一直按着，返回‘n’
    006F7 9020 0103 LDS	R2,key_value
    006F9 1624      CP	R2,R20
    006FA F411      BNE	0x06FD
(0077) 		    return 'n';  
    006FB E60E      LDI	R16,0x6E
    006FC C008      RJMP	0x0705
(0078) 	    }else{                  //松开后第一次按下，返回该键的值
(0079) 		 key_value=keyValue;
    006FD 9340 0103 STS	key_value,R20
(0080) 		  return keyValue;
    006FF 2F04      MOV	R16,R20
    00700 C004      RJMP	0x0705
(0081) 		}
(0082) 	 }else{                     //因为读取键盘的值会多次刷新，所以在松开按键时key_value重置
(0083) 	   key_value='n';
    00701 E68E      LDI	R24,0x6E
    00702 9380 0103 STS	key_value,R24
(0084) 	   return 'n';
    00704 E60E      LDI	R16,0x6E
    00705 9149      LD	R20,Y+
    00706 90A9      LD	R10,Y+
    00707 9508      RET
_lcd_bz_1:
  result               --> R20
    00708 934A      ST	-Y,R20
    00709 935A      ST	-Y,R21
FILE: E:\ICCDemo\Temp_Control\temp_control\lcd.c
(0001) #include<iom128v.h>
(0002) #include "lcd.h"
(0003) #include "delay.h" 
(0004) #define rs_l PORTG&=~(1<<PG1)
(0005) #define rs_h PORTG|=1<<PG1
(0006) #define rw_l PORTG&=~(1<<PG0)
(0007) #define rw_h PORTG|=1<<PG0
(0008) #define ep1_l PORTG&=~(1<<PG3)
(0009) #define ep1_h PORTG|=1<<PG3
(0010) #define ep2_l PORTF&=~(1<<PF0)
(0011) #define ep2_h PORTF|=1<<PF0
(0012) //***********************************
(0013) //上半屏幕
(0014) //**********************************
(0015) /*
(0016)  读忙程序。命令后，读入BF
(0017) */
(0018) uint lcd_bz_1(void){
(0019) 	uint result;
(0020) 	DDRA=0x00;
    0070A 2422      CLR	R2
    0070B BA2A      OUT	0x1A,R2
(0021) 	rs_l;
    0070C 9180 0065 LDS	R24,0x65
    0070E 7F8D      ANDI	R24,0xFD
    0070F 9380 0065 STS	0x65,R24
(0022) 	rw_h;
    00711 9180 0065 LDS	R24,0x65
    00713 6081      ORI	R24,1
    00714 9380 0065 STS	0x65,R24
(0023) 	ep1_h;
    00716 9180 0065 LDS	R24,0x65
    00718 6088      ORI	R24,0x8
    00719 9380 0065 STS	0x65,R24
(0024) 	delay_us(1);
    0071B E001      LDI	R16,1
    0071C E010      LDI	R17,0
    0071D 940E 0443 CALL	_delay_us
(0025) 	result=PINA&(1<<PINA7);
    0071F B349      IN	R20,0x19
    00720 2755      CLR	R21
    00721 7840      ANDI	R20,0x80
    00722 7050      ANDI	R21,0
(0026) 	DDRA=0xFF;
    00723 EF8F      LDI	R24,0xFF
    00724 BB8A      OUT	0x1A,R24
(0027) 	ep1_l;
    00725 9180 0065 LDS	R24,0x65
    00727 7F87      ANDI	R24,0xF7
    00728 9380 0065 STS	0x65,R24
(0028) 	return result;
    0072A 018A      MOVW	R16,R20
    0072B 9159      LD	R21,Y+
    0072C 9149      LD	R20,Y+
    0072D 9508      RET
_lcd_wcmd_1:
  cmd                  --> R10
    0072E 92AA      ST	-Y,R10
    0072F 2EA0      MOV	R10,R16
(0029) }
(0030) void lcd_wcmd_1(uchar cmd){
(0031) 	 while(lcd_bz_1());
    00730 DFD7      RCALL	_lcd_bz_1
    00731 3000      CPI	R16,0
    00732 0701      CPC	R16,R17
    00733 F7E1      BNE	0x0730
(0032) 	 rs_l;
    00734 9180 0065 LDS	R24,0x65
    00736 7F8D      ANDI	R24,0xFD
    00737 9380 0065 STS	0x65,R24
(0033) 	 rw_l;
    00739 9180 0065 LDS	R24,0x65
    0073B 7F8E      ANDI	R24,0xFE
    0073C 9380 0065 STS	0x65,R24
(0034) 	 ep1_l;
    0073E 9180 0065 LDS	R24,0x65
    00740 7F87      ANDI	R24,0xF7
    00741 9380 0065 STS	0x65,R24
(0035) 	 PORTA=cmd;
    00743 BAAB      OUT	0x1B,R10
(0036) 	 ep1_h;
    00744 9180 0065 LDS	R24,0x65
    00746 6088      ORI	R24,0x8
    00747 9380 0065 STS	0x65,R24
(0037) 	 delay_us(1);
    00749 E001      LDI	R16,1
    0074A E010      LDI	R17,0
    0074B 940E 0443 CALL	_delay_us
(0038) 	 ep1_l;
    0074D 9180 0065 LDS	R24,0x65
    0074F 7F87      ANDI	R24,0xF7
    00750 9380 0065 STS	0x65,R24
(0039) 	 return;
    00752 90A9      LD	R10,Y+
    00753 9508      RET
_lcd_wdat_1:
  dat                  --> R10
    00754 92AA      ST	-Y,R10
    00755 2EA0      MOV	R10,R16
(0040) }
(0041) /*
(0042) 写输出数据,char
(0043) */
(0044) void lcd_wdat_1(uchar dat){
(0045) 	 while(lcd_bz_1());
    00756 DFB1      RCALL	_lcd_bz_1
    00757 3000      CPI	R16,0
    00758 0701      CPC	R16,R17
    00759 F7E1      BNE	0x0756
(0046) 	 rs_h;
    0075A 9180 0065 LDS	R24,0x65
    0075C 6082      ORI	R24,2
    0075D 9380 0065 STS	0x65,R24
(0047) 	 rw_l;
    0075F 9180 0065 LDS	R24,0x65
    00761 7F8E      ANDI	R24,0xFE
    00762 9380 0065 STS	0x65,R24
(0048) 	 ep1_l;
    00764 9180 0065 LDS	R24,0x65
    00766 7F87      ANDI	R24,0xF7
    00767 9380 0065 STS	0x65,R24
(0049) 	 PORTA=dat;
    00769 BAAB      OUT	0x1B,R10
(0050) 	 ep1_h;
    0076A 9180 0065 LDS	R24,0x65
    0076C 6088      ORI	R24,0x8
    0076D 9380 0065 STS	0x65,R24
(0051) 	 delay_us(1);
    0076F E001      LDI	R16,1
    00770 E010      LDI	R17,0
    00771 940E 0443 CALL	_delay_us
(0052) 	 ep1_l;
    00773 9180 0065 LDS	R24,0x65
    00775 7F87      ANDI	R24,0xF7
    00776 9380 0065 STS	0x65,R24
    00778 90A9      LD	R10,Y+
    00779 9508      RET
(0053) }
(0054) 
(0055) /*清显示*/
(0056) void lcd_clear_1(void) 
(0057) {
(0058) 	lcd_wcmd_1(0x01);
_lcd_clear_1:
    0077A E001      LDI	R16,1
    0077B DFB2      RCALL	_lcd_wcmd_1
(0059) 	delay_ms(1);
    0077C E001      LDI	R16,1
    0077D E010      LDI	R17,0
    0077E 940C 044D JMP	_delay_ms
_lcd_bz_2:
  result               --> R20
    00780 934A      ST	-Y,R20
    00781 935A      ST	-Y,R21
(0060) }
(0061) //***********************************
(0062) //    下半屏幕
(0063) //***********************************
(0064) uint lcd_bz_2(void){
(0065) 	uint result;
(0066) 	DDRA=0x00;
    00782 2422      CLR	R2
    00783 BA2A      OUT	0x1A,R2
(0067) 	rs_l;
    00784 9180 0065 LDS	R24,0x65
    00786 7F8D      ANDI	R24,0xFD
    00787 9380 0065 STS	0x65,R24
(0068) 	rw_h;
    00789 9180 0065 LDS	R24,0x65
    0078B 6081      ORI	R24,1
    0078C 9380 0065 STS	0x65,R24
(0069) 	ep2_h;
    0078E 9180 0062 LDS	R24,0x62
    00790 6081      ORI	R24,1
    00791 9380 0062 STS	0x62,R24
(0070) 	delay_us(1);
    00793 E001      LDI	R16,1
    00794 E010      LDI	R17,0
    00795 940E 0443 CALL	_delay_us
(0071) 	result=PINA&(1<<PINA7);
    00797 B349      IN	R20,0x19
    00798 2755      CLR	R21
    00799 7840      ANDI	R20,0x80
    0079A 7050      ANDI	R21,0
(0072) 	DDRA=0xFF;
    0079B EF8F      LDI	R24,0xFF
    0079C BB8A      OUT	0x1A,R24
(0073) 	ep2_l;
    0079D 9180 0062 LDS	R24,0x62
    0079F 7F8E      ANDI	R24,0xFE
    007A0 9380 0062 STS	0x62,R24
(0074) 	return result;
    007A2 018A      MOVW	R16,R20
    007A3 9159      LD	R21,Y+
    007A4 9149      LD	R20,Y+
    007A5 9508      RET
_lcd_wcmd_2:
  cmd                  --> R10
    007A6 92AA      ST	-Y,R10
    007A7 2EA0      MOV	R10,R16
(0075) }
(0076) void lcd_wcmd_2(uchar cmd){
(0077) 	 while(lcd_bz_2());
    007A8 DFD7      RCALL	_lcd_bz_2
    007A9 3000      CPI	R16,0
    007AA 0701      CPC	R16,R17
    007AB F7E1      BNE	0x07A8
(0078) 	 rs_l;
    007AC 9180 0065 LDS	R24,0x65
    007AE 7F8D      ANDI	R24,0xFD
    007AF 9380 0065 STS	0x65,R24
(0079) 	 rw_l;
    007B1 9180 0065 LDS	R24,0x65
    007B3 7F8E      ANDI	R24,0xFE
    007B4 9380 0065 STS	0x65,R24
(0080) 	 ep2_l;
    007B6 9180 0062 LDS	R24,0x62
    007B8 7F8E      ANDI	R24,0xFE
    007B9 9380 0062 STS	0x62,R24
(0081) 	 PORTA=cmd;
    007BB BAAB      OUT	0x1B,R10
(0082) 	 ep2_h;
    007BC 9180 0062 LDS	R24,0x62
    007BE 6081      ORI	R24,1
    007BF 9380 0062 STS	0x62,R24
(0083) 	delay_us(1);
    007C1 E001      LDI	R16,1
    007C2 E010      LDI	R17,0
    007C3 940E 0443 CALL	_delay_us
(0084) 	 ep2_l;
    007C5 9180 0062 LDS	R24,0x62
    007C7 7F8E      ANDI	R24,0xFE
    007C8 9380 0062 STS	0x62,R24
    007CA 90A9      LD	R10,Y+
    007CB 9508      RET
_lcd_wdat_2:
  dat                  --> R10
    007CC 92AA      ST	-Y,R10
    007CD 2EA0      MOV	R10,R16
(0085) }
(0086) //  写输出数据,char
(0087) void lcd_wdat_2(uchar dat){
(0088) 	 while(lcd_bz_2());
    007CE DFB1      RCALL	_lcd_bz_2
    007CF 3000      CPI	R16,0
    007D0 0701      CPC	R16,R17
    007D1 F7E1      BNE	0x07CE
(0089) 	 rs_h;
    007D2 9180 0065 LDS	R24,0x65
    007D4 6082      ORI	R24,2
    007D5 9380 0065 STS	0x65,R24
(0090) 	 rw_l;
    007D7 9180 0065 LDS	R24,0x65
    007D9 7F8E      ANDI	R24,0xFE
    007DA 9380 0065 STS	0x65,R24
(0091) 	 ep2_l;
    007DC 9180 0062 LDS	R24,0x62
    007DE 7F8E      ANDI	R24,0xFE
    007DF 9380 0062 STS	0x62,R24
(0092) 	 PORTA=dat;
    007E1 BAAB      OUT	0x1B,R10
(0093) 	 ep2_h;
    007E2 9180 0062 LDS	R24,0x62
    007E4 6081      ORI	R24,1
    007E5 9380 0062 STS	0x62,R24
(0094) 	delay_us(1);
    007E7 E001      LDI	R16,1
    007E8 E010      LDI	R17,0
    007E9 940E 0443 CALL	_delay_us
(0095) 	 ep2_l;
    007EB 9180 0062 LDS	R24,0x62
    007ED 7F8E      ANDI	R24,0xFE
    007EE 9380 0062 STS	0x62,R24
    007F0 90A9      LD	R10,Y+
    007F1 9508      RET
(0096) }
(0097) /*清显示*/
(0098) void lcd_clear_2(void) 
(0099) {
(0100) 	lcd_wcmd_2(0x01);
_lcd_clear_2:
    007F2 E001      LDI	R16,1
    007F3 CFB2      RJMP	_lcd_wcmd_2
_lcd_write_char_con:
  data                 --> R10
  y                    --> R20
    007F4 92AA      ST	-Y,R10
    007F5 934A      ST	-Y,R20
    007F6 2EA2      MOV	R10,R18
    007F7 2F40      MOV	R20,R16
(0101) }
(0102) 
(0103) //*************************************************
(0104) //					写字符
(0105) //***************************************************
(0106) /*
(0107)   附带y。调用 lcd_wdat（）方法。传入时转换为char。直接连续写入使用
(0108) */
(0109) void lcd_write_char_con(unsigned char y,unsigned char data) 
(0110) {
(0111) 	
(0112)     if (y == 0 || y==1) 
    007F8 2344      TST	R20
    007F9 F011      BEQ	0x07FC
    007FA 3041      CPI	R20,1
    007FB F419      BNE	0x07FF
(0113)     {
(0114)     	
(0115) 		 lcd_wdat_1( data);
    007FC 2D0A      MOV	R16,R10
    007FD DF56      RCALL	_lcd_wdat_1
(0116)     }else  if(y==2 || y==3 )
    007FE C006      RJMP	0x0805
    007FF 3042      CPI	R20,2
    00800 F011      BEQ	0x0803
    00801 3043      CPI	R20,3
    00802 F411      BNE	0x0805
(0117)     {
(0118)     	
(0119) 		 lcd_wdat_2( data);
    00803 2D0A      MOV	R16,R10
    00804 DFC7      RCALL	_lcd_wdat_2
(0120)     }
(0121)    return; 
    00805 9149      LD	R20,Y+
    00806 90A9      LD	R10,Y+
    00807 9508      RET
_lcd_write_pos:
  y                    --> R22
  x                    --> R20
    00808 934A      ST	-Y,R20
    00809 936A      ST	-Y,R22
    0080A 2F62      MOV	R22,R18
    0080B 2F40      MOV	R20,R16
(0122) }
(0123) /*
(0124)   附带x,y。写光标位置
(0125) */
(0126) void lcd_write_pos(unsigned char x,unsigned char y) 
(0127) {
(0128) 	
(0129)     if (y == 0) 
    0080C 2366      TST	R22
    0080D F421      BNE	0x0812
(0130)     {
(0131)     	lcd_wcmd_1(0x80 + x);
    0080E 2F04      MOV	R16,R20
    0080F 5800      SUBI	R16,0x80
    00810 DF1D      RCALL	_lcd_wcmd_1
(0132)     }
    00811 C011      RJMP	0x0823
(0133)     else  if(y==1)
    00812 3061      CPI	R22,1
    00813 F421      BNE	0x0818
(0134)     {
(0135)     	lcd_wcmd_1(0x90 + x);
    00814 2F04      MOV	R16,R20
    00815 5700      SUBI	R16,0x70
    00816 DF17      RCALL	_lcd_wcmd_1
(0136)     }else  if(y==2)
    00817 C00B      RJMP	0x0823
    00818 3062      CPI	R22,2
    00819 F421      BNE	0x081E
(0137)     {
(0138)     	lcd_wcmd_2(0x80 + x);
    0081A 2F04      MOV	R16,R20
    0081B 5800      SUBI	R16,0x80
    0081C DF89      RCALL	_lcd_wcmd_2
(0139)     }else  if(y==3)
    0081D C005      RJMP	0x0823
    0081E 3063      CPI	R22,3
    0081F F419      BNE	0x0823
(0140)     {
(0141)     	lcd_wcmd_2(0x90 + x);
    00820 2F04      MOV	R16,R20
    00821 5700      SUBI	R16,0x70
    00822 DF83      RCALL	_lcd_wcmd_2
(0142)     }
(0143)    return; 
    00823 9169      LD	R22,Y+
    00824 9149      LD	R20,Y+
    00825 9508      RET
_lcd_write_char:
  data                 --> R10
  y                    --> R22
  x                    --> R20
    00826 940E 1E24 CALL	push_xgsetF00C
    00828 2F62      MOV	R22,R18
    00829 2F40      MOV	R20,R16
    0082A 80AE      LDD	R10,Y+6
(0144) }
(0145) /*
(0146)   附带x,y。调用 lcd_wdat（）方法。传入时转换为char
(0147) */
(0148) void lcd_write_char(unsigned char x,unsigned char y,unsigned char data) 
(0149) {
(0150) 	
(0151)     if (y == 0) 
    0082B 2366      TST	R22
    0082C F431      BNE	0x0833
(0152)     {
(0153)     	lcd_wcmd_1(0x80 + x);
    0082D 2F04      MOV	R16,R20
    0082E 5800      SUBI	R16,0x80
    0082F DEFE      RCALL	_lcd_wcmd_1
(0154) 		 lcd_wdat_1( data);
    00830 2D0A      MOV	R16,R10
    00831 DF22      RCALL	_lcd_wdat_1
(0155)     }
    00832 C017      RJMP	0x084A
(0156)     else  if(y==1)
    00833 3061      CPI	R22,1
    00834 F431      BNE	0x083B
(0157)     {
(0158)     	lcd_wcmd_1(0x90 + x);
    00835 2F04      MOV	R16,R20
    00836 5700      SUBI	R16,0x70
    00837 DEF6      RCALL	_lcd_wcmd_1
(0159) 		 lcd_wdat_1( data);
    00838 2D0A      MOV	R16,R10
    00839 DF1A      RCALL	_lcd_wdat_1
(0160)     }else  if(y==2)
    0083A C00F      RJMP	0x084A
    0083B 3062      CPI	R22,2
    0083C F431      BNE	0x0843
(0161)     {
(0162)     	lcd_wcmd_2(0x80 + x);
    0083D 2F04      MOV	R16,R20
    0083E 5800      SUBI	R16,0x80
    0083F DF66      RCALL	_lcd_wcmd_2
(0163) 		 lcd_wdat_2( data);
    00840 2D0A      MOV	R16,R10
    00841 DF8A      RCALL	_lcd_wdat_2
(0164)     }else  if(y==3)
    00842 C007      RJMP	0x084A
    00843 3063      CPI	R22,3
    00844 F429      BNE	0x084A
(0165)     {
(0166)     	lcd_wcmd_2(0x90 + x);
    00845 2F04      MOV	R16,R20
    00846 5700      SUBI	R16,0x70
    00847 DF5E      RCALL	_lcd_wcmd_2
(0167) 		 lcd_wdat_2( data);
    00848 2D0A      MOV	R16,R10
    00849 DF82      RCALL	_lcd_wdat_2
(0168)     }
(0169)    return; 
    0084A 940C 1E2B JMP	pop_xgsetF00C
_lcd_write_str:
  s                    --> R20
  y                    --> R10
  x                    --> R22
    0084C 940E 1E24 CALL	push_xgsetF00C
    0084E 2EA2      MOV	R10,R18
    0084F 2F60      MOV	R22,R16
    00850 814E      LDD	R20,Y+6
    00851 815F      LDD	R21,Y+7
(0170) }
(0171) /*
(0172)   附带x,y。调用 lcd_wdat（）方法，会通过指针遍历字符串。不太好，还是自己循环遍历
(0173) */
(0174) void lcd_write_str(unsigned char x,unsigned char y,unsigned char *s) 
(0175) {
(0176) 	
(0177)     if (y == 0) 
    00852 20AA      TST	R10
    00853 F471      BNE	0x0862
(0178)     {
(0179)     	lcd_wcmd_1(0x80 + x);
    00854 2F06      MOV	R16,R22
    00855 5800      SUBI	R16,0x80
    00856 DED7      RCALL	_lcd_wcmd_1
    00857 C005      RJMP	0x085D
(0180) 		 while (*s) 
(0181)        {
(0182)     	lcd_wdat_1( *s);
    00858 01FA      MOVW	R30,R20
    00859 8100      LD	R16,Z
    0085A DEF9      RCALL	_lcd_wdat_1
(0183)     	s ++;
    0085B 5F4F      SUBI	R20,0xFF
    0085C 4F5F      SBCI	R21,0xFF
    0085D 01FA      MOVW	R30,R20
    0085E 8020      LD	R2,Z
    0085F 2022      TST	R2
    00860 F7B9      BNE	0x0858
(0184)         }
(0185)     }
    00861 C032      RJMP	0x0894
(0186)     else  if(y==1)
    00862 2D8A      MOV	R24,R10
    00863 3081      CPI	R24,1
    00864 F471      BNE	0x0873
(0187)     {
(0188)     	lcd_wcmd_1(0x90 + x);
    00865 2F06      MOV	R16,R22
    00866 5700      SUBI	R16,0x70
    00867 DEC6      RCALL	_lcd_wcmd_1
    00868 C005      RJMP	0x086E
(0189) 		 while (*s) 
(0190)         {
(0191)     	lcd_wdat_1( *s);
    00869 01FA      MOVW	R30,R20
    0086A 8100      LD	R16,Z
    0086B DEE8      RCALL	_lcd_wdat_1
(0192)     	s ++;
    0086C 5F4F      SUBI	R20,0xFF
    0086D 4F5F      SBCI	R21,0xFF
    0086E 01FA      MOVW	R30,R20
    0086F 8020      LD	R2,Z
    00870 2022      TST	R2
    00871 F7B9      BNE	0x0869
(0193)        }
(0194)     }else  if(y==2)
    00872 C021      RJMP	0x0894
    00873 2D8A      MOV	R24,R10
    00874 3082      CPI	R24,2
    00875 F471      BNE	0x0884
(0195)     {
(0196)     	lcd_wcmd_2(0x80 + x);
    00876 2F06      MOV	R16,R22
    00877 5800      SUBI	R16,0x80
    00878 DF2D      RCALL	_lcd_wcmd_2
    00879 C005      RJMP	0x087F
(0197) 		  while (*s) 
(0198)        {
(0199)     	lcd_wdat_2( *s);
    0087A 01FA      MOVW	R30,R20
    0087B 8100      LD	R16,Z
    0087C DF4F      RCALL	_lcd_wdat_2
(0200)     	s ++;
    0087D 5F4F      SUBI	R20,0xFF
    0087E 4F5F      SBCI	R21,0xFF
    0087F 01FA      MOVW	R30,R20
    00880 8020      LD	R2,Z
    00881 2022      TST	R2
    00882 F7B9      BNE	0x087A
(0201)        }
(0202)     }else  if(y==3)
    00883 C010      RJMP	0x0894
    00884 2D8A      MOV	R24,R10
    00885 3083      CPI	R24,3
    00886 F469      BNE	0x0894
(0203)     {
(0204)     	lcd_wcmd_2(0x90 + x);
    00887 2F06      MOV	R16,R22
    00888 5700      SUBI	R16,0x70
    00889 DF1C      RCALL	_lcd_wcmd_2
    0088A C005      RJMP	0x0890
(0205) 		  while (*s) 
(0206)        {
(0207)     	lcd_wdat_2( *s);
    0088B 01FA      MOVW	R30,R20
    0088C 8100      LD	R16,Z
    0088D DF3E      RCALL	_lcd_wdat_2
(0208)     	s ++;
    0088E 5F4F      SUBI	R20,0xFF
    0088F 4F5F      SBCI	R21,0xFF
    00890 01FA      MOVW	R30,R20
    00891 8020      LD	R2,Z
    00892 2022      TST	R2
    00893 F7B9      BNE	0x088B
(0209)        }
(0210)     }
    00894 940C 1E2B JMP	pop_xgsetF00C
_lcd_write_str_con:
  s                    --> R20
  y                    --> R22
    00896 940E 1E1A CALL	push_xgsetF000
    00898 01A9      MOVW	R20,R18
    00899 2F60      MOV	R22,R16
(0211)    
(0212) }
(0213) /*
(0214)   附带x,y。调用 lcd_wdat（）方法，会通过指针遍历字符串。不太好，还是自己循环遍历
(0215) */
(0216) void lcd_write_str_con(unsigned char y,unsigned char *s) 
(0217) {
(0218) 	
(0219)     if (y == 0 || y==1) 
    0089A 2366      TST	R22
    0089B F011      BEQ	0x089E
    0089C 3061      CPI	R22,1
    0089D F459      BNE	0x08A9
(0220)     {
    0089E C005      RJMP	0x08A4
(0221)     	
(0222) 		 while (*s) 
(0223)        {
(0224)     	lcd_wdat_1( *s);
    0089F 01FA      MOVW	R30,R20
    008A0 8100      LD	R16,Z
    008A1 DEB2      RCALL	_lcd_wdat_1
(0225)     	s ++;
    008A2 5F4F      SUBI	R20,0xFF
    008A3 4F5F      SBCI	R21,0xFF
    008A4 01FA      MOVW	R30,R20
    008A5 8020      LD	R2,Z
    008A6 2022      TST	R2
    008A7 F7B9      BNE	0x089F
(0226)         }
(0227)     }
    008A8 C00E      RJMP	0x08B7
(0228)     else  if(y==2 || y==3)
    008A9 3062      CPI	R22,2
    008AA F011      BEQ	0x08AD
    008AB 3063      CPI	R22,3
    008AC F451      BNE	0x08B7
(0229)     {
    008AD C005      RJMP	0x08B3
(0230)     	
(0231) 		  while (*s) 
(0232)        {
(0233)     	lcd_wdat_2( *s);
    008AE 01FA      MOVW	R30,R20
    008AF 8100      LD	R16,Z
    008B0 DF1B      RCALL	_lcd_wdat_2
(0234)     	s ++;
    008B1 5F4F      SUBI	R20,0xFF
    008B2 4F5F      SBCI	R21,0xFF
    008B3 01FA      MOVW	R30,R20
    008B4 8020      LD	R2,Z
    008B5 2022      TST	R2
    008B6 F7B9      BNE	0x08AE
(0235)        }
(0236)     }
    008B7 940C 1E1F JMP	pop_xgsetF000
_read_ac_1:
  result               --> R20
    008B9 934A      ST	-Y,R20
    008BA 935A      ST	-Y,R21
(0237)    
(0238) }
(0239) //****************************
(0240) //  读出数据,.不知道有没有用，先放在这
(0241) //****************************
(0242) /**
(0243)  读程序。命令后，读AC地址
(0244) */
(0245) uchar read_ac_1(void){
(0246) 	uint result;
(0247) 	DDRA=0x00;
    008BB 2422      CLR	R2
    008BC BA2A      OUT	0x1A,R2
(0248) 	rs_l;
    008BD 9180 0065 LDS	R24,0x65
    008BF 7F8D      ANDI	R24,0xFD
    008C0 9380 0065 STS	0x65,R24
(0249) 	rw_h;
    008C2 9180 0065 LDS	R24,0x65
    008C4 6081      ORI	R24,1
    008C5 9380 0065 STS	0x65,R24
(0250) 	ep1_h;
    008C7 9180 0065 LDS	R24,0x65
    008C9 6088      ORI	R24,0x8
    008CA 9380 0065 STS	0x65,R24
(0251) 	delay_ms(1);
    008CC E001      LDI	R16,1
    008CD E010      LDI	R17,0
    008CE 940E 044D CALL	_delay_ms
(0252) 	result=PINA&(~(1<<PINA7));
    008D0 B349      IN	R20,0x19
    008D1 2755      CLR	R21
    008D2 774F      ANDI	R20,0x7F
(0253) 	DDRA=0xFF;
    008D3 EF8F      LDI	R24,0xFF
    008D4 BB8A      OUT	0x1A,R24
(0254) 	ep1_l;
    008D5 9180 0065 LDS	R24,0x65
    008D7 7F87      ANDI	R24,0xF7
    008D8 9380 0065 STS	0x65,R24
(0255) 	return result;
    008DA 2F04      MOV	R16,R20
    008DB 9159      LD	R21,Y+
    008DC 9149      LD	R20,Y+
    008DD 9508      RET
_read_ac_2:
  result               --> R20
    008DE 934A      ST	-Y,R20
    008DF 935A      ST	-Y,R21
(0256) }
(0257) uchar read_ac_2(void){
(0258) 	uint result;
(0259) 	DDRA=0x00;
    008E0 2422      CLR	R2
    008E1 BA2A      OUT	0x1A,R2
(0260) 	rs_l;
    008E2 9180 0065 LDS	R24,0x65
    008E4 7F8D      ANDI	R24,0xFD
    008E5 9380 0065 STS	0x65,R24
(0261) 	rw_h;
    008E7 9180 0065 LDS	R24,0x65
    008E9 6081      ORI	R24,1
    008EA 9380 0065 STS	0x65,R24
(0262) 	ep2_h;
    008EC 9180 0062 LDS	R24,0x62
    008EE 6081      ORI	R24,1
    008EF 9380 0062 STS	0x62,R24
(0263) 	delay_ms(1);
    008F1 E001      LDI	R16,1
    008F2 E010      LDI	R17,0
    008F3 940E 044D CALL	_delay_ms
(0264) 	result=PINA&(~(1<<PINA7));
    008F5 B349      IN	R20,0x19
    008F6 2755      CLR	R21
    008F7 774F      ANDI	R20,0x7F
(0265) 	DDRA=0xFF;
    008F8 EF8F      LDI	R24,0xFF
    008F9 BB8A      OUT	0x1A,R24
(0266) 	ep2_l;
    008FA 9180 0062 LDS	R24,0x62
    008FC 7F8E      ANDI	R24,0xFE
    008FD 9380 0062 STS	0x62,R24
(0267) 	return result;
    008FF 2F04      MOV	R16,R20
    00900 9159      LD	R21,Y+
    00901 9149      LD	R20,Y+
    00902 9508      RET
(0268) }
(0269) 
(0270) void lcd_clear(void){
(0271)    lcd_clear_1();
_lcd_clear:
    00903 DE76      RCALL	_lcd_clear_1
(0272)     lcd_clear_2();
    00904 CEED      RJMP	_lcd_clear_2
_date_cmd_1:
  result               --> R10
    00905 92AA      ST	-Y,R10
    00906 92BA      ST	-Y,R11
(0273) }
(0274) /*
(0275)  读数据程序。命令后，读入。使用read_data函数会是设定的值，再吃调用本函数会使ac
(0276)  移动一次，8读取位的数据
(0277) */
(0278) uchar date_cmd_1(void){
(0279) 	uint result;
(0280) 	DDRA=0x00;
    00907 2422      CLR	R2
    00908 BA2A      OUT	0x1A,R2
(0281) 	rs_h;
    00909 9180 0065 LDS	R24,0x65
    0090B 6082      ORI	R24,2
    0090C 9380 0065 STS	0x65,R24
(0282) 	rw_h;
    0090E 9180 0065 LDS	R24,0x65
    00910 6081      ORI	R24,1
    00911 9380 0065 STS	0x65,R24
(0283) 	ep1_h;
    00913 9180 0065 LDS	R24,0x65
    00915 6088      ORI	R24,0x8
    00916 9380 0065 STS	0x65,R24
(0284) 	delay_ms(1);
    00918 E001      LDI	R16,1
    00919 E010      LDI	R17,0
    0091A 940E 044D CALL	_delay_ms
(0285) 	result=PINA;
    0091C B2A9      IN	R10,0x19
    0091D 24BB      CLR	R11
(0286) 	DDRA=0xFF;
    0091E EF8F      LDI	R24,0xFF
    0091F BB8A      OUT	0x1A,R24
(0287) 	ep1_l;
    00920 9180 0065 LDS	R24,0x65
    00922 7F87      ANDI	R24,0xF7
    00923 9380 0065 STS	0x65,R24
(0288) 	return result;
    00925 2D0A      MOV	R16,R10
    00926 90B9      LD	R11,Y+
    00927 90A9      LD	R10,Y+
    00928 9508      RET
_date_cmd_2:
  result               --> R10
    00929 92AA      ST	-Y,R10
    0092A 92BA      ST	-Y,R11
(0289) }
(0290) uchar date_cmd_2(void){
(0291) 	uint result;
(0292) 	DDRA=0x00;
    0092B 2422      CLR	R2
    0092C BA2A      OUT	0x1A,R2
(0293) 	rs_h;
    0092D 9180 0065 LDS	R24,0x65
    0092F 6082      ORI	R24,2
    00930 9380 0065 STS	0x65,R24
(0294) 	rw_h;
    00932 9180 0065 LDS	R24,0x65
    00934 6081      ORI	R24,1
    00935 9380 0065 STS	0x65,R24
(0295) 	ep2_h;
    00937 9180 0062 LDS	R24,0x62
    00939 6081      ORI	R24,1
    0093A 9380 0062 STS	0x62,R24
(0296) 	delay_ms(1);
    0093C E001      LDI	R16,1
    0093D E010      LDI	R17,0
    0093E 940E 044D CALL	_delay_ms
(0297) 	result=PINA;
    00940 B2A9      IN	R10,0x19
    00941 24BB      CLR	R11
(0298) 	DDRA=0xFF;
    00942 EF8F      LDI	R24,0xFF
    00943 BB8A      OUT	0x1A,R24
(0299) 	ep2_l;
    00944 9180 0062 LDS	R24,0x62
    00946 7F8E      ANDI	R24,0xFE
    00947 9380 0062 STS	0x62,R24
(0300) 	return result;
    00949 2D0A      MOV	R16,R10
    0094A 90B9      LD	R11,Y+
    0094B 90A9      LD	R10,Y+
    0094C 9508      RET
_read_data_xy:
  y                    --> R22
  x                    --> R20
    0094D 940E 1E24 CALL	push_xgsetF00C
    0094F 2F62      MOV	R22,R18
    00950 2F40      MOV	R20,R16
(0301) }
(0302) //**************************
(0303) //读取函数，注意会ac位置
(0304) //**************************
(0305) uchar read_data_xy(unsigned char x,unsigned char y){
(0306) 	if (y == 0) {
    00951 2366      TST	R22
    00952 F449      BNE	0x095C
(0307)     	lcd_wcmd_1(0x80 + x);
    00953 2F04      MOV	R16,R20
    00954 5800      SUBI	R16,0x80
    00955 DDD8      RCALL	_lcd_wcmd_1
(0308) 		delay_us(10);
    00956 E00A      LDI	R16,0xA
    00957 E010      LDI	R17,0
    00958 940E 0443 CALL	_delay_us
(0309) 		return date_cmd_1();
    0095A DFAA      RCALL	_date_cmd_1
    0095B C024      RJMP	0x0980
(0310) 		
(0311)     }else  if(y==1){
    0095C 3061      CPI	R22,1
    0095D F449      BNE	0x0967
(0312)     	lcd_wcmd_1(0x90 + x);
    0095E 2F04      MOV	R16,R20
    0095F 5700      SUBI	R16,0x70
    00960 DDCD      RCALL	_lcd_wcmd_1
(0313) 		delay_us(10);
    00961 E00A      LDI	R16,0xA
    00962 E010      LDI	R17,0
    00963 940E 0443 CALL	_delay_us
(0314) 		return date_cmd_1();
    00965 DF9F      RCALL	_date_cmd_1
    00966 C019      RJMP	0x0980
(0315)     }else  if(y==2){
    00967 3062      CPI	R22,2
    00968 F451      BNE	0x0973
(0316)     	lcd_wcmd_2(0x80 + x);
    00969 2F04      MOV	R16,R20
    0096A 5800      SUBI	R16,0x80
    0096B DE3A      RCALL	_lcd_wcmd_2
(0317) 		delay_us(10);
    0096C E00A      LDI	R16,0xA
    0096D E010      LDI	R17,0
    0096E 940E 0443 CALL	_delay_us
(0318) 		return date_cmd_2();
    00970 DFB8      RCALL	_date_cmd_2
    00971 2EA0      MOV	R10,R16
    00972 C00D      RJMP	0x0980
(0319)     }else  if(y==3){
    00973 3063      CPI	R22,3
    00974 F451      BNE	0x097F
(0320)     	lcd_wcmd_2(0x90 + x);
    00975 2F04      MOV	R16,R20
    00976 5700      SUBI	R16,0x70
    00977 DE2E      RCALL	_lcd_wcmd_2
(0321) 		delay_us(10);
    00978 E00A      LDI	R16,0xA
    00979 E010      LDI	R17,0
    0097A 940E 0443 CALL	_delay_us
(0322) 		return date_cmd_2();
    0097C DFAC      RCALL	_date_cmd_2
    0097D 2EA0      MOV	R10,R16
    0097E C001      RJMP	0x0980
(0323)     }
(0324) 	
(0325) 	return 0x00;
    0097F 2700      CLR	R16
    00980 940C 1E2B JMP	pop_xgsetF00C
_read_data_1:
  addr                 --> R10
    00982 92AA      ST	-Y,R10
    00983 2EA0      MOV	R10,R16
(0326) }
(0327) uchar read_data_1(unsigned char addr){
(0328) 	
(0329)     	lcd_wcmd_1(addr);
    00984 2D0A      MOV	R16,R10
    00985 DDA8      RCALL	_lcd_wcmd_1
(0330)     	return date_cmd_1();
    00986 DF7E      RCALL	_date_cmd_1
    00987 90A9      LD	R10,Y+
    00988 9508      RET
_read_data_2:
  addr                 --> R10
    00989 92AA      ST	-Y,R10
    0098A 2EA0      MOV	R10,R16
(0331) }
(0332) uchar read_data_2(unsigned char addr){
(0333)     	lcd_wcmd_1(addr);
    0098B 2D0A      MOV	R16,R10
    0098C DDA1      RCALL	_lcd_wcmd_1
(0334) 		return date_cmd_2();
    0098D DF9B      RCALL	_date_cmd_2
    0098E 90A9      LD	R10,Y+
    0098F 9508      RET
(0335) }
(0336) 
(0337) 
(0338) /*初始化功能*/
(0339) void lcd_init(void){
(0340) 	 //初始化端口功能
(0341) 	 DDRA |=0xFF;
_lcd_init:
    00990 B38A      IN	R24,0x1A
    00991 6F8F      ORI	R24,0xFF
    00992 BB8A      OUT	0x1A,R24
(0342) 	 PORTA=0xFF;
    00993 EF8F      LDI	R24,0xFF
    00994 BB8B      OUT	0x1B,R24
(0343) 	 DDRG |=0x0F;
    00995 9180 0064 LDS	R24,0x64
    00997 608F      ORI	R24,0xF
    00998 9380 0064 STS	0x64,R24
(0344) 	 PORTG|=0x0F;
    0099A 9180 0065 LDS	R24,0x65
    0099C 608F      ORI	R24,0xF
    0099D 9380 0065 STS	0x65,R24
(0345) 	 DDRF|=0x01;
    0099F 9180 0061 LDS	R24,0x61
    009A1 6081      ORI	R24,1
    009A2 9380 0061 STS	0x61,R24
(0346) 	 PORTF|=0x01;
    009A4 9180 0062 LDS	R24,0x62
    009A6 6081      ORI	R24,1
    009A7 9380 0062 STS	0x62,R24
(0347) 	 //lcd_wcmd(0x38);//初始化功能,8位，基本指令
(0348) 	 lcd_wcmd_1(0x30);//初始化功能,8位，基本指令
    009A9 E300      LDI	R16,0x30
    009AA DD83      RCALL	_lcd_wcmd_1
(0349) 	  lcd_wcmd_1(0x08);//关显示
    009AB E008      LDI	R16,0x8
    009AC DD81      RCALL	_lcd_wcmd_1
(0350) 	  lcd_wcmd_1(0x01);//清显示
    009AD E001      LDI	R16,1
    009AE DD7F      RCALL	_lcd_wcmd_1
(0351) 	  lcd_wcmd_1(0x06);//输入模式，右移
    009AF E006      LDI	R16,6
    009B0 DD7D      RCALL	_lcd_wcmd_1
(0352) 	  lcd_wcmd_1(0x0c);//初始化光标,开显示
    009B1 E00C      LDI	R16,0xC
    009B2 DD7B      RCALL	_lcd_wcmd_1
(0353) 	
(0354) 	  lcd_wcmd_2(0x30);//初始化功能,8位，基本指令
    009B3 E300      LDI	R16,0x30
    009B4 DDF1      RCALL	_lcd_wcmd_2
(0355) 	 lcd_wcmd_2(0x08);//关显示
    009B5 E008      LDI	R16,0x8
    009B6 DDEF      RCALL	_lcd_wcmd_2
(0356) 	 lcd_wcmd_2(0x01);//清显示
    009B7 E001      LDI	R16,1
    009B8 DDED      RCALL	_lcd_wcmd_2
(0357) 	 lcd_wcmd_2(0x06);//输入模式，右移
    009B9 E006      LDI	R16,6
    009BA DDEB      RCALL	_lcd_wcmd_2
(0358) 	 lcd_wcmd_2(0x0c);//初始化光标,开显示
    009BB E00C      LDI	R16,0xC
    009BC CDE9      RJMP	_lcd_wcmd_2
_cur_set:
  type                 --> R20
    009BD 934A      ST	-Y,R20
    009BE 935A      ST	-Y,R21
    009BF 01A8      MOVW	R20,R16
(0359) }
(0360) //************
(0361) // 光标显示操作,默认初始化都是关闭。上半屏 0:关闭,1：开游标,2：游标反白,3：开游标、反白
(0362) // 下半屏  4:关闭,5：开游标,6：游标反白,7：开游标、反白
(0363) //************
(0364) void cur_set(uint type){
(0365) 	 if(type==0){
    009C0 3040      CPI	R20,0
    009C1 0745      CPC	R20,R21
    009C2 F419      BNE	0x09C6
(0366) 	 	lcd_wcmd_1(0x0c);	 
    009C3 E00C      LDI	R16,0xC
    009C4 DD69      RCALL	_lcd_wcmd_1
(0367) 	 }else if(type==1){
    009C5 C030      RJMP	0x09F6
    009C6 3041      CPI	R20,1
    009C7 E0E0      LDI	R30,0
    009C8 075E      CPC	R21,R30
    009C9 F419      BNE	0x09CD
(0368) 	     lcd_wcmd_1(0x0e);
    009CA E00E      LDI	R16,0xE
    009CB DD62      RCALL	_lcd_wcmd_1
(0369) 	 }else if(type==2){
    009CC C029      RJMP	0x09F6
    009CD 3042      CPI	R20,2
    009CE E0E0      LDI	R30,0
    009CF 075E      CPC	R21,R30
    009D0 F419      BNE	0x09D4
(0370) 	    lcd_wcmd_1(0x0d);
    009D1 E00D      LDI	R16,0xD
    009D2 DD5B      RCALL	_lcd_wcmd_1
(0371) 	 }else if(type==3){
    009D3 C022      RJMP	0x09F6
    009D4 3043      CPI	R20,3
    009D5 E0E0      LDI	R30,0
    009D6 075E      CPC	R21,R30
    009D7 F419      BNE	0x09DB
(0372) 	    lcd_wcmd_1(0x0f);
    009D8 E00F      LDI	R16,0xF
    009D9 DD54      RCALL	_lcd_wcmd_1
(0373) 	 }else if(type==4){
    009DA C01B      RJMP	0x09F6
    009DB 3044      CPI	R20,4
    009DC E0E0      LDI	R30,0
    009DD 075E      CPC	R21,R30
    009DE F419      BNE	0x09E2
(0374) 	    lcd_wcmd_2(0x0c);
    009DF E00C      LDI	R16,0xC
    009E0 DDC5      RCALL	_lcd_wcmd_2
(0375) 	 }else if(type==5){
    009E1 C014      RJMP	0x09F6
    009E2 3045      CPI	R20,5
    009E3 E0E0      LDI	R30,0
    009E4 075E      CPC	R21,R30
    009E5 F419      BNE	0x09E9
(0376) 	    lcd_wcmd_2(0x0e);
    009E6 E00E      LDI	R16,0xE
    009E7 DDBE      RCALL	_lcd_wcmd_2
(0377) 	 }else if(type==6){
    009E8 C00D      RJMP	0x09F6
    009E9 3046      CPI	R20,6
    009EA E0E0      LDI	R30,0
    009EB 075E      CPC	R21,R30
    009EC F419      BNE	0x09F0
(0378) 	    lcd_wcmd_2(0x0d);
    009ED E00D      LDI	R16,0xD
    009EE DDB7      RCALL	_lcd_wcmd_2
(0379) 	 }else if(type==7){
    009EF C006      RJMP	0x09F6
    009F0 3047      CPI	R20,7
    009F1 E0E0      LDI	R30,0
    009F2 075E      CPC	R21,R30
    009F3 F411      BNE	0x09F6
(0380) 	    lcd_wcmd_2(0x0f);
    009F4 E00F      LDI	R16,0xF
    009F5 DDB0      RCALL	_lcd_wcmd_2
(0381) 	 }
    009F6 9159      LD	R21,Y+
    009F7 9149      LD	R20,Y+
    009F8 9508      RET
(0382) }
(0383) //***************************************************
(0384) //   反白相关
(0385) //***************************************************
(0386) /********************************************************************  
(0387)     函 数 名：Set_Draw(  
(0388)     入口参数：无  
(0389)     出口参数：无  
(0390)     修改日期：  
(0391)     函数作用：  
(0392)     说    明：  
(0393)     ********************************************************************/   
(0394)     void Set_Draw(void)   
(0395)     {   
(0396)         //W_1byte(0,0,0x01);            //清屏    
(0397)         //W_1byte(0,0,0x34);            //8BIT控制界面，扩充指令集,，绘图显示OFF   
(0398)         lcd_wcmd_1(0x36); 
_Set_Draw:
    009F9 E306      LDI	R16,0x36
    009FA DD33      RCALL	_lcd_wcmd_1
(0399) 		lcd_wcmd_2(0x36);   
    009FB E306      LDI	R16,0x36
    009FC CDA9      RJMP	_lcd_wcmd_2
(0400)     }
(0401) 	void Set_UNDraw(void)   
(0402)     {   
(0403)         //W_1byte(0,0,0x01);            //清屏   
(0404)         //W_1byte(0,0,0x34);            //8BIT控制界面，扩充指令集,，绘图显示OFF   
(0405)         lcd_wcmd_1(0x30); 
_Set_UNDraw:
    009FD E300      LDI	R16,0x30
    009FE DD2F      RCALL	_lcd_wcmd_1
(0406) 		lcd_wcmd_2(0x30);   
    009FF E300      LDI	R16,0x30
    00A00 CDA5      RJMP	_lcd_wcmd_2
_Set_White_off:
  clr_y                --> R14
  clr_x                --> R10
  white_y              --> R20
  white_x              --> Y,+0
  i                    --> R10
  white_end_x          --> R12
  j                    --> R14
  end_x                --> R10
  y                    --> R22
  x                    --> Y,+11
    00A01 940E 1DB9 CALL	push_arg4
    00A03 940E 1E05 CALL	push_xgsetF0FC
    00A05 2F62      MOV	R22,R18
    00A06 9721      SBIW	R28,1
    00A07 84AF      LDD	R10,Y+15
(0407)     }
(0408) /**************************************************  
(0409)     uchar x,起始位置
(0410) 	uchar y,对应y
(0411) 	uchar end_x, 反白结束位置
(0412) 	uchar clear 0：反白，1：不反白
(0413)  **************************************************/   
(0414)     void Set_White_off(uchar x,uchar y,uchar end_x)   
(0415)     {   
(0416)         uchar i, j, white_x, white_y,white_end_x,clr_x,clr_y;       //   
(0417)         white_end_x = (end_x-x+1);   
    00A08 2D8A      MOV	R24,R10
    00A09 840B      LDD	R0,Y+11
    00A0A 1980      SUB	R24,R0
    00A0B 5F8F      SUBI	R24,0xFF
    00A0C 2EC8      MOV	R12,R24
(0418)         white_end_x <<= 1;   //16*16，一次写8个，所以乘2
    00A0D 0CCC      LSL	R12
(0419) 		Set_Draw(); //开画图
    00A0E DFEA      RCALL	_Set_Draw
(0420)         if(y==0)   
    00A0F 2366      TST	R22
    00A10 F449      BNE	0x0A1A
(0421)         {   
(0422)             white_x = (0x80+x-1);   
    00A11 858B      LDD	R24,Y+11
    00A12 5880      SUBI	R24,0x80
    00A13 5081      SUBI	R24,1
    00A14 8388      ST	Y,R24
(0423)             white_y = 0x80;   
    00A15 E840      LDI	R20,0x80
(0424)             clr_x = 0x80;   
    00A16 E880      LDI	R24,0x80
    00A17 2EA8      MOV	R10,R24
(0425)             clr_y = 0x80;   
    00A18 2EE8      MOV	R14,R24
(0426)         }   
    00A19 C022      RJMP	0x0A3C
(0427)         else if(y==1)   
    00A1A 3061      CPI	R22,1
    00A1B F451      BNE	0x0A26
(0428)         {   
(0429)             white_x = (0x80+x-1);   
    00A1C 858B      LDD	R24,Y+11
    00A1D 5880      SUBI	R24,0x80
    00A1E 5081      SUBI	R24,1
    00A1F 8388      ST	Y,R24
(0430)             white_y = 0x90;   
    00A20 E940      LDI	R20,0x90
(0431)             clr_x = 0x80;   
    00A21 E880      LDI	R24,0x80
    00A22 2EA8      MOV	R10,R24
(0432)             clr_y = 0x90;   
    00A23 E980      LDI	R24,0x90
    00A24 2EE8      MOV	R14,R24
(0433)         }   
    00A25 C016      RJMP	0x0A3C
(0434)         else if(y==2)   
    00A26 3062      CPI	R22,2
    00A27 F449      BNE	0x0A31
(0435)         {   
(0436)             white_x = (0x80+x-1);   
    00A28 858B      LDD	R24,Y+11
    00A29 5880      SUBI	R24,0x80
    00A2A 5081      SUBI	R24,1
    00A2B 8388      ST	Y,R24
(0437)             white_y = 0x80;   
    00A2C E840      LDI	R20,0x80
(0438)             clr_x = 0x80;   
    00A2D E880      LDI	R24,0x80
    00A2E 2EA8      MOV	R10,R24
(0439)             clr_y = 0x80;   
    00A2F 2EE8      MOV	R14,R24
(0440)         }   
    00A30 C00B      RJMP	0x0A3C
(0441)         else if(y==3)   
    00A31 3063      CPI	R22,3
    00A32 F449      BNE	0x0A3C
(0442)         {   
(0443)             white_x = (0x80+x-1);   
    00A33 858B      LDD	R24,Y+11
    00A34 5880      SUBI	R24,0x80
    00A35 5081      SUBI	R24,1
    00A36 8388      ST	Y,R24
(0444)             white_y = 0x90;   
    00A37 E940      LDI	R20,0x90
(0445)             clr_x = 0x80;   
    00A38 E880      LDI	R24,0x80
    00A39 2EA8      MOV	R10,R24
(0446)             clr_y = 0x90;   
    00A3A E980      LDI	R24,0x90
    00A3B 2EE8      MOV	R14,R24
(0447)         }   
(0448) 		if(y==0 || y==1){    
    00A3C 2366      TST	R22
    00A3D F011      BEQ	0x0A40
    00A3E 3061      CPI	R22,1
    00A3F F4A1      BNE	0x0A54
(0449)           for(i=0;i<16;i++ )               //16行，因为是16*16汉字   
    00A40 24AA      CLR	R10
    00A41 C00E      RJMP	0x0A50
(0450)           {   
(0451)              lcd_wcmd_1(white_y++);     //设置绘图区的Y地址坐标0   
    00A42 2E24      MOV	R2,R20
    00A43 5F4F      SUBI	R20,0xFF
    00A44 2D02      MOV	R16,R2
    00A45 DCE8      RCALL	_lcd_wcmd_1
(0452)              lcd_wcmd_1(white_x);       //设置绘图区的X地址坐标0   
    00A46 8108      LD	R16,Y
    00A47 DCE6      RCALL	_lcd_wcmd_1
(0453)              for(j=0;j<white_end_x;j++)   //   
    00A48 24EE      CLR	R14
    00A49 C003      RJMP	0x0A4D
(0454)              {     
(0455)                lcd_wdat_1(0x00); //取消这一行的8个点的反白，液晶地址自动加   
    00A4A 2700      CLR	R16
    00A4B DD08      RCALL	_lcd_wdat_1
    00A4C 94E3      INC	R14
    00A4D 14EC      CP	R14,R12
    00A4E F3D8      BCS	0x0A4A
    00A4F 94A3      INC	R10
    00A50 2D8A      MOV	R24,R10
    00A51 3180      CPI	R24,0x10
    00A52 F378      BCS	0x0A42
(0456)              }   
(0457)           }
(0458) 		}else if(y==2 || y==3){
    00A53 C017      RJMP	0x0A6B
    00A54 3062      CPI	R22,2
    00A55 F011      BEQ	0x0A58
    00A56 3063      CPI	R22,3
    00A57 F499      BNE	0x0A6B
(0459) 		    for(i=0;i<16;i++ )               //16行，因为是16*16汉字   
    00A58 24AA      CLR	R10
    00A59 C00E      RJMP	0x0A68
(0460)           {   
(0461)              lcd_wcmd_2(white_y++);     //设置绘图区的Y地址坐标0   
    00A5A 2E24      MOV	R2,R20
    00A5B 5F4F      SUBI	R20,0xFF
    00A5C 2D02      MOV	R16,R2
    00A5D DD48      RCALL	_lcd_wcmd_2
(0462)              lcd_wcmd_2(white_x);       //设置绘图区的X地址坐标0   
    00A5E 8108      LD	R16,Y
    00A5F DD46      RCALL	_lcd_wcmd_2
(0463)              for(j=0;j<white_end_x;j++)   //   
    00A60 24EE      CLR	R14
    00A61 C003      RJMP	0x0A65
(0464)              {     
(0465)                lcd_wdat_2(0x00); //取消这一行的8个点的反白，液晶地址自动加   
    00A62 2700      CLR	R16
    00A63 DD68      RCALL	_lcd_wdat_2
    00A64 94E3      INC	R14
    00A65 14EC      CP	R14,R12
    00A66 F3D8      BCS	0x0A62
    00A67 94A3      INC	R10
    00A68 2D8A      MOV	R24,R10
    00A69 3180      CPI	R24,0x10
    00A6A F378      BCS	0x0A5A
(0466)              }   
(0467)           }
(0468) 		}
(0469) 		  Set_UNDraw();//关画图  
    00A6B DF91      RCALL	_Set_UNDraw
    00A6C 9621      ADIW	R28,1
    00A6D 940E 1DFA CALL	pop_xgsetF0FC
    00A6F 9624      ADIW	R28,4
    00A70 9508      RET
_Set_White:
  clr_y                --> R14
  clr_x                --> R10
  white_y              --> R20
  white_x              --> Y,+0
  i                    --> R10
  white_end_x          --> R12
  j                    --> R14
  end_x                --> R10
  y                    --> R22
  x                    --> Y,+11
    00A71 940E 1DB9 CALL	push_arg4
    00A73 940E 1E05 CALL	push_xgsetF0FC
    00A75 2F62      MOV	R22,R18
    00A76 9721      SBIW	R28,1
    00A77 84AF      LDD	R10,Y+15
(0470)     } 
(0471) 	void Set_White(uchar x,uchar y,uchar end_x)   
(0472)     {   
(0473)         uchar i, j, white_x, white_y,white_end_x,clr_x,clr_y;       //   
(0474)         white_end_x = (end_x-x+1);   
    00A78 2D8A      MOV	R24,R10
    00A79 840B      LDD	R0,Y+11
    00A7A 1980      SUB	R24,R0
    00A7B 5F8F      SUBI	R24,0xFF
    00A7C 2EC8      MOV	R12,R24
(0475)         white_end_x <<= 1;   //16*16，一次写8个，所以乘2
    00A7D 0CCC      LSL	R12
(0476) 		Set_Draw(); //开画图
    00A7E DF7A      RCALL	_Set_Draw
(0477)         if(y==0)   
    00A7F 2366      TST	R22
    00A80 F449      BNE	0x0A8A
(0478)         {   
(0479)             white_x = (0x80+x-1);   
    00A81 858B      LDD	R24,Y+11
    00A82 5880      SUBI	R24,0x80
    00A83 5081      SUBI	R24,1
    00A84 8388      ST	Y,R24
(0480)             white_y = 0x80;   
    00A85 E840      LDI	R20,0x80
(0481)             clr_x = 0x80;   
    00A86 E880      LDI	R24,0x80
    00A87 2EA8      MOV	R10,R24
(0482)             clr_y = 0x80;   
    00A88 2EE8      MOV	R14,R24
(0483)         }   
    00A89 C022      RJMP	0x0AAC
(0484)         else if(y==1)   
    00A8A 3061      CPI	R22,1
    00A8B F451      BNE	0x0A96
(0485)         {   
(0486)             white_x = (0x80+x-1);   
    00A8C 858B      LDD	R24,Y+11
    00A8D 5880      SUBI	R24,0x80
    00A8E 5081      SUBI	R24,1
    00A8F 8388      ST	Y,R24
(0487)             white_y = 0x90;   
    00A90 E940      LDI	R20,0x90
(0488)             clr_x = 0x80;   
    00A91 E880      LDI	R24,0x80
    00A92 2EA8      MOV	R10,R24
(0489)             clr_y = 0x90;   
    00A93 E980      LDI	R24,0x90
    00A94 2EE8      MOV	R14,R24
(0490)         }   
    00A95 C016      RJMP	0x0AAC
(0491)         else if(y==2)   
    00A96 3062      CPI	R22,2
    00A97 F449      BNE	0x0AA1
(0492)         {   
(0493)             white_x = (0x80+x-1);   
    00A98 858B      LDD	R24,Y+11
    00A99 5880      SUBI	R24,0x80
    00A9A 5081      SUBI	R24,1
    00A9B 8388      ST	Y,R24
(0494)             white_y = 0x80;   
    00A9C E840      LDI	R20,0x80
(0495)             clr_x = 0x80;   
    00A9D E880      LDI	R24,0x80
    00A9E 2EA8      MOV	R10,R24
(0496)             clr_y = 0x80;   
    00A9F 2EE8      MOV	R14,R24
(0497)         }   
    00AA0 C00B      RJMP	0x0AAC
(0498)         else if(y==3)   
    00AA1 3063      CPI	R22,3
    00AA2 F449      BNE	0x0AAC
(0499)         {   
(0500)             white_x = (0x80+x-1);   
    00AA3 858B      LDD	R24,Y+11
    00AA4 5880      SUBI	R24,0x80
    00AA5 5081      SUBI	R24,1
    00AA6 8388      ST	Y,R24
(0501)             white_y = 0x90;   
    00AA7 E940      LDI	R20,0x90
(0502)             clr_x = 0x80;   
    00AA8 E880      LDI	R24,0x80
    00AA9 2EA8      MOV	R10,R24
(0503)             clr_y = 0x90;   
    00AAA E980      LDI	R24,0x90
    00AAB 2EE8      MOV	R14,R24
(0504)         } 
(0505) 		if(y==0 || y==1){          
    00AAC 2366      TST	R22
    00AAD F011      BEQ	0x0AB0
    00AAE 3061      CPI	R22,1
    00AAF F4A1      BNE	0x0AC4
(0506)           for(i=0;i<16;i++ )               //16行，因为是16*16汉字   
    00AB0 24AA      CLR	R10
    00AB1 C00E      RJMP	0x0AC0
(0507)           {   
(0508)               lcd_wcmd_1(white_y++);     //设置绘图区的Y地址坐标0   
    00AB2 2E24      MOV	R2,R20
    00AB3 5F4F      SUBI	R20,0xFF
    00AB4 2D02      MOV	R16,R2
    00AB5 DC78      RCALL	_lcd_wcmd_1
(0509)               lcd_wcmd_1(white_x);       //设置绘图区的X地址坐标0   
    00AB6 8108      LD	R16,Y
    00AB7 DC76      RCALL	_lcd_wcmd_1
(0510)               for(j=0;j<white_end_x;j++)   //   
    00AB8 24EE      CLR	R14
    00AB9 C003      RJMP	0x0ABD
(0511)               {    
(0512)                     lcd_wdat_1(0xff); //反白这一行的8个点，液晶地址自动加1     
    00ABA EF0F      LDI	R16,0xFF
    00ABB DC98      RCALL	_lcd_wdat_1
    00ABC 94E3      INC	R14
    00ABD 14EC      CP	R14,R12
    00ABE F3D8      BCS	0x0ABA
    00ABF 94A3      INC	R10
    00AC0 2D8A      MOV	R24,R10
    00AC1 3180      CPI	R24,0x10
    00AC2 F378      BCS	0x0AB2
(0513)               }   
(0514)           }
(0515) 		}else if(y==2 || y==3){
    00AC3 C017      RJMP	0x0ADB
    00AC4 3062      CPI	R22,2
    00AC5 F011      BEQ	0x0AC8
    00AC6 3063      CPI	R22,3
    00AC7 F499      BNE	0x0ADB
(0516) 		   for(i=0;i<16;i++ )               //16行，因为是16*16汉字   
    00AC8 24AA      CLR	R10
    00AC9 C00E      RJMP	0x0AD8
(0517)             {   
(0518)               lcd_wcmd_2(white_y++);     //设置绘图区的Y地址坐标0   
    00ACA 2E24      MOV	R2,R20
    00ACB 5F4F      SUBI	R20,0xFF
    00ACC 2D02      MOV	R16,R2
    00ACD DCD8      RCALL	_lcd_wcmd_2
(0519)               lcd_wcmd_2(white_x);       //设置绘图区的X地址坐标0   
    00ACE 8108      LD	R16,Y
    00ACF DCD6      RCALL	_lcd_wcmd_2
(0520)               for(j=0;j<white_end_x;j++)   //   
    00AD0 24EE      CLR	R14
    00AD1 C003      RJMP	0x0AD5
(0521)               {    
(0522)                     lcd_wdat_2(0xff); //反白这一行的8个点，液晶地址自动加1     
    00AD2 EF0F      LDI	R16,0xFF
    00AD3 DCF8      RCALL	_lcd_wdat_2
    00AD4 94E3      INC	R14
    00AD5 14EC      CP	R14,R12
    00AD6 F3D8      BCS	0x0AD2
    00AD7 94A3      INC	R10
    00AD8 2D8A      MOV	R24,R10
    00AD9 3180      CPI	R24,0x10
    00ADA F378      BCS	0x0ACA
(0523)               }   
(0524)             }
(0525) 		}
(0526) 		  Set_UNDraw();//关画图  
    00ADB DF21      RCALL	_Set_UNDraw
    00ADC 9621      ADIW	R28,1
    00ADD 940E 1DFA CALL	pop_xgsetF0FC
    00ADF 9624      ADIW	R28,4
    00AE0 9508      RET
_Draw_Pic:
  temp_y               --> R20
  temp_x               --> R22
  i                    --> R10
  j                    --> R14
  Draw                 --> Y,+12
  y                    --> Y,+10
  x                    --> R12
    00AE1 933A      ST	-Y,R19
    00AE2 932A      ST	-Y,R18
    00AE3 940E 1E05 CALL	push_xgsetF0FC
    00AE5 2EC0      MOV	R12,R16
(0527)     } 
(0528) 	/********************************************************************  
(0529)     函 数 名：Draw_Pic  128*64  
(0530)     入口参数：x,y,*Draw  
(0531)     出口参数：无  
(0532)     建立日期：2007年8月26日  
(0533)     修改日期：  
(0534)     函数作用：  
(0535)     说    明：  
(0536)     ********************************************************************/   
(0537)     /*************************************************/   
(0538)        
(0539)     void Draw_Pic(uchar x, uchar y, const uchar *Draw)   
(0540)     {   
(0541)         uchar i, j, temp_x, temp_y;     //   
(0542) 		lcd_wcmd_1(0x34);
    00AE6 E304      LDI	R16,0x34
    00AE7 DC46      RCALL	_lcd_wcmd_1
(0543) 		lcd_wcmd_2(0x34);
    00AE8 E304      LDI	R16,0x34
    00AE9 DCBC      RCALL	_lcd_wcmd_2
(0544)         temp_x = x;                     //   
    00AEA 2D6C      MOV	R22,R12
(0545)         temp_y = y;                     //   
    00AEB 854A      LDD	R20,Y+10
(0546)         temp_x |= 0x80;                 //   
    00AEC 6860      ORI	R22,0x80
(0547)         temp_y |= 0x80;                 //   
    00AED 6840      ORI	R20,0x80
(0548)         for(i=0;i<32;i++ )               //上半屏32行   
    00AEE 24AA      CLR	R10
    00AEF C013      RJMP	0x0B03
(0549)         {   
(0550)             lcd_wcmd_1(temp_y++);      //设置绘图区的Y地址坐标0   
    00AF0 2E24      MOV	R2,R20
    00AF1 5F4F      SUBI	R20,0xFF
    00AF2 2D02      MOV	R16,R2
    00AF3 DC3A      RCALL	_lcd_wcmd_1
(0551)             lcd_wcmd_1(temp_x);        //设置绘图区的X地址坐标0   
    00AF4 2F06      MOV	R16,R22
    00AF5 DC38      RCALL	_lcd_wcmd_1
(0552)             for(j=0;j<24;j++)            //   
    00AF6 24EE      CLR	R14
    00AF7 C007      RJMP	0x0AFF
(0553)             {   
(0554)                  lcd_wdat_1(*Draw++);  //   
    00AF8 85EC      LDD	R30,Y+12
    00AF9 85FD      LDD	R31,Y+13
    00AFA 9101      LD	R16,Z+
    00AFB 87FD      STD	Y+13,R31
    00AFC 87EC      STD	Y+12,R30
    00AFD DC56      RCALL	_lcd_wdat_1
    00AFE 94E3      INC	R14
    00AFF 2D8E      MOV	R24,R14
    00B00 3188      CPI	R24,0x18
    00B01 F3B0      BCS	0x0AF8
    00B02 94A3      INC	R10
    00B03 2D8A      MOV	R24,R10
    00B04 3280      CPI	R24,0x20
    00B05 F350      BCS	0x0AF0
(0555)             }   
(0556)         }   
(0557)            
(0558)         temp_x = x;                     //   
    00B06 2D6C      MOV	R22,R12
(0559)         temp_y = y;                     //   
    00B07 854A      LDD	R20,Y+10
(0560)         temp_x |= 0x80;                 //   
    00B08 6860      ORI	R22,0x80
(0561)         temp_y |= 0x80;                   //   
    00B09 6840      ORI	R20,0x80
(0562)         j = 0;                          //   
    00B0A 24EE      CLR	R14
(0563)         for(;i<64;i++ )   
    00B0B C013      RJMP	0x0B1F
(0564)         {   
(0565)             lcd_wcmd_2(temp_y++);      //设置绘图区的Y地址坐标   
    00B0C 2E24      MOV	R2,R20
    00B0D 5F4F      SUBI	R20,0xFF
    00B0E 2D02      MOV	R16,R2
    00B0F DC96      RCALL	_lcd_wcmd_2
(0566)             lcd_wcmd_2(temp_x);        //设置绘图区的X地址坐标   
    00B10 2F06      MOV	R16,R22
    00B11 DC94      RCALL	_lcd_wcmd_2
(0567)             for(j=0;j<24;j++)   
    00B12 24EE      CLR	R14
    00B13 C007      RJMP	0x0B1B
(0568)             {   
(0569)                  lcd_wdat_2(*Draw++);  //   
    00B14 85EC      LDD	R30,Y+12
    00B15 85FD      LDD	R31,Y+13
    00B16 9101      LD	R16,Z+
    00B17 87FD      STD	Y+13,R31
    00B18 87EC      STD	Y+12,R30
    00B19 DCB2      RCALL	_lcd_wdat_2
    00B1A 94E3      INC	R14
    00B1B 2D8E      MOV	R24,R14
    00B1C 3188      CPI	R24,0x18
    00B1D F3B0      BCS	0x0B14
    00B1E 94A3      INC	R10
    00B1F 2D8A      MOV	R24,R10
    00B20 3480      CPI	R24,0x40
    00B21 F350      BCS	0x0B0C
(0570)             }   
(0571)         }   
(0572)        lcd_wcmd_1(0x36);
    00B22 E306      LDI	R16,0x36
    00B23 DC0A      RCALL	_lcd_wcmd_1
(0573) 	   lcd_wcmd_2(0x36);
    00B24 E306      LDI	R16,0x36
    00B25 DC80      RCALL	_lcd_wcmd_2
(0574) 	   delay_us(1);
    00B26 E001      LDI	R16,1
    00B27 E010      LDI	R17,0
    00B28 940E 0443 CALL	_delay_us
(0575) 	   lcd_wcmd_1(0x30);
    00B2A E300      LDI	R16,0x30
    00B2B DC02      RCALL	_lcd_wcmd_1
(0576) 	   lcd_wcmd_2(0x30);
    00B2C E300      LDI	R16,0x30
    00B2D DC78      RCALL	_lcd_wcmd_2
    00B2E 940E 1DFA CALL	pop_xgsetF0FC
    00B30 9622      ADIW	R28,2
    00B31 9508      RET
_lcd_Desk:
    00B32 9722      SBIW	R28,2
(0577) 	        
(0578)     }  
(0579)     /*************************************************/  
(0580) //***********************************************************************
(0581) //      液晶显示界面初始化
(0582) //***********************************************************************
(0583) void lcd_Desk(void)
(0584) { 
(0585)   //uint i=0;   
(0586)  // lcd_clear();
(0587)   //lcd_write_str(0,0,"ADC0:");
(0588)   lcd_write_str(0,3,"反白测试第一次");
    00B33 E084      LDI	R24,4
    00B34 E091      LDI	R25,1
    00B35 8399      STD	Y+1,R25
    00B36 8388      ST	Y,R24
    00B37 E023      LDI	R18,3
    00B38 2700      CLR	R16
    00B39 DD12      RCALL	_lcd_write_str
(0589)   lcd_write_str(0,0,"反白测试第一次");
    00B3A E084      LDI	R24,4
    00B3B E091      LDI	R25,1
    00B3C 8399      STD	Y+1,R25
    00B3D 8388      ST	Y,R24
    00B3E 2722      CLR	R18
    00B3F 2700      CLR	R16
    00B40 DD0B      RCALL	_lcd_write_str
(0590)   //delay_ms(100);
(0591)      
(0592)     Set_White(1,1,7); 
    00B41 E087      LDI	R24,7
    00B42 8388      ST	Y,R24
    00B43 E021      LDI	R18,1
    00B44 E001      LDI	R16,1
    00B45 DF2B      RCALL	_Set_White
(0593) 	   
(0594) 	 
(0595)     delay_ms(3000); 
    00B46 EB08      LDI	R16,0xB8
    00B47 E01B      LDI	R17,0xB
    00B48 940E 044D CALL	_delay_ms
(0596)      Set_White_off(1,1,7);
    00B4A E087      LDI	R24,7
    00B4B 8388      ST	Y,R24
    00B4C E021      LDI	R18,1
    00B4D E001      LDI	R16,1
    00B4E DEB2      RCALL	_Set_White_off
(0597) 	Set_White(2,1,2); 
    00B4F E082      LDI	R24,2
    00B50 8388      ST	Y,R24
    00B51 E021      LDI	R18,1
    00B52 E002      LDI	R16,2
    00B53 DF1D      RCALL	_Set_White
(0598) 	 delay_ms(300); 
    00B54 E20C      LDI	R16,0x2C
    00B55 E011      LDI	R17,1
    00B56 940E 044D CALL	_delay_ms
(0599) 	 Set_White_off(2,2,7);
    00B58 E087      LDI	R24,7
    00B59 8388      ST	Y,R24
    00B5A E022      LDI	R18,2
    00B5B E002      LDI	R16,2
    00B5C DEA4      RCALL	_Set_White_off
(0600) 	 Set_White(3,1,5);   
    00B5D E085      LDI	R24,5
    00B5E 8388      ST	Y,R24
    00B5F E021      LDI	R18,1
    00B60 E003      LDI	R16,3
    00B61 DF0F      RCALL	_Set_White
    00B62 9622      ADIW	R28,2
    00B63 9508      RET
_main:
  data                 --> Y,+3
  i                    --> Y,+3
    00B64 9722      SBIW	R28,2
FILE: E:\ICCDemo\Temp_Control\temp_control\main.c
(0001) 
(0002) #include<iom128v.h>
(0003) #include "main.h"
(0004) #include "lcd.h"
(0005) #include "time.h"
(0006) #include "key.h"
(0007) #include "delay.h"
(0008) #include "timertask.h"
(0009) #include "eeprom.h"
(0010) #include "pages.h"
(0011) const unsigned char nihao[1536]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2F,0x0F,0x00,0x00,0x00,
(0012) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0013) 0x00,0x00,0x00,0x1E,0x31,0xC8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0014) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x00,0x3C,0x00,0x00,
(0015) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0016) 0x00,0x00,0x07,0x80,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0017) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x00,0x03,0x00,0x00,
(0018) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0019) 0x00,0x00,0x18,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0020) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x80,0x00,
(0021) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0022) 0x00,0x00,0x20,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0023) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFC,0x01,0xFC,0x20,0x00,
(0024) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0025) 0x00,0x00,0x42,0x03,0x06,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0026) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x00,0x8C,0x00,0x90,0x00,
(0027) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0028) 0x00,0x00,0x89,0x84,0x41,0xFC,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0029) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x02,0x33,0x06,0x28,0x00,
(0030) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0031) 0x00,0x01,0x26,0x85,0x04,0x03,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0032) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x66,0x01,0x8C,0x01,0x9C,0x00,
(0033) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0034) 0x00,0x03,0xC8,0x00,0x8A,0x00,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0035) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x4D,0x00,0x4C,0x00,0x10,0x00,
(0036) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0037) 0x00,0x02,0xCD,0x00,0x89,0x00,0x96,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0038) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x4F,0x00,0x8A,0x00,0x92,0x00,
(0039) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0040) 0x00,0x02,0x60,0x00,0x08,0x00,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0041) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x24,0x00,0x84,0x01,0x24,0x00,
(0042) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0043) 0x00,0x00,0x12,0x01,0x32,0x02,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0044) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x19,0x86,0x51,0x8C,0x44,0x00,
(0045) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0046) 0x00,0x01,0x0C,0x70,0x88,0x70,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0047) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x06,0x03,0x04,0x00,
(0048) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0049) 0x00,0x01,0x00,0x30,0x00,0x78,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0050) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x04,0x00,
(0051) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0052) 0x00,0x01,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0053) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x04,0x00,
(0054) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0055) 0x00,0x01,0x00,0x00,0x00,0x20,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0056) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xA0,0x04,0x00,
(0057) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0058) 0x00,0x00,0x00,0x00,0x89,0xA0,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0059) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0xF1,0xC0,0x04,0x00,
(0060) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0061) 0x00,0x03,0x00,0x00,0x7F,0x80,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0062) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x10,0x00,
(0063) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0064) 0x00,0x00,0x20,0x00,0x00,0x00,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0065) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x18,0x00,0x00,0x01,0x86,0x00,
(0066) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0067) 0x00,0x04,0x87,0x7F,0xFF,0xC3,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0068) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x61,0x00,0x00,0x02,0x10,0x80,
(0069) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0070) 0x00,0x10,0x3C,0x00,0x00,0x02,0x60,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0071) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x0E,0x00,0x00,0x03,0xC0,0x20,
(0072) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0073) 0x00,0x02,0x02,0x00,0x00,0x01,0x82,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0074) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x04,0x31,0x80,0x03,0x00,
(0075) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0076) 0x00,0x26,0x00,0x00,0x78,0x80,0x81,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0077) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0xFC,0x80,0x80,0x20,
(0078) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0079) 0x00,0x19,0x00,0x01,0xCC,0x80,0x82,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0080) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x05,0xB4,0x80,0x83,0x00,
(0081) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0082) 0x00,0x02,0x00,0x04,0xCC,0x80,0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0083) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x88,0x06,0x79,0x00,0xC6,0x00,
(0084) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0085) 0x00,0x03,0xF8,0x02,0x02,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0086) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x8C,0x00,0x40,0x00,
(0087) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0088) 0x00,0x02,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0089) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x40,0x00,
(0090) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0091) 0x00,0x01,0x30,0x00,0x00,0x00,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0092) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x14,0x00,
(0093) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0094) 0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0095) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x10,0x00,
(0096) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0097) 0x00,0x00,0x30,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0098) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0xC0,0x00,
(0099) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0100) 0x00,0x00,0x00,0xEF,0xFF,0xDE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0101) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x30,0x10,0x00,0x00,
(0102) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0103) 0x00,0x00,0x00,0x30,0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0104) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x38,0x18,0x00,0x00,
(0105) 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
(0106) 0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
(0107) 
(0108) 
(0109) };
(0110) 
(0111) //下面两个要删掉，现在为编译暂时不删
(0112)  unsigned int temp_h=0;
(0113)  unsigned int temp_l=0;
(0114)  //uart需要参数
(0115)  unsigned char send_buf[600];
(0116)  unsigned char receive_buf[600];
(0117)  unsigned int send_len;
(0118)  unsigned int receive_len;
(0119)  //界面需要参数
(0120)  unsigned int pageNum;//当前页面，如需跳转改变这个值就行
(0121)  unsigned int pageParam[5];//传递参数。界面间参数暂存
(0122)  unsigned int prePageNum; //上一界面。应该在跳转前设置这个参数。但是用到这个参数的就Page3、4、8.所以可以直接在该界面用到在设置。不用理会规则
(0123)  //**************
(0124) struct temp temps[4]={{0},{0},{0},{0}};
(0125) 
(0126) 
(0127) //*************************************************************************
(0128) //			主程序
(0129) //*************************************************************************
(0130) void main(void)
(0131) { 
(0132) uint i;
(0133)   uchar data;
(0134) temps[0].flag=0;
    00B65 2422      CLR	R2
    00B66 2433      CLR	R3
    00B67 9230 0718 STS	temps+1,R3
    00B69 9220 0717 STS	temps,R2
(0135)  temps[1].flag=1;
    00B6B E081      LDI	R24,1
    00B6C E090      LDI	R25,0
    00B6D 9390 071A STS	temps+3,R25
    00B6F 9380 0719 STS	temps+2,R24
(0136)  temps[2].flag=2;
    00B71 E082      LDI	R24,2
    00B72 9390 071C STS	temps+5,R25
    00B74 9380 071B STS	temps+4,R24
(0137)  temps[3].flag=5; 
    00B76 E085      LDI	R24,5
    00B77 9390 071E STS	temps+7,R25
    00B79 9380 071D STS	temps+6,R24
(0138)   DDRE=0xFF;
    00B7B EF8F      LDI	R24,0xFF
    00B7C B982      OUT	0x02,R24
(0139)   SREG|=0x80;//开中断
    00B7D 9478      BSET	7
(0140)   lcd_init();
    00B7E 940E 0990 CALL	_lcd_init
(0141)   lcd_clear();
    00B80 940E 0903 CALL	_lcd_clear
(0142)   //Initial_time(); 
(0143)    //画欢迎界面
(0144)    Draw_Pic( 0, 0, nihao);
    00B82 E183      LDI	R24,0x13
    00B83 E091      LDI	R25,1
    00B84 8399      STD	Y+1,R25
    00B85 8388      ST	Y,R24
    00B86 2722      CLR	R18
    00B87 2700      CLR	R16
    00B88 940E 0AE1 CALL	_Draw_Pic
(0145)    delay_ms(1000);
    00B8A EE08      LDI	R16,0xE8
    00B8B E013      LDI	R17,3
    00B8C 940E 044D CALL	_delay_ms
(0146) 
(0147)  
(0148)   pageNum=2;
    00B8E E082      LDI	R24,2
    00B8F E090      LDI	R25,0
    00B90 9390 0D75 STS	pageNum+1,R25
    00B92 9380 0D74 STS	pageNum,R24
(0149)      Set_White_off(1,0,12);
    00B94 E08C      LDI	R24,0xC
    00B95 8388      ST	Y,R24
    00B96 2722      CLR	R18
    00B97 E001      LDI	R16,1
    00B98 940E 0A01 CALL	_Set_White_off
(0150) 	 Set_White_off(1,1,12);
    00B9A E08C      LDI	R24,0xC
    00B9B 8388      ST	Y,R24
    00B9C E021      LDI	R18,1
    00B9D E001      LDI	R16,1
    00B9E 940E 0A01 CALL	_Set_White_off
(0151) 	 Set_White_off(1,2,12);
    00BA0 E08C      LDI	R24,0xC
    00BA1 8388      ST	Y,R24
    00BA2 E022      LDI	R18,2
    00BA3 E001      LDI	R16,1
    00BA4 940E 0A01 CALL	_Set_White_off
(0152) 	 Set_White_off(1,3,12);
    00BA6 E08C      LDI	R24,0xC
    00BA7 8388      ST	Y,R24
    00BA8 E023      LDI	R18,3
    00BA9 E001      LDI	R16,1
    00BAA 940E 0A01 CALL	_Set_White_off
    00BAC C002      RJMP	0x0BAF
(0153) 	 while(1){
(0154)      dispatchPages();
    00BAD 940E 1D5A CALL	_dispatchPages
    00BAF CFFD      RJMP	0x0BAD
    00BB0 9622      ADIW	R28,2
    00BB1 9508      RET
FILE: E:\ICCDemo\Temp_Control\temp_control\timertask.c
(0001) #include<iom128v.h>
(0002) #include "timertask.h"
(0003) #include "time.h"
(0004) #include "lcd.h"
(0005) #include "delay.h"
(0006) unsigned char time_h_1, time_l_1,time_h_3, time_l_3,time_0, time_2,i;
(0007) //************************************************
(0008) //16位定时器，定时器1
(0009) //*************************************************
(0010) /*
(0011)   计数器1，16位的。普通计时，1024分频。在16M下约0.061ms计数一次。共4s钟,
(0012)   自行计算时间传入。传入高低八位
(0013) */
(0014) void Timerinit_1(uchar time_h,uchar time_l){
(0015)     time_h_1=time_h;
_Timerinit_1:
  time_l               --> R18
  time_h               --> R16
    00BB2 9300 0D7C STS	time_h_1,R16
(0016) 	time_l_1=time_l;
    00BB4 9320 0D7B STS	time_l_1,R18
(0017) 	 TCCR1B=0x00;
    00BB6 2422      CLR	R2
    00BB7 BC2E      OUT	0x2E,R2
(0018) 	//写入初值
(0019)     TCNT1H=time_h;
    00BB8 BD0D      OUT	0x2D,R16
(0020)     TCNT1L=time_l;
    00BB9 BD2C      OUT	0x2C,R18
(0021) 	//普通计数，1024分频
(0022)     TCCR1A=0x00;
    00BBA BC2F      OUT	0x2F,R2
(0023)     TCCR1B=0x05;
    00BBB E085      LDI	R24,5
    00BBC BD8E      OUT	0x2E,R24
(0024) 	 TIMSK|=0x04;//开定时器1溢出中断,16位的
    00BBD B787      IN	R24,0x37
    00BBE 6084      ORI	R24,4
    00BBF BF87      OUT	0x37,R24
    00BC0 9508      RET
(0025) }
(0026) //************************************************
(0027) //16位定时器，定时器3
(0028) //*************************************************
(0029) /*
(0030)   计数器1，16位的。普通计时，1024分频。在16M下约0.061ms计数一次。共4s钟,
(0031)   自行计算时间传入。传入高低八位
(0032) */
(0033) void Timerinit_3(uchar time_h,uchar time_l){
(0034)  	time_h_3=time_h;
_Timerinit_3:
  time_l               --> R18
  time_h               --> R16
    00BC1 9300 0D7A STS	time_h_3,R16
(0035) 	time_l_3=time_l;
    00BC3 9320 0D79 STS	time_l_3,R18
(0036) 	//写入初值
(0037) 	 TCCR3B=0x00;
    00BC5 2422      CLR	R2
    00BC6 9220 008A STS	0x8A,R2
(0038)     TCNT3H=time_h;
    00BC8 9300 0089 STS	0x89,R16
(0039)     TCNT3L=time_l;
    00BCA 9320 0088 STS	0x88,R18
(0040) 	//普通计数，1024分频
(0041)     TCCR3A=0x00;
    00BCC 9220 008B STS	0x8B,R2
(0042)     TCCR3B=0x05;
    00BCE E085      LDI	R24,5
    00BCF 9380 008A STS	0x8A,R24
(0043) 	ETIMSK |=0x04;//开外部中断1
    00BD1 9180 007D LDS	R24,0x7D
    00BD3 6084      ORI	R24,4
    00BD4 9380 007D STS	0x7D,R24
    00BD6 9508      RET
(0044) }
(0045) //************************************************
(0046) //8位定时器，定时器0
(0047) //*************************************************
(0048) 
(0049) /*
(0050)   计数器0，8位的。普通计时，1024分频。
(0051)   自行计算时间传入。
(0052) */
(0053) void Timerinit_0(uchar time){
(0054)     time_0=time;
_Timerinit_0:
  time                 --> R16
    00BD7 9300 0D78 STS	time_0,R16
(0055) 	//写入初值
(0056)     TCNT0=time;
    00BD9 BF02      OUT	0x32,R16
(0057) 	TIMSK|=0x01;//开定时器0溢出中断,8位的
    00BDA B787      IN	R24,0x37
    00BDB 6081      ORI	R24,1
    00BDC BF87      OUT	0x37,R24
(0058) 	 TCCR0=0x07;//普通计数，1024分频
    00BDD E087      LDI	R24,7
    00BDE BF83      OUT	0x33,R24
    00BDF 9508      RET
(0059) }
(0060) //************************************************
(0061) //8位定时器，定时器2
(0062) //*************************************************
(0063) /*
(0064)   计数器0，8位的。普通计时，1024分频。
(0065)   自行计算时间传入。
(0066) */
(0067) void Timerinit_2(uchar time){
(0068)     time_2=time;
_Timerinit_2:
  time                 --> R16
    00BE0 9300 0D77 STS	time_2,R16
(0069) 	//写入初值
(0070)     TCNT2=time;
    00BE2 BD04      OUT	0x24,R16
(0071) 	TIMSK|=0x40;//开定时器0溢出中断,8位的
    00BE3 B787      IN	R24,0x37
    00BE4 6480      ORI	R24,0x40
    00BE5 BF87      OUT	0x37,R24
(0072) 	//普通计数，1024分频
(0073)     TCCR2=0x05;
    00BE6 E085      LDI	R24,5
    00BE7 BD85      OUT	0x25,R24
    00BE8 9508      RET
_int_timer0:
    00BE9 920A      ST	-Y,R0
    00BEA 921A      ST	-Y,R1
    00BEB 922A      ST	-Y,R2
    00BEC 923A      ST	-Y,R3
    00BED 924A      ST	-Y,R4
    00BEE 925A      ST	-Y,R5
    00BEF 926A      ST	-Y,R6
    00BF0 927A      ST	-Y,R7
    00BF1 928A      ST	-Y,R8
    00BF2 929A      ST	-Y,R9
    00BF3 930A      ST	-Y,R16
    00BF4 931A      ST	-Y,R17
    00BF5 932A      ST	-Y,R18
    00BF6 933A      ST	-Y,R19
    00BF7 938A      ST	-Y,R24
    00BF8 939A      ST	-Y,R25
    00BF9 93AA      ST	-Y,R26
    00BFA 93BA      ST	-Y,R27
    00BFB 93EA      ST	-Y,R30
    00BFC 93FA      ST	-Y,R31
    00BFD B60F      IN	R0,0x3F
    00BFE 920A      ST	-Y,R0
    00BFF 9721      SBIW	R28,1
(0074) }
(0075) #pragma interrupt_handler int_timer0:17
(0076) void int_timer0(void){ 
(0077) 		TCCR0=0x00;
    00C00 2422      CLR	R2
    00C01 BE23      OUT	0x33,R2
(0078) 		//adc_init_once();
(0079) 		for(i=0;i<5;i++){
    00C02 9220 0D76 STS	i,R2
    00C04 C011      RJMP	0x0C16
(0080)   		 lcd_write_char(0x01,3,0x30+i);	
    00C05 9180 0D76 LDS	R24,i
    00C07 5D80      SUBI	R24,0xD0
    00C08 8388      ST	Y,R24
    00C09 E023      LDI	R18,3
    00C0A E001      LDI	R16,1
    00C0B 940E 0826 CALL	_lcd_write_char
(0081) 		 delay_ms(100);		
    00C0D E604      LDI	R16,0x64
    00C0E E010      LDI	R17,0
    00C0F 940E 044D CALL	_delay_ms
    00C11 9180 0D76 LDS	R24,i
    00C13 5F8F      SUBI	R24,0xFF
    00C14 9380 0D76 STS	i,R24
    00C16 9180 0D76 LDS	R24,i
    00C18 3085      CPI	R24,5
    00C19 F358      BCS	0x0C05
(0082)         }
(0083) 		TCNT0=time_0;
    00C1A 9020 0D78 LDS	R2,time_0
    00C1C BE22      OUT	0x32,R2
(0084) 		TCCR0=0x07;
    00C1D E087      LDI	R24,7
    00C1E BF83      OUT	0x33,R24
(0085) 		return;
    00C1F 9621      ADIW	R28,1
    00C20 9009      LD	R0,Y+
    00C21 BE0F      OUT	0x3F,R0
    00C22 91F9      LD	R31,Y+
    00C23 91E9      LD	R30,Y+
    00C24 91B9      LD	R27,Y+
    00C25 91A9      LD	R26,Y+
    00C26 9199      LD	R25,Y+
    00C27 9189      LD	R24,Y+
    00C28 9139      LD	R19,Y+
    00C29 9129      LD	R18,Y+
    00C2A 9119      LD	R17,Y+
    00C2B 9109      LD	R16,Y+
    00C2C 9099      LD	R9,Y+
    00C2D 9089      LD	R8,Y+
    00C2E 9079      LD	R7,Y+
    00C2F 9069      LD	R6,Y+
    00C30 9059      LD	R5,Y+
    00C31 9049      LD	R4,Y+
    00C32 9039      LD	R3,Y+
    00C33 9029      LD	R2,Y+
    00C34 9019      LD	R1,Y+
    00C35 9009      LD	R0,Y+
    00C36 9518      RETI
_int_timer1:
    00C37 920A      ST	-Y,R0
    00C38 921A      ST	-Y,R1
    00C39 922A      ST	-Y,R2
    00C3A 923A      ST	-Y,R3
    00C3B 924A      ST	-Y,R4
    00C3C 925A      ST	-Y,R5
    00C3D 926A      ST	-Y,R6
    00C3E 927A      ST	-Y,R7
    00C3F 928A      ST	-Y,R8
    00C40 929A      ST	-Y,R9
    00C41 930A      ST	-Y,R16
    00C42 931A      ST	-Y,R17
    00C43 932A      ST	-Y,R18
    00C44 933A      ST	-Y,R19
    00C45 938A      ST	-Y,R24
    00C46 939A      ST	-Y,R25
    00C47 93AA      ST	-Y,R26
    00C48 93BA      ST	-Y,R27
    00C49 93EA      ST	-Y,R30
    00C4A 93FA      ST	-Y,R31
    00C4B B60F      IN	R0,0x3F
    00C4C 920A      ST	-Y,R0
    00C4D 9721      SBIW	R28,1
(0086) }
(0087) //溢出中断。
(0088) #pragma interrupt_handler int_timer1:15
(0089) void int_timer1(void){
(0090) 		 TCCR1B=0x00;
    00C4E 2422      CLR	R2
    00C4F BC2E      OUT	0x2E,R2
(0091) 		//adc_init_once();
(0092) 		for(i=0;i<5;i++){
    00C50 9220 0D76 STS	i,R2
    00C52 C011      RJMP	0x0C64
(0093)   		 lcd_write_char(0x03,3,0x30+i);	
    00C53 9180 0D76 LDS	R24,i
    00C55 5D80      SUBI	R24,0xD0
    00C56 8388      ST	Y,R24
    00C57 E023      LDI	R18,3
    00C58 E003      LDI	R16,3
    00C59 940E 0826 CALL	_lcd_write_char
(0094) 		 delay_ms(100);		
    00C5B E604      LDI	R16,0x64
    00C5C E010      LDI	R17,0
    00C5D 940E 044D CALL	_delay_ms
    00C5F 9180 0D76 LDS	R24,i
    00C61 5F8F      SUBI	R24,0xFF
    00C62 9380 0D76 STS	i,R24
    00C64 9180 0D76 LDS	R24,i
    00C66 3085      CPI	R24,5
    00C67 F358      BCS	0x0C53
(0095)         }
(0096) 		TCNT1H=time_h_1;
    00C68 9020 0D7C LDS	R2,time_h_1
    00C6A BC2D      OUT	0x2D,R2
(0097)          TCNT1L=time_l_1;
    00C6B 9020 0D7B LDS	R2,time_l_1
    00C6D BC2C      OUT	0x2C,R2
(0098) 		 TCCR1B=0x05;
    00C6E E085      LDI	R24,5
    00C6F BD8E      OUT	0x2E,R24
(0099) 		return;
    00C70 9621      ADIW	R28,1
    00C71 9009      LD	R0,Y+
    00C72 BE0F      OUT	0x3F,R0
    00C73 91F9      LD	R31,Y+
    00C74 91E9      LD	R30,Y+
    00C75 91B9      LD	R27,Y+
    00C76 91A9      LD	R26,Y+
    00C77 9199      LD	R25,Y+
    00C78 9189      LD	R24,Y+
    00C79 9139      LD	R19,Y+
    00C7A 9129      LD	R18,Y+
    00C7B 9119      LD	R17,Y+
    00C7C 9109      LD	R16,Y+
    00C7D 9099      LD	R9,Y+
    00C7E 9089      LD	R8,Y+
    00C7F 9079      LD	R7,Y+
    00C80 9069      LD	R6,Y+
    00C81 9059      LD	R5,Y+
    00C82 9049      LD	R4,Y+
    00C83 9039      LD	R3,Y+
    00C84 9029      LD	R2,Y+
    00C85 9019      LD	R1,Y+
    00C86 9009      LD	R0,Y+
    00C87 9518      RETI
_int_timer2:
    00C88 920A      ST	-Y,R0
    00C89 921A      ST	-Y,R1
    00C8A 922A      ST	-Y,R2
    00C8B 923A      ST	-Y,R3
    00C8C 924A      ST	-Y,R4
    00C8D 925A      ST	-Y,R5
    00C8E 926A      ST	-Y,R6
    00C8F 927A      ST	-Y,R7
    00C90 928A      ST	-Y,R8
    00C91 929A      ST	-Y,R9
    00C92 930A      ST	-Y,R16
    00C93 931A      ST	-Y,R17
    00C94 932A      ST	-Y,R18
    00C95 933A      ST	-Y,R19
    00C96 938A      ST	-Y,R24
    00C97 939A      ST	-Y,R25
    00C98 93AA      ST	-Y,R26
    00C99 93BA      ST	-Y,R27
    00C9A 93EA      ST	-Y,R30
    00C9B 93FA      ST	-Y,R31
    00C9C B60F      IN	R0,0x3F
    00C9D 920A      ST	-Y,R0
    00C9E 9721      SBIW	R28,1
(0100) }
(0101) #pragma interrupt_handler int_timer2:11
(0102) void int_timer2(void){
(0103)       PORTE=~PORTE;
    00C9F B023      IN	R2,0x03
    00CA0 9420      COM	R2
    00CA1 B823      OUT	0x03,R2
(0104) 		TCCR2=0x00;
    00CA2 2422      CLR	R2
    00CA3 BC25      OUT	0x25,R2
(0105) 		for(i=0;i<5;i++){
    00CA4 9220 0D76 STS	i,R2
    00CA6 C011      RJMP	0x0CB8
(0106)   		 lcd_write_char(0x00,3,0x30+i);	
    00CA7 9180 0D76 LDS	R24,i
    00CA9 5D80      SUBI	R24,0xD0
    00CAA 8388      ST	Y,R24
    00CAB E023      LDI	R18,3
    00CAC 2700      CLR	R16
    00CAD 940E 0826 CALL	_lcd_write_char
(0107) 		 delay_ms(100);		
    00CAF E604      LDI	R16,0x64
    00CB0 E010      LDI	R17,0
    00CB1 940E 044D CALL	_delay_ms
    00CB3 9180 0D76 LDS	R24,i
    00CB5 5F8F      SUBI	R24,0xFF
    00CB6 9380 0D76 STS	i,R24
    00CB8 9180 0D76 LDS	R24,i
    00CBA 3085      CPI	R24,5
    00CBB F358      BCS	0x0CA7
(0108)         }
(0109) 		TCNT2=time_2;
    00CBC 9020 0D77 LDS	R2,time_2
    00CBE BC24      OUT	0x24,R2
(0110) 		TCCR2=0x05;
    00CBF E085      LDI	R24,5
    00CC0 BD85      OUT	0x25,R24
(0111) 		return;
    00CC1 9621      ADIW	R28,1
    00CC2 9009      LD	R0,Y+
    00CC3 BE0F      OUT	0x3F,R0
    00CC4 91F9      LD	R31,Y+
    00CC5 91E9      LD	R30,Y+
    00CC6 91B9      LD	R27,Y+
    00CC7 91A9      LD	R26,Y+
    00CC8 9199      LD	R25,Y+
    00CC9 9189      LD	R24,Y+
    00CCA 9139      LD	R19,Y+
    00CCB 9129      LD	R18,Y+
    00CCC 9119      LD	R17,Y+
    00CCD 9109      LD	R16,Y+
    00CCE 9099      LD	R9,Y+
    00CCF 9089      LD	R8,Y+
    00CD0 9079      LD	R7,Y+
    00CD1 9069      LD	R6,Y+
    00CD2 9059      LD	R5,Y+
    00CD3 9049      LD	R4,Y+
    00CD4 9039      LD	R3,Y+
    00CD5 9029      LD	R2,Y+
    00CD6 9019      LD	R1,Y+
    00CD7 9009      LD	R0,Y+
    00CD8 9518      RETI
_int_timer3:
    00CD9 920A      ST	-Y,R0
    00CDA 921A      ST	-Y,R1
    00CDB 922A      ST	-Y,R2
    00CDC 923A      ST	-Y,R3
    00CDD 924A      ST	-Y,R4
    00CDE 925A      ST	-Y,R5
    00CDF 926A      ST	-Y,R6
    00CE0 927A      ST	-Y,R7
    00CE1 928A      ST	-Y,R8
    00CE2 929A      ST	-Y,R9
    00CE3 930A      ST	-Y,R16
    00CE4 931A      ST	-Y,R17
    00CE5 932A      ST	-Y,R18
    00CE6 933A      ST	-Y,R19
    00CE7 938A      ST	-Y,R24
    00CE8 939A      ST	-Y,R25
    00CE9 93AA      ST	-Y,R26
    00CEA 93BA      ST	-Y,R27
    00CEB 93EA      ST	-Y,R30
    00CEC 93FA      ST	-Y,R31
    00CED B60F      IN	R0,0x3F
    00CEE 920A      ST	-Y,R0
    00CEF 9721      SBIW	R28,1
(0112) }
(0113) //16位定时器，定时器3溢出中断。
(0114) #pragma interrupt_handler int_timer3:30
(0115) void int_timer3(void){
(0116)     TCCR1B=0x00;
    00CF0 2422      CLR	R2
    00CF1 BC2E      OUT	0x2E,R2
(0117)      for(i=0;i<5;i++){
    00CF2 9220 0D76 STS	i,R2
    00CF4 C011      RJMP	0x0D06
(0118)   		 lcd_write_char(0x02,3,0x30+i);	
    00CF5 9180 0D76 LDS	R24,i
    00CF7 5D80      SUBI	R24,0xD0
    00CF8 8388      ST	Y,R24
    00CF9 E023      LDI	R18,3
    00CFA E002      LDI	R16,2
    00CFB 940E 0826 CALL	_lcd_write_char
(0119) 		 delay_ms(100);		
    00CFD E604      LDI	R16,0x64
    00CFE E010      LDI	R17,0
    00CFF 940E 044D CALL	_delay_ms
    00D01 9180 0D76 LDS	R24,i
    00D03 5F8F      SUBI	R24,0xFF
    00D04 9380 0D76 STS	i,R24
    00D06 9180 0D76 LDS	R24,i
    00D08 3085      CPI	R24,5
    00D09 F358      BCS	0x0CF5
(0120)         }
(0121) 	TCNT3H=time_h_3;
    00D0A 9020 0D7A LDS	R2,time_h_3
    00D0C 9220 0089 STS	0x89,R2
(0122)     TCNT3L=time_l_3;
    00D0E 9020 0D79 LDS	R2,time_l_3
    00D10 9220 0088 STS	0x88,R2
(0123) 	 TCCR1B=0x05;
    00D12 E085      LDI	R24,5
    00D13 BD8E      OUT	0x2E,R24
    00D14 9621      ADIW	R28,1
    00D15 9009      LD	R0,Y+
    00D16 BE0F      OUT	0x3F,R0
    00D17 91F9      LD	R31,Y+
    00D18 91E9      LD	R30,Y+
    00D19 91B9      LD	R27,Y+
    00D1A 91A9      LD	R26,Y+
    00D1B 9199      LD	R25,Y+
    00D1C 9189      LD	R24,Y+
    00D1D 9139      LD	R19,Y+
    00D1E 9129      LD	R18,Y+
    00D1F 9119      LD	R17,Y+
    00D20 9109      LD	R16,Y+
    00D21 9099      LD	R9,Y+
    00D22 9089      LD	R8,Y+
    00D23 9079      LD	R7,Y+
    00D24 9069      LD	R6,Y+
    00D25 9059      LD	R5,Y+
    00D26 9049      LD	R4,Y+
    00D27 9039      LD	R3,Y+
    00D28 9029      LD	R2,Y+
    00D29 9019      LD	R1,Y+
    00D2A 9009      LD	R0,Y+
    00D2B 9518      RETI
_readTemp_1:
  i                    --> R20
    00D2C 934A      ST	-Y,R20
    00D2D 935A      ST	-Y,R21
FILE: E:\ICCDemo\Temp_Control\temp_control\max6675.c
(0001) #include<iom128v.h>
(0002) #include "max6675.h"
(0003) #include "main.h"
(0004) #include "delay.h"
(0005) #define sck_h_1 PORTE|=(1<<PE3) 
(0006) #define sck_l_1 PORTE&=~(1<<PE3) 
(0007) #define cs_h_1 PORTE|=1<<PE4 
(0008) #define cs_l_1 PORTE&=~(1<<PE4) 
(0009) 
(0010) #define sck_h_2 PORTE|=(1<<PE6) 
(0011) #define sck_l_2 PORTE&=~(1<<PE6) 
(0012) #define cs_h_2 PORTE|=1<<PE7 
(0013) #define cs_l_2 PORTE&=~(1<<PE7) 
(0014) 
(0015) #define sck_h_3 PORTF|=(1<<PF0) 
(0016) #define sck_l_3 PORTF&=~(1<<PF0) 
(0017) #define cs_h_3 PORTF|=1<<PF2 
(0018) #define cs_l_3 PORTF&=~(1<<PF2) 
(0019) 
(0020) #define sck_h_4 PORTF|=(1<<PF4) 
(0021) #define sck_l_4 PORTF&=~(1<<PF4) 
(0022) #define cs_h_4 PORTF|=1<<PF5 
(0023) #define cs_l_4 PORTF&=~(1<<PF5) 
(0024) /*
(0025) 仿真中没有读出数据，也没有实物
(0026) 
(0027) */
(0028) void readTemp_1(void){
(0029) 	   uint i;
(0030) 	   DDRE&=0xFB;
    00D2E B182      IN	R24,0x02
    00D2F 7F8B      ANDI	R24,0xFB
    00D30 B982      OUT	0x02,R24
(0031) 	   sck_l_1;
    00D31 981B      CBI	0x03,3
(0032) 	   cs_l_1;
    00D32 981C      CBI	0x03,4
(0033) 	   delay_us(1);
    00D33 E001      LDI	R16,1
    00D34 E010      LDI	R17,0
    00D35 940E 0443 CALL	_delay_us
(0034) 	   for(i=0;i<8;i++){
    00D37 2744      CLR	R20
    00D38 2755      CLR	R21
    00D39 C020      RJMP	0x0D5A
(0035) 			sck_h_1;
    00D3A 9A1B      SBI	0x03,3
(0036) 			delay_us(10);
    00D3B E00A      LDI	R16,0xA
    00D3C E010      LDI	R17,0
    00D3D 940E 0443 CALL	_delay_us
(0037) 	    	temp_h=temp_h|(PINE&0x04);
    00D3F B181      IN	R24,0x01
    00D40 2799      CLR	R25
    00D41 7084      ANDI	R24,4
    00D42 7090      ANDI	R25,0
    00D43 9020 0713 LDS	R2,temp_h
    00D45 9030 0714 LDS	R3,temp_h+1
    00D47 2A28      OR	R2,R24
    00D48 2A39      OR	R3,R25
    00D49 9230 0714 STS	temp_h+1,R3
    00D4B 9220 0713 STS	temp_h,R2
(0038) 			temp_h<<=1;
    00D4D 0C22      LSL	R2
    00D4E 1C33      ROL	R3
    00D4F 9230 0714 STS	temp_h+1,R3
    00D51 9220 0713 STS	temp_h,R2
(0039) 			sck_l_1;
    00D53 981B      CBI	0x03,3
(0040) 			delay_us(1);
    00D54 E001      LDI	R16,1
    00D55 E010      LDI	R17,0
    00D56 940E 0443 CALL	_delay_us
    00D58 5F4F      SUBI	R20,0xFF
    00D59 4F5F      SBCI	R21,0xFF
    00D5A 3048      CPI	R20,0x8
    00D5B E0E0      LDI	R30,0
    00D5C 075E      CPC	R21,R30
    00D5D F2E0      BCS	0x0D3A
(0041) 			
(0042) 	   }
(0043) 	   for(i=0;i<8;i++){
    00D5E 2744      CLR	R20
    00D5F 2755      CLR	R21
    00D60 C022      RJMP	0x0D83
(0044) 			sck_h_1;
    00D61 9A1B      SBI	0x03,3
(0045) 			delay_us(10);
    00D62 E00A      LDI	R16,0xA
    00D63 E010      LDI	R17,0
    00D64 940E 0443 CALL	_delay_us
(0046) 	    	temp_l=temp_l|(PINE&0x04);
    00D66 B181      IN	R24,0x01
    00D67 2799      CLR	R25
    00D68 7084      ANDI	R24,4
    00D69 7090      ANDI	R25,0
    00D6A 9020 0715 LDS	R2,temp_l
    00D6C 9030 0716 LDS	R3,temp_l+1
    00D6E 2A28      OR	R2,R24
    00D6F 2A39      OR	R3,R25
    00D70 9230 0716 STS	temp_l+1,R3
    00D72 9220 0715 STS	temp_l,R2
(0047) 			temp_l<<=temp_l;
    00D74 0191      MOVW	R18,R2
    00D75 0181      MOVW	R16,R2
    00D76 940E 1E52 CALL	lsl16
    00D78 9310 0716 STS	temp_l+1,R17
    00D7A 9300 0715 STS	temp_l,R16
(0048) 			sck_l_1;
    00D7C 981B      CBI	0x03,3
(0049) 			delay_us(1);
    00D7D E001      LDI	R16,1
    00D7E E010      LDI	R17,0
    00D7F 940E 0443 CALL	_delay_us
    00D81 5F4F      SUBI	R20,0xFF
    00D82 4F5F      SBCI	R21,0xFF
    00D83 3048      CPI	R20,0x8
    00D84 E0E0      LDI	R30,0
    00D85 075E      CPC	R21,R30
    00D86 F2D0      BCS	0x0D61
(0050) 	   }
(0051) 	   delay_us(1);
    00D87 E001      LDI	R16,1
    00D88 E010      LDI	R17,0
    00D89 940E 0443 CALL	_delay_us
(0052) 	  // temp_l=0x55;
(0053) 	   return ;
    00D8B 9159      LD	R21,Y+
    00D8C 9149      LD	R20,Y+
    00D8D 9508      RET
_readTemp_2:
  i                    --> R20
    00D8E 934A      ST	-Y,R20
    00D8F 935A      ST	-Y,R21
(0054) }
(0055) void readTemp_2(void){
(0056) 	   uint i;
(0057) 	   DDRE&=0xDF;
    00D90 B182      IN	R24,0x02
    00D91 7D8F      ANDI	R24,0xDF
    00D92 B982      OUT	0x02,R24
(0058) 	   sck_l_2;
    00D93 981E      CBI	0x03,6
(0059) 	   cs_l_2;
    00D94 981F      CBI	0x03,7
(0060) 	   delay_us(1);
    00D95 E001      LDI	R16,1
    00D96 E010      LDI	R17,0
    00D97 940E 0443 CALL	_delay_us
(0061) 	   for(i=0;i<8;i++){
    00D99 2744      CLR	R20
    00D9A 2755      CLR	R21
    00D9B C020      RJMP	0x0DBC
(0062) 			sck_h_2;
    00D9C 9A1E      SBI	0x03,6
(0063) 			delay_us(10);
    00D9D E00A      LDI	R16,0xA
    00D9E E010      LDI	R17,0
    00D9F 940E 0443 CALL	_delay_us
(0064) 	    	temp_h=temp_h|(PINE&0x20);
    00DA1 B181      IN	R24,0x01
    00DA2 2799      CLR	R25
    00DA3 7280      ANDI	R24,0x20
    00DA4 7090      ANDI	R25,0
    00DA5 9020 0713 LDS	R2,temp_h
    00DA7 9030 0714 LDS	R3,temp_h+1
    00DA9 2A28      OR	R2,R24
    00DAA 2A39      OR	R3,R25
    00DAB 9230 0714 STS	temp_h+1,R3
    00DAD 9220 0713 STS	temp_h,R2
(0065) 			temp_h<<=1;
    00DAF 0C22      LSL	R2
    00DB0 1C33      ROL	R3
    00DB1 9230 0714 STS	temp_h+1,R3
    00DB3 9220 0713 STS	temp_h,R2
(0066) 			sck_l_2;
    00DB5 981E      CBI	0x03,6
(0067) 			delay_us(1);
    00DB6 E001      LDI	R16,1
    00DB7 E010      LDI	R17,0
    00DB8 940E 0443 CALL	_delay_us
    00DBA 5F4F      SUBI	R20,0xFF
    00DBB 4F5F      SBCI	R21,0xFF
    00DBC 3048      CPI	R20,0x8
    00DBD E0E0      LDI	R30,0
    00DBE 075E      CPC	R21,R30
    00DBF F2E0      BCS	0x0D9C
(0068) 			
(0069) 	   }
(0070) 	   for(i=0;i<8;i++){
    00DC0 2744      CLR	R20
    00DC1 2755      CLR	R21
    00DC2 C022      RJMP	0x0DE5
(0071) 			sck_h_2;
    00DC3 9A1E      SBI	0x03,6
(0072) 			delay_us(10);
    00DC4 E00A      LDI	R16,0xA
    00DC5 E010      LDI	R17,0
    00DC6 940E 0443 CALL	_delay_us
(0073) 	    	temp_l=temp_l|(PINE&0x20);
    00DC8 B181      IN	R24,0x01
    00DC9 2799      CLR	R25
    00DCA 7280      ANDI	R24,0x20
    00DCB 7090      ANDI	R25,0
    00DCC 9020 0715 LDS	R2,temp_l
    00DCE 9030 0716 LDS	R3,temp_l+1
    00DD0 2A28      OR	R2,R24
    00DD1 2A39      OR	R3,R25
    00DD2 9230 0716 STS	temp_l+1,R3
    00DD4 9220 0715 STS	temp_l,R2
(0074) 			temp_l<<=temp_l;
    00DD6 0191      MOVW	R18,R2
    00DD7 0181      MOVW	R16,R2
    00DD8 940E 1E52 CALL	lsl16
    00DDA 9310 0716 STS	temp_l+1,R17
    00DDC 9300 0715 STS	temp_l,R16
(0075) 			sck_l_2;
    00DDE 981E      CBI	0x03,6
(0076) 			delay_us(1);
    00DDF E001      LDI	R16,1
    00DE0 E010      LDI	R17,0
    00DE1 940E 0443 CALL	_delay_us
    00DE3 5F4F      SUBI	R20,0xFF
    00DE4 4F5F      SBCI	R21,0xFF
    00DE5 3048      CPI	R20,0x8
    00DE6 E0E0      LDI	R30,0
    00DE7 075E      CPC	R21,R30
    00DE8 F2D0      BCS	0x0DC3
(0077) 	   }
(0078) 	   delay_us(1);
    00DE9 E001      LDI	R16,1
    00DEA E010      LDI	R17,0
    00DEB 940E 0443 CALL	_delay_us
(0079) 	  // temp_l=0x55;
(0080) 	   return ;
    00DED 9159      LD	R21,Y+
    00DEE 9149      LD	R20,Y+
    00DEF 9508      RET
_readTemp_3:
  i                    --> R20
    00DF0 934A      ST	-Y,R20
    00DF1 935A      ST	-Y,R21
(0081) }
(0082) void readTemp_3(void){
(0083) 	   uint i;
(0084) 	   DDRF&=0xFE;
    00DF2 9180 0061 LDS	R24,0x61
    00DF4 7F8E      ANDI	R24,0xFE
    00DF5 9380 0061 STS	0x61,R24
(0085) 	   sck_l_3;
    00DF7 9180 0062 LDS	R24,0x62
    00DF9 7F8E      ANDI	R24,0xFE
    00DFA 9380 0062 STS	0x62,R24
(0086) 	   cs_l_3;
    00DFC 9180 0062 LDS	R24,0x62
    00DFE 7F8B      ANDI	R24,0xFB
    00DFF 9380 0062 STS	0x62,R24
(0087) 	   delay_us(1);
    00E01 E001      LDI	R16,1
    00E02 E010      LDI	R17,0
    00E03 940E 0443 CALL	_delay_us
(0088) 	   for(i=0;i<8;i++){
    00E05 2744      CLR	R20
    00E06 2755      CLR	R21
    00E07 C028      RJMP	0x0E30
(0089) 			sck_h_3;
    00E08 9180 0062 LDS	R24,0x62
    00E0A 6081      ORI	R24,1
    00E0B 9380 0062 STS	0x62,R24
(0090) 			delay_us(10);
    00E0D E00A      LDI	R16,0xA
    00E0E E010      LDI	R17,0
    00E0F 940E 0443 CALL	_delay_us
(0091) 	    	temp_h=temp_h|(PINF&0x01);
    00E11 B180      IN	R24,0x00
    00E12 2799      CLR	R25
    00E13 7081      ANDI	R24,1
    00E14 7090      ANDI	R25,0
    00E15 9020 0713 LDS	R2,temp_h
    00E17 9030 0714 LDS	R3,temp_h+1
    00E19 2A28      OR	R2,R24
    00E1A 2A39      OR	R3,R25
    00E1B 9230 0714 STS	temp_h+1,R3
    00E1D 9220 0713 STS	temp_h,R2
(0092) 			temp_h<<=1;
    00E1F 0C22      LSL	R2
    00E20 1C33      ROL	R3
    00E21 9230 0714 STS	temp_h+1,R3
    00E23 9220 0713 STS	temp_h,R2
(0093) 			sck_l_3;
    00E25 9180 0062 LDS	R24,0x62
    00E27 7F8E      ANDI	R24,0xFE
    00E28 9380 0062 STS	0x62,R24
(0094) 			delay_us(1);
    00E2A E001      LDI	R16,1
    00E2B E010      LDI	R17,0
    00E2C 940E 0443 CALL	_delay_us
    00E2E 5F4F      SUBI	R20,0xFF
    00E2F 4F5F      SBCI	R21,0xFF
    00E30 3048      CPI	R20,0x8
    00E31 E0E0      LDI	R30,0
    00E32 075E      CPC	R21,R30
    00E33 F2A0      BCS	0x0E08
(0095) 			
(0096) 	   }
(0097) 	   for(i=0;i<8;i++){
    00E34 2744      CLR	R20
    00E35 2755      CLR	R21
    00E36 C02A      RJMP	0x0E61
(0098) 			sck_h_3;
    00E37 9180 0062 LDS	R24,0x62
    00E39 6081      ORI	R24,1
    00E3A 9380 0062 STS	0x62,R24
(0099) 			delay_us(10);
    00E3C E00A      LDI	R16,0xA
    00E3D E010      LDI	R17,0
    00E3E 940E 0443 CALL	_delay_us
(0100) 	    	temp_l=temp_l|(PINF&0x01);
    00E40 B180      IN	R24,0x00
    00E41 2799      CLR	R25
    00E42 7081      ANDI	R24,1
    00E43 7090      ANDI	R25,0
    00E44 9020 0715 LDS	R2,temp_l
    00E46 9030 0716 LDS	R3,temp_l+1
    00E48 2A28      OR	R2,R24
    00E49 2A39      OR	R3,R25
    00E4A 9230 0716 STS	temp_l+1,R3
    00E4C 9220 0715 STS	temp_l,R2
(0101) 			temp_l<<=temp_l;
    00E4E 0191      MOVW	R18,R2
    00E4F 0181      MOVW	R16,R2
    00E50 940E 1E52 CALL	lsl16
    00E52 9310 0716 STS	temp_l+1,R17
    00E54 9300 0715 STS	temp_l,R16
(0102) 			sck_l_3;
    00E56 9180 0062 LDS	R24,0x62
    00E58 7F8E      ANDI	R24,0xFE
    00E59 9380 0062 STS	0x62,R24
(0103) 			delay_us(1);
    00E5B E001      LDI	R16,1
    00E5C E010      LDI	R17,0
    00E5D 940E 0443 CALL	_delay_us
    00E5F 5F4F      SUBI	R20,0xFF
    00E60 4F5F      SBCI	R21,0xFF
    00E61 3048      CPI	R20,0x8
    00E62 E0E0      LDI	R30,0
    00E63 075E      CPC	R21,R30
    00E64 F290      BCS	0x0E37
(0104) 	   }
(0105) 	   delay_us(1);
    00E65 E001      LDI	R16,1
    00E66 E010      LDI	R17,0
    00E67 940E 0443 CALL	_delay_us
(0106) 	  // temp_l=0x55;
(0107) 	   return ;
    00E69 9159      LD	R21,Y+
    00E6A 9149      LD	R20,Y+
    00E6B 9508      RET
_readTemp_4:
  i                    --> R20
    00E6C 934A      ST	-Y,R20
    00E6D 935A      ST	-Y,R21
(0108) }
(0109) void readTemp_4(void){
(0110) 	   uint i;
(0111) 	   DDRF&=0xF7;
    00E6E 9180 0061 LDS	R24,0x61
    00E70 7F87      ANDI	R24,0xF7
    00E71 9380 0061 STS	0x61,R24
(0112) 	   sck_l_4;
    00E73 9180 0062 LDS	R24,0x62
    00E75 7E8F      ANDI	R24,0xEF
    00E76 9380 0062 STS	0x62,R24
(0113) 	   cs_l_4;
    00E78 9180 0062 LDS	R24,0x62
    00E7A 7D8F      ANDI	R24,0xDF
    00E7B 9380 0062 STS	0x62,R24
(0114) 	   delay_us(1);
    00E7D E001      LDI	R16,1
    00E7E E010      LDI	R17,0
    00E7F 940E 0443 CALL	_delay_us
(0115) 	   for(i=0;i<8;i++){
    00E81 2744      CLR	R20
    00E82 2755      CLR	R21
    00E83 C028      RJMP	0x0EAC
(0116) 			sck_h_4;
    00E84 9180 0062 LDS	R24,0x62
    00E86 6180      ORI	R24,0x10
    00E87 9380 0062 STS	0x62,R24
(0117) 			delay_us(10);
    00E89 E00A      LDI	R16,0xA
    00E8A E010      LDI	R17,0
    00E8B 940E 0443 CALL	_delay_us
(0118) 	    	temp_h=temp_h|(PINF&0x80);
    00E8D B180      IN	R24,0x00
    00E8E 2799      CLR	R25
    00E8F 7880      ANDI	R24,0x80
    00E90 7090      ANDI	R25,0
    00E91 9020 0713 LDS	R2,temp_h
    00E93 9030 0714 LDS	R3,temp_h+1
    00E95 2A28      OR	R2,R24
    00E96 2A39      OR	R3,R25
    00E97 9230 0714 STS	temp_h+1,R3
    00E99 9220 0713 STS	temp_h,R2
(0119) 			temp_h<<=1;
    00E9B 0C22      LSL	R2
    00E9C 1C33      ROL	R3
    00E9D 9230 0714 STS	temp_h+1,R3
    00E9F 9220 0713 STS	temp_h,R2
(0120) 			sck_l_4;
    00EA1 9180 0062 LDS	R24,0x62
    00EA3 7E8F      ANDI	R24,0xEF
    00EA4 9380 0062 STS	0x62,R24
(0121) 			delay_us(1);
    00EA6 E001      LDI	R16,1
    00EA7 E010      LDI	R17,0
    00EA8 940E 0443 CALL	_delay_us
    00EAA 5F4F      SUBI	R20,0xFF
    00EAB 4F5F      SBCI	R21,0xFF
    00EAC 3048      CPI	R20,0x8
    00EAD E0E0      LDI	R30,0
    00EAE 075E      CPC	R21,R30
    00EAF F2A0      BCS	0x0E84
(0122) 			
(0123) 	   }
(0124) 	   for(i=0;i<8;i++){
    00EB0 2744      CLR	R20
    00EB1 2755      CLR	R21
    00EB2 C02A      RJMP	0x0EDD
(0125) 			sck_h_4;
    00EB3 9180 0062 LDS	R24,0x62
    00EB5 6180      ORI	R24,0x10
    00EB6 9380 0062 STS	0x62,R24
(0126) 			delay_us(10);
    00EB8 E00A      LDI	R16,0xA
    00EB9 E010      LDI	R17,0
    00EBA 940E 0443 CALL	_delay_us
(0127) 	    	temp_l=temp_l|(PINF&0x80);
    00EBC B180      IN	R24,0x00
    00EBD 2799      CLR	R25
    00EBE 7880      ANDI	R24,0x80
    00EBF 7090      ANDI	R25,0
    00EC0 9020 0715 LDS	R2,temp_l
    00EC2 9030 0716 LDS	R3,temp_l+1
    00EC4 2A28      OR	R2,R24
    00EC5 2A39      OR	R3,R25
    00EC6 9230 0716 STS	temp_l+1,R3
    00EC8 9220 0715 STS	temp_l,R2
(0128) 			temp_l<<=temp_l;
    00ECA 0191      MOVW	R18,R2
    00ECB 0181      MOVW	R16,R2
    00ECC 940E 1E52 CALL	lsl16
    00ECE 9310 0716 STS	temp_l+1,R17
    00ED0 9300 0715 STS	temp_l,R16
(0129) 			sck_l_4;
    00ED2 9180 0062 LDS	R24,0x62
    00ED4 7E8F      ANDI	R24,0xEF
    00ED5 9380 0062 STS	0x62,R24
(0130) 			delay_us(1);
    00ED7 E001      LDI	R16,1
    00ED8 E010      LDI	R17,0
    00ED9 940E 0443 CALL	_delay_us
    00EDB 5F4F      SUBI	R20,0xFF
    00EDC 4F5F      SBCI	R21,0xFF
    00EDD 3048      CPI	R20,0x8
    00EDE E0E0      LDI	R30,0
    00EDF 075E      CPC	R21,R30
    00EE0 F290      BCS	0x0EB3
(0131) 	   }
(0132) 	   delay_us(1);
    00EE1 E001      LDI	R16,1
    00EE2 E010      LDI	R17,0
    00EE3 940E 0443 CALL	_delay_us
(0133) 	  // temp_l=0x55;
(0134) 	   return ;
    00EE5 9159      LD	R21,Y+
    00EE6 9149      LD	R20,Y+
    00EE7 9508      RET
(0135) }
(0136) uchar readOC(void){
(0137) 	  DDRD&=0x07;
_readOC:
    00EE8 B381      IN	R24,0x11
    00EE9 7087      ANDI	R24,7
    00EEA BB81      OUT	0x11,R24
(0138) 	  return PIND&(0xF8);
    00EEB B300      IN	R16,0x10
    00EEC 7F08      ANDI	R16,0xF8
    00EED 9508      RET
FILE: E:\ICCDemo\Temp_Control\temp_control\out.c
(0001) #include<iom128v.h>
(0002) #include "out.h"
(0003) 
(0004) void out_all(uchar out){
(0005)   DDRC=0xFF;
_out_all:
  out                  --> R16
    00EEE EF8F      LDI	R24,0xFF
    00EEF BB84      OUT	0x14,R24
(0006)   PORTC=out;
    00EF0 BB05      OUT	0x15,R16
    00EF1 9508      RET
_out_port:
  port                 --> R10
  out                  --> R20
    00EF2 940E 1E10 CALL	push_xgset300C
    00EF4 0159      MOVW	R10,R18
    00EF5 01A8      MOVW	R20,R16
(0007) }
(0008) //0、1的传入。port由0~7
(0009) void out_port(uint out,uint port){
(0010)   DDRC=0xFF;
    00EF6 EF8F      LDI	R24,0xFF
    00EF7 BB84      OUT	0x14,R24
(0011)   if(out==0){
    00EF8 3040      CPI	R20,0
    00EF9 0745      CPC	R20,R21
    00EFA F471      BNE	0x0F09
(0012)    PORTC&=~(1<<port);
    00EFB E001      LDI	R16,1
    00EFC E010      LDI	R17,0
    00EFD 0195      MOVW	R18,R10
    00EFE 940E 1E52 CALL	lsl16
    00F00 0118      MOVW	R2,R16
    00F01 9420      COM	R2
    00F02 9430      COM	R3
    00F03 B245      IN	R4,0x15
    00F04 2455      CLR	R5
    00F05 2042      AND	R4,R2
    00F06 2053      AND	R5,R3
    00F07 BA45      OUT	0x15,R4
(0013)   }else if(out==1){
    00F08 C00E      RJMP	0x0F17
    00F09 3041      CPI	R20,1
    00F0A E0E0      LDI	R30,0
    00F0B 075E      CPC	R21,R30
    00F0C F451      BNE	0x0F17
(0014)    PORTC|=(1<<port);
    00F0D E001      LDI	R16,1
    00F0E E010      LDI	R17,0
    00F0F 0195      MOVW	R18,R10
    00F10 940E 1E52 CALL	lsl16
    00F12 B225      IN	R2,0x15
    00F13 2433      CLR	R3
    00F14 2A20      OR	R2,R16
    00F15 2A31      OR	R3,R17
    00F16 BA25      OUT	0x15,R2
(0015)   }
    00F17 940C 1E15 JMP	pop_xgset300C
_read_port:
  port                 --> R10
    00F19 92AA      ST	-Y,R10
    00F1A 92BA      ST	-Y,R11
    00F1B 0158      MOVW	R10,R16
(0016) }
(0017) uint read_port(uint port){
(0018)   return PINC&(1<<port);
    00F1C E001      LDI	R16,1
    00F1D E010      LDI	R17,0
    00F1E 0195      MOVW	R18,R10
    00F1F 940E 1E52 CALL	lsl16
    00F21 B223      IN	R2,0x13
    00F22 2433      CLR	R3
    00F23 2220      AND	R2,R16
    00F24 2231      AND	R3,R17
    00F25 0181      MOVW	R16,R2
    00F26 90B9      LD	R11,Y+
    00F27 90A9      LD	R10,Y+
    00F28 9508      RET
FILE: E:\ICCDemo\Temp_Control\temp_control\uart.c
(0001) #include <iom128v.h>
(0002) #include "uart.h"
(0003) 
(0004) //常量定义
(0005) #define BAUDRATE1       115200	//波特率
(0006) //#define BAUDRATE2       9600	//波特率
(0007) #define F_CPU		7372800//晶振频率
(0008) 
(0009) //变量定义
(0010) extern unsigned char send_buf[600];
(0011) extern unsigned char receive_buf[600];
(0012) extern unsigned int send_len;
(0013) extern unsigned int receive_len;
(0014) 
(0015) unsigned char uart_timeout_flag1;
(0016) unsigned char uart_timeout_flag2;
(0017) 
(0018) //串口1对应程序
(0019) ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(0020) //USART 初始化
(0021) void init_USART1(void)
(0022) {
(0023)     //USART 115200 8, n,1  PC上位机软件(超级终端等)也要设成同样的设置才能通讯
(0024)     UCSR0C = (1<<USBS0)|(3<<UCSZ00);
_init_USART1:
    00F29 E08E      LDI	R24,0xE
    00F2A 9380 0095 STS	0x95,R24
(0025)     
(0026)   //异步，8位数据，无奇偶校验，一个停止位，无倍速   
(0027)     //U2X=0时的公式计算
(0028)     UBRR0L= (F_CPU/BAUDRATE1/16-1)%256;
    00F2C E083      LDI	R24,3
    00F2D B989      OUT	0x09,R24
(0029)     UBRR0H= (F_CPU/BAUDRATE1/16-1)/256;
    00F2E 2422      CLR	R2
    00F2F 9220 0090 STS	0x90,R2
(0030) 
(0031)     UCSR0A = 0x00;
    00F31 B82B      OUT	0x0B,R2
(0032) 
(0033)     //使能接收中断，使能接收，使能发送
(0034)     UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    00F32 E188      LDI	R24,0x18
    00F33 B98A      OUT	0x0A,R24
    00F34 9508      RET
(0035)     
(0036) }
(0037) 
(0038) //向串口1写数
(0039) void put_c1(unsigned char c)
(0040) {
(0041) 	while( !(UCSR0A & (1<<UDRE0)) );
_put_c1:
  c                    --> R16
    00F35 9B5D      SBIS	0x0B,5
    00F36 CFFE      RJMP	_put_c1
(0042) 	UDR0=c;	
    00F37 B90C      OUT	0x0C,R16
    00F38 9508      RET
(0043) }
(0044) 
(0045) //从串口1读数
(0046) unsigned char USART_Receive1( void )
(0047) {
(0048)    unsigned int j=0;
_USART_Receive1:
  j                    --> R16
    00F39 2700      CLR	R16
    00F3A 2711      CLR	R17
(0049)    uart_timeout_flag1=0; 
    00F3B 2422      CLR	R2
    00F3C 9220 0D7E STS	uart_timeout_flag1,R2
    00F3E C00B      RJMP	0x0F4A
(0050)   //等待接受标志
(0051)   while ( !(UCSR0A & (1<<RXC0)) ){
(0052)     if(j==32000) //判断超时，并设置标志
    00F3F 3000      CPI	R16,0
    00F40 E7ED      LDI	R30,0x7D
    00F41 071E      CPC	R17,R30
    00F42 F429      BNE	0x0F48
(0053)     { uart_timeout_flag1=1;   
    00F43 E081      LDI	R24,1
    00F44 9380 0D7E STS	uart_timeout_flag1,R24
(0054)     return FAILURE;}
    00F46 E001      LDI	R16,1
    00F47 C005      RJMP	0x0F4D
(0055) 	else 
(0056) 		j++;
    00F48 5F0F      SUBI	R16,0xFF
    00F49 4F1F      SBCI	R17,0xFF
    00F4A 9B5F      SBIS	0x0B,7
    00F4B CFF3      RJMP	0x0F3F
(0057)     ;}
(0058)   //读接收数据  
(0059)   return UDR0;
    00F4C B10C      IN	R16,0x0C
    00F4D 9508      RET
_receiveStrfromCom:
  k                    --> R20
    00F4E 92AA      ST	-Y,R10
    00F4F 934A      ST	-Y,R20
(0060) }
(0061) 
(0062) //从串口接收数据串
(0063) unsigned char receiveStrfromCom(void)
(0064) {
    00F50 C03E      RJMP	0x0F8F
(0065)   unsigned char k;
(0066) 
(0067)   while(1)
(0068)   {
(0069)     ///以下为从串口接收数据的过程
(0070)     send_buf[0]=USART_Receive1();
    00F51 DFE7      RCALL	_USART_Receive1
    00F52 9300 0B10 STS	send_buf,R16
(0071)     //若接收的不是命令头则继续等待
(0072)     if(send_buf[0]!=0x02)continue;
    00F54 3002      CPI	R16,2
    00F55 F009      BEQ	0x0F57
    00F56 C038      RJMP	0x0F8F
(0073)       
(0074)     for(k=1;k<5;k++)
    00F57 E041      LDI	R20,1
    00F58 C00F      RJMP	0x0F68
(0075)     {
(0076)         send_buf[k]=USART_Receive1(); 
    00F59 DFDF      RCALL	_USART_Receive1
    00F5A E180      LDI	R24,0x10
    00F5B E09B      LDI	R25,0xB
    00F5C 2FE4      MOV	R30,R20
    00F5D 27FF      CLR	R31
    00F5E 0FE8      ADD	R30,R24
    00F5F 1FF9      ADC	R31,R25
    00F60 8300      ST	Z,R16
(0077)         if(uart_timeout_flag1==1)
    00F61 9180 0D7E LDS	R24,uart_timeout_flag1
    00F63 3081      CPI	R24,1
    00F64 F411      BNE	0x0F67
(0078)         {  
(0079) //          ComSendResponse(send_buf[3],EXE_TIME_OUT,1);
(0080)           return FAILURE;
    00F65 E001      LDI	R16,1
    00F66 C029      RJMP	0x0F90
    00F67 9543      INC	R20
    00F68 3045      CPI	R20,5
    00F69 F378      BCS	0x0F59
(0081)         }  
(0082)     }
(0083)     
(0084)     send_len=send_buf[4];
    00F6A 9020 0B14 LDS	R2,send_buf+4
    00F6C 2433      CLR	R3
    00F6D 9230 08B7 STS	send_len+1,R3
    00F6F 9220 08B6 STS	send_len,R2
(0085)     
(0086)     for(k=5;k<send_len+6;k++)
    00F71 E045      LDI	R20,5
    00F72 C010      RJMP	0x0F83
(0087)     {
(0088)         send_buf[k]=USART_Receive1(); 
    00F73 DFC5      RCALL	_USART_Receive1
    00F74 2EA0      MOV	R10,R16
    00F75 E180      LDI	R24,0x10
    00F76 E09B      LDI	R25,0xB
    00F77 2FE4      MOV	R30,R20
    00F78 27FF      CLR	R31
    00F79 0FE8      ADD	R30,R24
    00F7A 1FF9      ADC	R31,R25
    00F7B 82A0      ST	Z,R10
(0089)         if(uart_timeout_flag1==1)
    00F7C 9180 0D7E LDS	R24,uart_timeout_flag1
    00F7E 3081      CPI	R24,1
    00F7F F411      BNE	0x0F82
(0090)         {  
(0091) //           ComSendResponse(send_buf[3],EXE_TIME_OUT,1);
(0092)            return FAILURE; 
    00F80 E001      LDI	R16,1
    00F81 C00E      RJMP	0x0F90
    00F82 9543      INC	R20
    00F83 9180 08B6 LDS	R24,send_len
    00F85 9190 08B7 LDS	R25,send_len+1
    00F87 9606      ADIW	R24,6
    00F88 2E24      MOV	R2,R20
    00F89 2433      CLR	R3
    00F8A 1628      CP	R2,R24
    00F8B 0639      CPC	R3,R25
    00F8C F330      BCS	0x0F73
(0093)         }  
(0094)     }  
(0095)     return SUCCESS;
    00F8D 2700      CLR	R16
    00F8E C001      RJMP	0x0F90
    00F8F CFC1      RJMP	0x0F51
    00F90 9149      LD	R20,Y+
    00F91 90A9      LD	R10,Y+
    00F92 9508      RET
_outStrtoCom:
  i                    --> R10
  length               --> R12
  pData                --> R14
    00F93 940E 1E09 CALL	push_xgset00FC
    00F95 0169      MOVW	R12,R18
    00F96 0178      MOVW	R14,R16
(0096) 
(0097)   }  
(0098)   return FAILURE;
(0099) } 
(0100) 
(0101) //向串口输出数据串
(0102) void outStrtoCom(unsigned char *pData,unsigned int length)
(0103) {
(0104) 	unsigned char i;
(0105) 	for(i=0;i<length;i++)
    00F97 24AA      CLR	R10
    00F98 C007      RJMP	0x0FA0
(0106) 		put_c1(pData[i]);
    00F99 2DEA      MOV	R30,R10
    00F9A 27FF      CLR	R31
    00F9B 0DEE      ADD	R30,R14
    00F9C 1DFF      ADC	R31,R15
    00F9D 8100      LD	R16,Z
    00F9E DF96      RCALL	_put_c1
    00F9F 94A3      INC	R10
    00FA0 2C2A      MOV	R2,R10
    00FA1 2433      CLR	R3
    00FA2 142C      CP	R2,R12
    00FA3 043D      CPC	R3,R13
    00FA4 F3A0      BCS	0x0F99
    00FA5 940C 1DEA JMP	pop_xgset00FC
_MAC_CalCrc16:
  i                    --> R10
  j                    --> R22
  value_CRC            --> R20
  ucLen                --> R12
  pCrc16               --> R18
  pInput               --> R16
    00FA7 940E 1E40 CALL	push_xgsetF03C
    00FA9 84C8      LDD	R12,Y+8
(0107) }
(0108) /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(0109) 
(0110) /*-----------------------------------------------
(0111) 函数名： 　MAC_CalCrc16
(0112) 功  能：  以字节为单位计算len个数的CRC16校验和，首字节
(0113) 		  为pInput[0].
(0114) 参  数：  pInput			为需要计算CRC的数据的指针
(0115)           pCrc16			为指向存储CRC值的数组
(0116)           ucLen				为需要计算CRC的数据长度
(0117) 返回值：　无　
(0118) 作  者：　lz
(0119) 日  期：  2008-06-18
(0120) ------------------------------------------------*/
(0121) void MAC_CalCrc16(unsigned char  *pInput, unsigned char * pCrc16, unsigned char ucLen)   
(0122) {   
(0123)     unsigned int value_CRC=0xffff;
    00FAA EF4F      LDI	R20,0xFF
    00FAB EF5F      LDI	R21,0xFF
(0124)     unsigned char i;
(0125)     unsigned char j;
(0126) 
(0127) 	for( i=0; i<ucLen; i++ )
    00FAC 24AA      CLR	R10
    00FAD C01B      RJMP	0x0FC9
(0128) 	{	
(0129) 		value_CRC = value_CRC ^((unsigned int)pInput[i]);
    00FAE 2DEA      MOV	R30,R10
    00FAF 27FF      CLR	R31
    00FB0 0FE0      ADD	R30,R16
    00FB1 1FF1      ADC	R31,R17
    00FB2 8020      LD	R2,Z
    00FB3 2433      CLR	R3
    00FB4 2542      EOR	R20,R2
    00FB5 2553      EOR	R21,R3
(0130) 		for (j = 0; j < 8; j++)
    00FB6 2766      CLR	R22
    00FB7 C00E      RJMP	0x0FC6
(0131) 		{
(0132) 			if (value_CRC & 0x0001)
    00FB8 FF40      SBRS	R20,0
    00FB9 C009      RJMP	0x0FC3
(0133) 			{
(0134) 				value_CRC = (value_CRC >> 1) ^ 0x8408;
    00FBA E088      LDI	R24,0x8
    00FBB E894      LDI	R25,0x84
    00FBC 011A      MOVW	R2,R20
    00FBD 9436      LSR	R3
    00FBE 9427      ROR	R2
    00FBF 2628      EOR	R2,R24
    00FC0 2639      EOR	R3,R25
    00FC1 01A1      MOVW	R20,R2
(0135) 			}
    00FC2 C002      RJMP	0x0FC5
(0136) 			else
(0137) 			{
(0138) 				value_CRC = (value_CRC >> 1);
    00FC3 9556      LSR	R21
    00FC4 9547      ROR	R20
    00FC5 9563      INC	R22
    00FC6 3068      CPI	R22,0x8
    00FC7 F380      BCS	0x0FB8
    00FC8 94A3      INC	R10
    00FC9 14AC      CP	R10,R12
    00FCA F318      BCS	0x0FAE
(0139) 			}
(0140) 		}
(0141) 	}
(0142) 	
(0143)   	pCrc16[0] = (unsigned char)(value_CRC>>8);
    00FCB 011A      MOVW	R2,R20
    00FCC 2C23      MOV	R2,R3
    00FCD 2433      CLR	R3
    00FCE 01F9      MOVW	R30,R18
    00FCF 8220      ST	Z,R2
(0144) 	pCrc16[1] = (unsigned char)(value_CRC);
    00FD0 8341      STD	Z+1,R20
(0145) 	
(0146) 	return;
    00FD1 940C 1E49 JMP	pop_xgsetF03C
_MAC_CheckCrc16:
  CrcChk               --> Y,+1
  ucLen                --> R20
  pInput               --> R10
    00FD3 940E 1E10 CALL	push_xgset300C
    00FD5 2F42      MOV	R20,R18
    00FD6 0158      MOVW	R10,R16
    00FD7 9723      SBIW	R28,3
(0147) }
(0148) 
(0149) 
(0150) /*-----------------------------------------------
(0151) 函数名：	MAC_CheckCrc16
(0152) 功  能：  校验一帧长度为ucLen的数据，pInput[ucLen]
(0153)           pInput[ucLen+1]是这帧数据的校验字节。
(0154) 参  数：  pInput      校验帧的首地址
(0155)           ucLen 　　　需校验的数据帧的长度 
(0156) 返回值：　0表示校验通过，1表示校验失败　
(0157) 作  者：　lz
(0158) 日  期：  2008-06-18
(0159) ------------------------------------------------*/
(0160) unsigned char MAC_CheckCrc16(unsigned char * pInput, unsigned char ucLen)
(0161) {
(0162) 	unsigned char CrcChk[2];
(0163) 
(0164) 	MAC_CalCrc16(pInput,CrcChk,ucLen-2);
    00FD8 2F84      MOV	R24,R20
    00FD9 5082      SUBI	R24,2
    00FDA 8388      ST	Y,R24
    00FDB 019E      MOVW	R18,R28
    00FDC 5F2F      SUBI	R18,0xFF
    00FDD 4F3F      SBCI	R19,0xFF
    00FDE 0185      MOVW	R16,R10
    00FDF DFC7      RCALL	_MAC_CalCrc16
(0165) 
(0166) 	if (CrcChk[0]!=pInput[ucLen-2] || CrcChk[1]!=pInput[ucLen-1])
    00FE0 2FE4      MOV	R30,R20
    00FE1 27FF      CLR	R31
    00FE2 9732      SBIW	R30,2
    00FE3 0DEA      ADD	R30,R10
    00FE4 1DFB      ADC	R31,R11
    00FE5 8020      LD	R2,Z
    00FE6 8039      LDD	R3,Y+1
    00FE7 1432      CP	R3,R2
    00FE8 F449      BNE	0x0FF2
    00FE9 2FE4      MOV	R30,R20
    00FEA 27FF      CLR	R31
    00FEB 9731      SBIW	R30,1
    00FEC 0DEA      ADD	R30,R10
    00FED 1DFB      ADC	R31,R11
    00FEE 8020      LD	R2,Z
    00FEF 803A      LDD	R3,Y+2
    00FF0 1432      CP	R3,R2
    00FF1 F011      BEQ	0x0FF4
(0167) 	{
(0168) 		return FAILURE; // crc16 fail!
    00FF2 E001      LDI	R16,1
    00FF3 C001      RJMP	0x0FF5
(0169) 	}
(0170) 	
(0171) 	return SUCCESS; // crc16 ok!
    00FF4 2700      CLR	R16
    00FF5 9623      ADIW	R28,3
    00FF6 940C 1E15 JMP	pop_xgset300C
_ComSendResponse:
  crc_buf              --> Y,+1
  LenData              --> R20
  statusdata           --> R12
  CmdData              --> R10
    00FF8 940E 1E32 CALL	push_xgset303C
    00FFA 2EC2      MOV	R12,R18
    00FFB 2EA0      MOV	R10,R16
    00FFC 9723      SBIW	R28,3
    00FFD 8549      LDD	R20,Y+9
(0172) }
(0173) /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(0174) //发送命令响应结果
(0175) void ComSendResponse(unsigned char CmdData,unsigned char statusdata,unsigned char LenData)
(0176) {
(0177)     unsigned char crc_buf[2];
(0178)     
(0179)     receive_buf[5]= statusdata;
    00FFE 92C0 08BD STS	receive_buf+5,R12
(0180) 
(0181)     receive_buf[4]=LenData;
    01000 9340 08BC STS	receive_buf+4,R20
(0182) 
(0183)     receive_buf[3]=CmdData;
    01002 92A0 08BB STS	receive_buf+3,R10
(0184)     
(0185)     receive_buf[1]=0x00;receive_buf[2]=0x01;
    01004 2422      CLR	R2
    01005 9220 08B9 STS	receive_buf+1,R2
    01007 E081      LDI	R24,1
    01008 9380 08BA STS	receive_buf+2,R24
(0186) 
(0187)     receive_buf[0]=0x02;
    0100A E082      LDI	R24,2
    0100B 9380 08B8 STS	receive_buf,R24
(0188)     
(0189)     MAC_CalCrc16(receive_buf, crc_buf,LenData+5); 
    0100D 2F84      MOV	R24,R20
    0100E 5F8B      SUBI	R24,0xFB
    0100F 8388      ST	Y,R24
    01010 019E      MOVW	R18,R28
    01011 5F2F      SUBI	R18,0xFF
    01012 4F3F      SBCI	R19,0xFF
    01013 EB08      LDI	R16,0xB8
    01014 E018      LDI	R17,0x8
    01015 DF91      RCALL	_MAC_CalCrc16
(0190)     
(0191)     receive_buf[LenData+5]=crc_buf[0];
    01016 EB8D      LDI	R24,0xBD
    01017 E098      LDI	R25,0x8
    01018 2FE4      MOV	R30,R20
    01019 27FF      CLR	R31
    0101A 0FE8      ADD	R30,R24
    0101B 1FF9      ADC	R31,R25
    0101C 8029      LDD	R2,Y+1
    0101D 8220      ST	Z,R2
(0192)     
(0193)     receive_buf[LenData+6]=crc_buf[1];//数据包尾 
    0101E EB8E      LDI	R24,0xBE
    0101F E098      LDI	R25,0x8
    01020 2FE4      MOV	R30,R20
    01021 27FF      CLR	R31
    01022 0FE8      ADD	R30,R24
    01023 1FF9      ADC	R31,R25
    01024 802A      LDD	R2,Y+2
    01025 8220      ST	Z,R2
(0194)     
(0195)     init_USART1(); 
    01026 DF02      RCALL	_init_USART1
(0196)     outStrtoCom(receive_buf,LenData+7); 
    01027 2F24      MOV	R18,R20
    01028 2733      CLR	R19
    01029 5F29      SUBI	R18,0xF9
    0102A 4F3F      SBCI	R19,0xFF
    0102B EB08      LDI	R16,0xB8
    0102C E018      LDI	R17,0x8
    0102D DF65      RCALL	_outStrtoCom
(0197)    
(0198)     return;
    0102E 9623      ADIW	R28,3
    0102F 940C 1E39 JMP	pop_xgset303C
_EEPROM_write:
  data                 --> R10
  addr_l               --> R14
  addr_h               --> R12
    01031 940E 1E09 CALL	push_xgset00FC
    01033 0179      MOVW	R14,R18
    01034 0168      MOVW	R12,R16
    01035 80AE      LDD	R10,Y+6
    01036 80BF      LDD	R11,Y+7
FILE: E:\ICCDemo\Temp_Control\temp_control\eeprom.c
(0001) #include<iom128v.h>
(0002) #include "eeprom.h"
(0003) #include "delay.h"
(0004) void EEPROM_write(uint addr_h,uint addr_l,uint data){
(0005)    SREG&=0x7F;//关中断
    01037 B78F      IN	R24,0x3F
    01038 778F      ANDI	R24,0x7F
    01039 BF8F      OUT	0x3F,R24
(0006)     while(EECR & (1<<EEWE)){
    0103A 99E1      SBIC	0x1C,1
    0103B CFFE      RJMP	0x103A
(0007) 	 			 
(0008) 	 }
(0009) 	 EEARL=addr_l;
    0103C BAEE      OUT	0x1E,R14
(0010) 	 EEARH=addr_h;
    0103D BACF      OUT	0x1F,R12
(0011) 	 
(0012) 	 EEDR=data;
    0103E BAAD      OUT	0x1D,R10
(0013) 	 EECR|=(1<<EEMWE);
    0103F 9AE2      SBI	0x1C,2
(0014) 	 EECR|=(1<<EEWE);
    01040 9AE1      SBI	0x1C,1
(0015) 	  delay_us(1);
    01041 E001      LDI	R16,1
    01042 E010      LDI	R17,0
    01043 940E 0443 CALL	_delay_us
(0016) 	 SREG|=0x80;//开中断
    01045 9478      BSET	7
(0017) 	 return;
    01046 940C 1DEA JMP	pop_xgset00FC
_EEPROM_read:
  data                 --> R10
  addr_l               --> R12
  addr_h               --> R10
    01048 92AA      ST	-Y,R10
    01049 92CA      ST	-Y,R12
    0104A 0169      MOVW	R12,R18
    0104B 0158      MOVW	R10,R16
(0018) }
(0019) uchar EEPROM_read(uint addr_h,uint addr_l){
(0020)    uchar data;
(0021)    SREG&=0x7F;//关中断
    0104C B78F      IN	R24,0x3F
    0104D 778F      ANDI	R24,0x7F
    0104E BF8F      OUT	0x3F,R24
(0022)     while(EECR & (1<<EEWE)){ 			 
    0104F 99E1      SBIC	0x1C,1
    01050 CFFE      RJMP	0x104F
(0023) 	 }
(0024) 	 EEARL=addr_l;
    01051 BACE      OUT	0x1E,R12
(0025) 	 EEARH=addr_h;
    01052 BAAF      OUT	0x1F,R10
(0026) 	 
(0027) 	 EECR|=(1<<EERE);
    01053 9AE0      SBI	0x1C,0
(0028) 	 delay_us(1);
    01054 E001      LDI	R16,1
    01055 E010      LDI	R17,0
    01056 940E 0443 CALL	_delay_us
(0029) 	 data=EEDR;
    01058 B2AD      IN	R10,0x1D
(0030) 	 SREG|=0x80;//开中断
    01059 9478      BSET	7
(0031) 	 return data;
    0105A 2D0A      MOV	R16,R10
    0105B 90C9      LD	R12,Y+
    0105C 90A9      LD	R10,Y+
    0105D 9508      RET
_pageTime:
  y                    --> R10
    0105E 92AA      ST	-Y,R10
    0105F 92BA      ST	-Y,R11
    01060 0158      MOVW	R10,R16
    01061 9722      SBIW	R28,2
FILE: E:\ICCDemo\Temp_Control\temp_control\pages.c
(0001) #include<iom128v.h>
(0002) #include "main.h"
(0003) #include "lcd.h"
(0004) #include "time.h"
(0005) #include "timertask.h"
(0006) #include "key.h"
(0007) #include "delay.h"
(0008) //************************
(0009) // 所有界面信息在这里,用到全局变量， 
(0010) // unsigned int pageNum;//当前页面，如需跳转改变这个值就行
(0011) // unsigned int pageParam[5];//传递参数。界面间参数暂存
(0012) // unsigned int prePageNum;
(0013) //************************
(0014) 
(0015) //用于显第一行日期信息，其中Page1、Page3 、Page8使用，
(0016) //由定时器触发该函数，进入这三个界面是启动定时器，退出时关闭
(0017) void pageTime(uint y){
(0018)                 //关定时器
(0019)    lcd_write_str(0,y,"时间:");
    01062 EA8E      LDI	R24,0xAE
    01063 E098      LDI	R25,0x8
    01064 8399      STD	Y+1,R25
    01065 8388      ST	Y,R24
    01066 2D2A      MOV	R18,R10
    01067 2700      CLR	R16
    01068 940E 084C CALL	_lcd_write_str
(0020)    showTime_page(y);
    0106A 0185      MOVW	R16,R10
    0106B 940E 0589 CALL	_showTime_page
    0106D 9622      ADIW	R28,2
    0106E 90B9      LD	R11,Y+
    0106F 90A9      LD	R10,Y+
    01070 9508      RET
_pageTime2:
  y                    --> R10
    01071 92AA      ST	-Y,R10
    01072 92BA      ST	-Y,R11
    01073 0158      MOVW	R10,R16
(0021)                  //开定时器 
(0022) }
(0023) void pageTime2(uint y){
(0024)                 //关定时器
(0025)    //lcd_write_str(0,y,"时间:");
(0026)    showTime_page(y);
    01074 0185      MOVW	R16,R10
    01075 940E 0589 CALL	_showTime_page
    01077 90B9      LD	R11,Y+
    01078 90A9      LD	R10,Y+
    01079 9508      RET
_page1:
  cur                  --> R20
  keyV                 --> R10
  y                    --> R22
  i                    --> R10
    0107A 940E 1E40 CALL	push_xgsetF03C
    0107C 9722      SBIW	R28,2
(0027)                  //开定时器 
(0028) }
(0029) //page1,首页的界面
(0030) void page1(void){
(0031)    uint cur=0;
(0032)    uchar keyV;
(0033)    uint i;//用于循环
(0034)    uint y;//确定是那个半屏幕
(0035)    prePageNum=1;//首页不会再有上一界面，这里设置。虽然违反规则
    0107D E081      LDI	R24,1
    0107E E090      LDI	R25,0
    0107F 9390 0D69 STS	prePageNum+1,R25
    01081 9380 0D68 STS	prePageNum,R24
(0036)    //初始化起始选择
(0037) 	 
(0038)    
(0039)    
(0040)    lcd_write_str(1,1," T1:100");
    01083 EA86      LDI	R24,0xA6
    01084 E098      LDI	R25,0x8
    01085 8399      STD	Y+1,R25
    01086 8388      ST	Y,R24
    01087 E021      LDI	R18,1
    01088 E001      LDI	R16,1
    01089 940E 084C CALL	_lcd_write_str
(0041)    lcd_write_char(5,1,0xA1);
    0108B EA81      LDI	R24,0xA1
    0108C 8388      ST	Y,R24
    0108D E021      LDI	R18,1
    0108E E005      LDI	R16,5
    0108F 940E 0826 CALL	_lcd_write_char
(0042)    lcd_write_char_con(1,0xE6);
    01091 EE26      LDI	R18,0xE6
    01092 E001      LDI	R16,1
    01093 940E 07F4 CALL	_lcd_write_char_con
(0043) 	
(0044)    
(0045)     lcd_write_str(6,1," T2:800");
    01095 E98E      LDI	R24,0x9E
    01096 E098      LDI	R25,0x8
    01097 8399      STD	Y+1,R25
    01098 8388      ST	Y,R24
    01099 E021      LDI	R18,1
    0109A E006      LDI	R16,6
    0109B 940E 084C CALL	_lcd_write_str
(0046) 	lcd_write_char(10,1,0xA1);
    0109D EA81      LDI	R24,0xA1
    0109E 8388      ST	Y,R24
    0109F E021      LDI	R18,1
    010A0 E00A      LDI	R16,0xA
    010A1 940E 0826 CALL	_lcd_write_char
(0047) 	lcd_write_char_con(1,0xE6);
    010A3 EE26      LDI	R18,0xE6
    010A4 E001      LDI	R16,1
    010A5 940E 07F4 CALL	_lcd_write_char_con
(0048) 	
(0049)     lcd_write_str(1,2," T3:停止");
    010A7 E985      LDI	R24,0x95
    010A8 E098      LDI	R25,0x8
    010A9 8399      STD	Y+1,R25
    010AA 8388      ST	Y,R24
    010AB E022      LDI	R18,2
    010AC E001      LDI	R16,1
    010AD 940E 084C CALL	_lcd_write_str
(0050) 
(0051)     lcd_write_str(6,2," T4:故障");
    010AF E88C      LDI	R24,0x8C
    010B0 E098      LDI	R25,0x8
    010B1 8399      STD	Y+1,R25
    010B2 8388      ST	Y,R24
    010B3 E022      LDI	R18,2
    010B4 E006      LDI	R16,6
    010B5 940E 084C CALL	_lcd_write_str
(0052) 
(0053) 	
(0054) 	lcd_write_str(1,3,"开始    ");
    010B7 E883      LDI	R24,0x83
    010B8 E098      LDI	R25,0x8
    010B9 8399      STD	Y+1,R25
    010BA 8388      ST	Y,R24
    010BB E023      LDI	R18,3
    010BC E001      LDI	R16,1
    010BD 940E 084C CALL	_lcd_write_str
(0055)     lcd_write_str_con(3,"停止    ");
    010BF E72A      LDI	R18,0x7A
    010C0 E038      LDI	R19,0x8
    010C1 E003      LDI	R16,3
    010C2 940E 0896 CALL	_lcd_write_str_con
(0056) 	lcd_write_str_con(3,"设置");
    010C4 E725      LDI	R18,0x75
    010C5 E038      LDI	R19,0x8
    010C6 E003      LDI	R16,3
    010C7 940E 0896 CALL	_lcd_write_str_con
(0057) 	
(0058) 	
(0059) 	
(0060) 	 
(0061) 	cur=0;
    010C9 2744      CLR	R20
    010CA 2755      CLR	R21
(0062) 	Set_White(2,1,3);
    010CB E083      LDI	R24,3
    010CC 8388      ST	Y,R24
    010CD E021      LDI	R18,1
    010CE E002      LDI	R16,2
    010CF 940E 0A71 CALL	_Set_White
    010D1 C315      RJMP	0x13E7
(0063) 	while(1){
(0064) 	 pageTime(0);
    010D2 2700      CLR	R16
    010D3 2711      CLR	R17
    010D4 DF89      RCALL	_pageTime
(0065) 	for(i=0;i<4;i++){
    010D5 24AA      CLR	R10
    010D6 24BB      CLR	R11
    010D7 C081      RJMP	0x1159
(0066) 	  if(i==0){
    010D8 20AA      TST	R10
    010D9 F449      BNE	0x10E3
    010DA 20BB      TST	R11
    010DB F439      BNE	0x10E3
(0067) 	    y=1;
    010DC E061      LDI	R22,1
    010DD E070      LDI	R23,0
(0068) 	    lcd_write_pos(3,1);
    010DE E021      LDI	R18,1
    010DF E003      LDI	R16,3
    010E0 940E 0808 CALL	_lcd_write_pos
(0069) 	  }else if(i==1){
    010E2 C023      RJMP	0x1106
    010E3 01C5      MOVW	R24,R10
    010E4 3081      CPI	R24,1
    010E5 E0E0      LDI	R30,0
    010E6 079E      CPC	R25,R30
    010E7 F439      BNE	0x10EF
(0070) 	    y=1;
    010E8 E061      LDI	R22,1
    010E9 E070      LDI	R23,0
(0071) 	    lcd_write_pos(8,1);
    010EA E021      LDI	R18,1
    010EB E008      LDI	R16,0x8
    010EC 940E 0808 CALL	_lcd_write_pos
(0072) 	  }else if(i==2){
    010EE C017      RJMP	0x1106
    010EF 01C5      MOVW	R24,R10
    010F0 3082      CPI	R24,2
    010F1 E0E0      LDI	R30,0
    010F2 079E      CPC	R25,R30
    010F3 F439      BNE	0x10FB
(0073) 	    y=2;
    010F4 E062      LDI	R22,2
    010F5 E070      LDI	R23,0
(0074) 	    lcd_write_pos(3,2);
    010F6 E022      LDI	R18,2
    010F7 E003      LDI	R16,3
    010F8 940E 0808 CALL	_lcd_write_pos
(0075) 	  }else if(i==3){
    010FA C00B      RJMP	0x1106
    010FB 01C5      MOVW	R24,R10
    010FC 3083      CPI	R24,3
    010FD E0E0      LDI	R30,0
    010FE 079E      CPC	R25,R30
    010FF F431      BNE	0x1106
(0076) 	    y=2;
    01100 E062      LDI	R22,2
    01101 E070      LDI	R23,0
(0077) 	    lcd_write_pos(8,2);
    01102 E022      LDI	R18,2
    01103 E008      LDI	R16,0x8
    01104 940E 0808 CALL	_lcd_write_pos
(0078) 	  }
(0079) 	   switch(temps[i].flag){
    01106 E187      LDI	R24,0x17
    01107 E097      LDI	R25,7
    01108 01F5      MOVW	R30,R10
    01109 0FEE      LSL	R30
    0110A 1FFF      ROL	R31
    0110B 0FE8      ADD	R30,R24
    0110C 1FF9      ADC	R31,R25
    0110D 80C0      LD	R12,Z
    0110E 80D1      LDD	R13,Z+1
    0110F 20CC      TST	R12
    01110 F411      BNE	0x1113
    01111 20DD      TST	R13
    01112 F0D1      BEQ	0x112D
    01113 01C6      MOVW	R24,R12
    01114 3081      CPI	R24,1
    01115 E0E0      LDI	R30,0
    01116 079E      CPC	R25,R30
    01117 F0D9      BEQ	0x1133
    01118 3082      CPI	R24,2
    01119 E0E0      LDI	R30,0
    0111A 079E      CPC	R25,R30
    0111B F0E9      BEQ	0x1139
    0111C 3083      CPI	R24,3
    0111D E0E0      LDI	R30,0
    0111E 079E      CPC	R25,R30
    0111F F0F9      BEQ	0x113F
    01120 3084      CPI	R24,4
    01121 E0E0      LDI	R30,0
    01122 079E      CPC	R25,R30
    01123 F109      BEQ	0x1145
    01124 3085      CPI	R24,5
    01125 E0E0      LDI	R30,0
    01126 079E      CPC	R25,R30
    01127 F119      BEQ	0x114B
    01128 3086      CPI	R24,6
    01129 E0E0      LDI	R30,0
    0112A 079E      CPC	R25,R30
    0112B F129      BEQ	0x1151
    0112C C029      RJMP	0x1156
(0080) 	     case 0:
(0081) 		   lcd_write_str_con(y,"停止");
    0112D E720      LDI	R18,0x70
    0112E E038      LDI	R19,0x8
    0112F 2F06      MOV	R16,R22
    01130 940E 0896 CALL	_lcd_write_str_con
(0082) 		   break;
    01132 C023      RJMP	0x1156
(0083) 		 case 1:
(0084) 		   lcd_write_str_con(y,"150");
    01133 E62C      LDI	R18,0x6C
    01134 E038      LDI	R19,0x8
    01135 2F06      MOV	R16,R22
    01136 940E 0896 CALL	_lcd_write_str_con
(0085) 		   break;
    01138 C01D      RJMP	0x1156
(0086) 		 case 2:
(0087) 		   lcd_write_str_con(y,"故障");
    01139 E627      LDI	R18,0x67
    0113A E038      LDI	R19,0x8
    0113B 2F06      MOV	R16,R22
    0113C 940E 0896 CALL	_lcd_write_str_con
(0088) 		   break;
    0113E C017      RJMP	0x1156
(0089) 		 case 3:
(0090) 		   lcd_write_str_con(y,"暂停");
    0113F E622      LDI	R18,0x62
    01140 E038      LDI	R19,0x8
    01141 2F06      MOV	R16,R22
    01142 940E 0896 CALL	_lcd_write_str_con
(0091) 		   break;
    01144 C011      RJMP	0x1156
(0092) 		 case 4:
(0093) 		   lcd_write_str_con(y,"结束");
    01145 E52D      LDI	R18,0x5D
    01146 E038      LDI	R19,0x8
    01147 2F06      MOV	R16,R22
    01148 940E 0896 CALL	_lcd_write_str_con
(0094) 		   break;
    0114A C00B      RJMP	0x1156
(0095) 		 case 5:
(0096) 		   lcd_write_str_con(y,"等待");
    0114B E528      LDI	R18,0x58
    0114C E038      LDI	R19,0x8
    0114D 2F06      MOV	R16,R22
    0114E 940E 0896 CALL	_lcd_write_str_con
(0097) 		   break;
    01150 C005      RJMP	0x1156
(0098) 		 case 6:
(0099) 		   lcd_write_str_con(y,"加载");
    01151 E523      LDI	R18,0x53
    01152 E038      LDI	R19,0x8
    01153 2F06      MOV	R16,R22
    01154 940E 0896 CALL	_lcd_write_str_con
    01156 01C5      MOVW	R24,R10
    01157 9601      ADIW	R24,1
    01158 015C      MOVW	R10,R24
    01159 01C5      MOVW	R24,R10
    0115A 3084      CPI	R24,4
    0115B E0E0      LDI	R30,0
    0115C 079E      CPC	R25,R30
    0115D F408      BCC	0x115F
    0115E CF79      RJMP	0x10D8
(0100) 		   break;
(0101) 		   break;
(0102) 		 default:
(0103) 		   break;
(0104) 	   }
(0105) 	}
(0106) 	 keyV=KeyScan_once();
    0115F 940E 06E9 CALL	_KeyScan_once
    01161 2EA0      MOV	R10,R16
(0107) 	 if(keyV=='a'){
    01162 3601      CPI	R16,0x61
    01163 F009      BEQ	0x1165
    01164 C048      RJMP	0x11AD
(0108) 	      //pageNum=8;//跳转到设置时间的界面
(0109) 		   pageNum=8;
    01165 E088      LDI	R24,0x8
    01166 E090      LDI	R25,0
    01167 9390 0D75 STS	pageNum+1,R25
    01169 9380 0D74 STS	pageNum,R24
(0110) 	   switch(cur){
    0116B 3040      CPI	R20,0
    0116C 0745      CPC	R20,R21
    0116D F0A9      BEQ	0x1183
    0116E 3041      CPI	R20,1
    0116F E0E0      LDI	R30,0
    01170 075E      CPC	R21,R30
    01171 F0C1      BEQ	0x118A
    01172 3042      CPI	R20,2
    01173 E0E0      LDI	R30,0
    01174 075E      CPC	R21,R30
    01175 F0D9      BEQ	0x1191
    01176 3043      CPI	R20,3
    01177 E0E0      LDI	R30,0
    01178 075E      CPC	R21,R30
    01179 F0F1      BEQ	0x1198
    0117A 3045      CPI	R20,5
    0117B E0E0      LDI	R30,0
    0117C 075E      CPC	R21,R30
    0117D F109      BEQ	0x119F
    0117E 3046      CPI	R20,6
    0117F E0E0      LDI	R30,0
    01180 075E      CPC	R21,R30
    01181 F121      BEQ	0x11A6
    01182 C265      RJMP	0x13E8
(0111) 		 case 0: 
(0112) 		    Set_White_off(2,1,3);
    01183 E083      LDI	R24,3
    01184 8388      ST	Y,R24
    01185 E021      LDI	R18,1
    01186 E002      LDI	R16,2
    01187 940E 0A01 CALL	_Set_White_off
(0113) 		    break;
    01189 C25E      RJMP	0x13E8
(0114) 		 case 1:
(0115) 		   Set_White_off(7,1,8);
    0118A E088      LDI	R24,0x8
    0118B 8388      ST	Y,R24
    0118C E021      LDI	R18,1
    0118D E007      LDI	R16,7
    0118E 940E 0A01 CALL	_Set_White_off
(0116) 		   break;
    01190 C257      RJMP	0x13E8
(0117) 		 case 2:
(0118) 		  Set_White_off(2,2,3);
    01191 E083      LDI	R24,3
    01192 8388      ST	Y,R24
    01193 E022      LDI	R18,2
    01194 E002      LDI	R16,2
    01195 940E 0A01 CALL	_Set_White_off
(0119) 		  break;
    01197 C250      RJMP	0x13E8
(0120) 		 case 3:
(0121) 		   Set_White_off(7,2,8);
    01198 E088      LDI	R24,0x8
    01199 8388      ST	Y,R24
    0119A E022      LDI	R18,2
    0119B E007      LDI	R16,7
    0119C 940E 0A01 CALL	_Set_White_off
(0122) 		    break;
    0119E C249      RJMP	0x13E8
(0123) 		case 5:
(0124) 		    Set_White_off(6,3,7);
    0119F E087      LDI	R24,7
    011A0 8388      ST	Y,R24
    011A1 E023      LDI	R18,3
    011A2 E006      LDI	R16,6
    011A3 940E 0A01 CALL	_Set_White_off
(0125) 		    break;
    011A5 C242      RJMP	0x13E8
(0126) 		 case 6:
(0127) 		   Set_White_off(10,3,11);
    011A6 E08B      LDI	R24,0xB
    011A7 8388      ST	Y,R24
    011A8 E023      LDI	R18,3
    011A9 E00A      LDI	R16,0xA
    011AA 940E 0A01 CALL	_Set_White_off
(0128) 		    break;
(0129) 		  default:
(0130) 		   break;
(0131) 		 }
(0132) 	   return ;
    011AC C23B      RJMP	0x13E8
(0133) 	}else if(keyV=='d'){
    011AD 2D8A      MOV	R24,R10
    011AE 3684      CPI	R24,0x64
    011AF F009      BEQ	0x11B1
    011B0 C04C      RJMP	0x11FD
(0134) 	     switch(cur){
    011B1 3040      CPI	R20,0
    011B2 0745      CPC	R20,R21
    011B3 F069      BEQ	0x11C1
    011B4 3041      CPI	R20,1
    011B5 E0E0      LDI	R30,0
    011B6 075E      CPC	R21,R30
    011B7 F0C1      BEQ	0x11D0
    011B8 3042      CPI	R20,2
    011B9 E0E0      LDI	R30,0
    011BA 075E      CPC	R21,R30
    011BB F119      BEQ	0x11DF
    011BC 3043      CPI	R20,3
    011BD E0E0      LDI	R30,0
    011BE 075E      CPC	R21,R30
    011BF F171      BEQ	0x11EE
    011C0 C226      RJMP	0x13E7
(0135) 		  case 0:
(0136) 		   Set_White_off(2,1,3);
    011C1 E083      LDI	R24,3
    011C2 8388      ST	Y,R24
    011C3 E021      LDI	R18,1
    011C4 E002      LDI	R16,2
    011C5 940E 0A01 CALL	_Set_White_off
(0137) 		   Set_White(2,2,3);
    011C7 E083      LDI	R24,3
    011C8 8388      ST	Y,R24
    011C9 E022      LDI	R18,2
    011CA E002      LDI	R16,2
    011CB 940E 0A71 CALL	_Set_White
(0138) 		   cur=2;
    011CD E042      LDI	R20,2
    011CE E050      LDI	R21,0
(0139) 		   break;
    011CF C217      RJMP	0x13E7
(0140) 		  case 1:
(0141) 		   Set_White_off(7,1,8);
    011D0 E088      LDI	R24,0x8
    011D1 8388      ST	Y,R24
    011D2 E021      LDI	R18,1
    011D3 E007      LDI	R16,7
    011D4 940E 0A01 CALL	_Set_White_off
(0142) 		   Set_White(7,2,8);
    011D6 E088      LDI	R24,0x8
    011D7 8388      ST	Y,R24
    011D8 E022      LDI	R18,2
    011D9 E007      LDI	R16,7
    011DA 940E 0A71 CALL	_Set_White
(0143) 		   cur=3;
    011DC E043      LDI	R20,3
    011DD E050      LDI	R21,0
(0144) 		   break;
    011DE C208      RJMP	0x13E7
(0145) 		  case 2:
(0146) 		   Set_White_off(2,2,3);
    011DF E083      LDI	R24,3
    011E0 8388      ST	Y,R24
    011E1 E022      LDI	R18,2
    011E2 E002      LDI	R16,2
    011E3 940E 0A01 CALL	_Set_White_off
(0147) 		   Set_White(2,3,3);
    011E5 E083      LDI	R24,3
    011E6 8388      ST	Y,R24
    011E7 E023      LDI	R18,3
    011E8 E002      LDI	R16,2
    011E9 940E 0A71 CALL	_Set_White
(0148) 		   cur=4;
    011EB E044      LDI	R20,4
    011EC E050      LDI	R21,0
(0149) 		   break;
    011ED C1F9      RJMP	0x13E7
(0150) 		  case 3:
(0151) 		   Set_White_off(7,2,8);
    011EE E088      LDI	R24,0x8
    011EF 8388      ST	Y,R24
    011F0 E022      LDI	R18,2
    011F1 E007      LDI	R16,7
    011F2 940E 0A01 CALL	_Set_White_off
(0152) 		   Set_White(6,3,7);
    011F4 E087      LDI	R24,7
    011F5 8388      ST	Y,R24
    011F6 E023      LDI	R18,3
    011F7 E006      LDI	R16,6
    011F8 940E 0A71 CALL	_Set_White
(0153) 		   cur=5;
    011FA E045      LDI	R20,5
    011FB E050      LDI	R21,0
(0154) 		   break;
(0155) 		  default:
(0156) 		   break;
(0157) 		 }
(0158) 	}else if(keyV=='u'){switch(cur){
    011FC C1EA      RJMP	0x13E7
    011FD 2D8A      MOV	R24,R10
    011FE 3785      CPI	R24,0x75
    011FF F009      BEQ	0x1201
    01200 C061      RJMP	0x1262
    01201 3042      CPI	R20,2
    01202 E0E0      LDI	R30,0
    01203 075E      CPC	R21,R30
    01204 F091      BEQ	0x1217
    01205 3043      CPI	R20,3
    01206 E0E0      LDI	R30,0
    01207 075E      CPC	R21,R30
    01208 F0E9      BEQ	0x1226
    01209 3044      CPI	R20,4
    0120A E0E0      LDI	R30,0
    0120B 075E      CPC	R21,R30
    0120C F141      BEQ	0x1235
    0120D 3045      CPI	R20,5
    0120E E0E0      LDI	R30,0
    0120F 075E      CPC	R21,R30
    01210 F199      BEQ	0x1244
    01211 3046      CPI	R20,6
    01212 E0E0      LDI	R30,0
    01213 075E      CPC	R21,R30
    01214 F409      BNE	0x1216
    01215 C03D      RJMP	0x1253
    01216 C1D0      RJMP	0x13E7
(0159) 		  case 2:
(0160) 		   Set_White_off(2,2,3);
    01217 E083      LDI	R24,3
    01218 8388      ST	Y,R24
    01219 E022      LDI	R18,2
    0121A E002      LDI	R16,2
    0121B 940E 0A01 CALL	_Set_White_off
(0161) 		   Set_White(2,1,3);
    0121D E083      LDI	R24,3
    0121E 8388      ST	Y,R24
    0121F E021      LDI	R18,1
    01220 E002      LDI	R16,2
    01221 940E 0A71 CALL	_Set_White
(0162) 		   cur=0;
    01223 2744      CLR	R20
    01224 2755      CLR	R21
(0163) 		   break;
    01225 C1C1      RJMP	0x13E7
(0164) 		  case 3:
(0165) 		   Set_White_off(7,2,8);
    01226 E088      LDI	R24,0x8
    01227 8388      ST	Y,R24
    01228 E022      LDI	R18,2
    01229 E007      LDI	R16,7
    0122A 940E 0A01 CALL	_Set_White_off
(0166) 		   Set_White(7,1,8);
    0122C E088      LDI	R24,0x8
    0122D 8388      ST	Y,R24
    0122E E021      LDI	R18,1
    0122F E007      LDI	R16,7
    01230 940E 0A71 CALL	_Set_White
(0167) 		   cur=1;
    01232 E041      LDI	R20,1
    01233 E050      LDI	R21,0
(0168) 		   break;
    01234 C1B2      RJMP	0x13E7
(0169) 		  case 4:
(0170) 		   Set_White_off(2,3,5);
    01235 E085      LDI	R24,5
    01236 8388      ST	Y,R24
    01237 E023      LDI	R18,3
    01238 E002      LDI	R16,2
    01239 940E 0A01 CALL	_Set_White_off
(0171) 		   Set_White(2,2,3);
    0123B E083      LDI	R24,3
    0123C 8388      ST	Y,R24
    0123D E022      LDI	R18,2
    0123E E002      LDI	R16,2
    0123F 940E 0A71 CALL	_Set_White
(0172) 		   cur=2;
    01241 E042      LDI	R20,2
    01242 E050      LDI	R21,0
(0173) 		   break;
    01243 C1A3      RJMP	0x13E7
(0174) 		  case 5:
(0175) 		   Set_White_off(6,3,7);
    01244 E087      LDI	R24,7
    01245 8388      ST	Y,R24
    01246 E023      LDI	R18,3
    01247 E006      LDI	R16,6
    01248 940E 0A01 CALL	_Set_White_off
(0176) 		   Set_White(7,2,8);
    0124A E088      LDI	R24,0x8
    0124B 8388      ST	Y,R24
    0124C E022      LDI	R18,2
    0124D E007      LDI	R16,7
    0124E 940E 0A71 CALL	_Set_White
(0177) 		   cur=3;
    01250 E043      LDI	R20,3
    01251 E050      LDI	R21,0
(0178) 		   break;
    01252 C194      RJMP	0x13E7
(0179) 		  case 6:
(0180) 		   Set_White_off(10,3,11);
    01253 E08B      LDI	R24,0xB
    01254 8388      ST	Y,R24
    01255 E023      LDI	R18,3
    01256 E00A      LDI	R16,0xA
    01257 940E 0A01 CALL	_Set_White_off
(0181) 		   Set_White(7,2,8);
    01259 E088      LDI	R24,0x8
    0125A 8388      ST	Y,R24
    0125B E022      LDI	R18,2
    0125C E007      LDI	R16,7
    0125D 940E 0A71 CALL	_Set_White
(0182) 		   cur=3;
    0125F E043      LDI	R20,3
    01260 E050      LDI	R21,0
(0183) 		   break;
(0184) 		  default:
(0185) 		   break;
(0186) 		 }
(0187) 	}else if(keyV=='l'){switch(cur){
    01261 C185      RJMP	0x13E7
    01262 2D8A      MOV	R24,R10
    01263 368C      CPI	R24,0x6C
    01264 F009      BEQ	0x1266
    01265 C04D      RJMP	0x12B3
    01266 3041      CPI	R20,1
    01267 E0E0      LDI	R30,0
    01268 075E      CPC	R21,R30
    01269 F069      BEQ	0x1277
    0126A 3043      CPI	R20,3
    0126B E0E0      LDI	R30,0
    0126C 075E      CPC	R21,R30
    0126D F0C1      BEQ	0x1286
    0126E 3045      CPI	R20,5
    0126F E0E0      LDI	R30,0
    01270 075E      CPC	R21,R30
    01271 F119      BEQ	0x1295
    01272 3046      CPI	R20,6
    01273 E0E0      LDI	R30,0
    01274 075E      CPC	R21,R30
    01275 F171      BEQ	0x12A4
    01276 C170      RJMP	0x13E7
(0188) 		  case 1:
(0189) 		   Set_White_off(7,1,8);
    01277 E088      LDI	R24,0x8
    01278 8388      ST	Y,R24
    01279 E021      LDI	R18,1
    0127A E007      LDI	R16,7
    0127B 940E 0A01 CALL	_Set_White_off
(0190) 		   Set_White(2,1,3);
    0127D E083      LDI	R24,3
    0127E 8388      ST	Y,R24
    0127F E021      LDI	R18,1
    01280 E002      LDI	R16,2
    01281 940E 0A71 CALL	_Set_White
(0191) 		   cur=0;
    01283 2744      CLR	R20
    01284 2755      CLR	R21
(0192) 		   break;
    01285 C161      RJMP	0x13E7
(0193) 		  case 3:
(0194) 		   Set_White_off(7,2,8);
    01286 E088      LDI	R24,0x8
    01287 8388      ST	Y,R24
    01288 E022      LDI	R18,2
    01289 E007      LDI	R16,7
    0128A 940E 0A01 CALL	_Set_White_off
(0195) 		   Set_White(2,2,3);
    0128C E083      LDI	R24,3
    0128D 8388      ST	Y,R24
    0128E E022      LDI	R18,2
    0128F E002      LDI	R16,2
    01290 940E 0A71 CALL	_Set_White
(0196) 		   cur=2;
    01292 E042      LDI	R20,2
    01293 E050      LDI	R21,0
(0197) 		   break;
    01294 C152      RJMP	0x13E7
(0198) 		  case 5:
(0199) 		   Set_White_off(6,3,7);
    01295 E087      LDI	R24,7
    01296 8388      ST	Y,R24
    01297 E023      LDI	R18,3
    01298 E006      LDI	R16,6
    01299 940E 0A01 CALL	_Set_White_off
(0200) 		   Set_White(2,3,3);
    0129B E083      LDI	R24,3
    0129C 8388      ST	Y,R24
    0129D E023      LDI	R18,3
    0129E E002      LDI	R16,2
    0129F 940E 0A71 CALL	_Set_White
(0201) 		   cur=4;
    012A1 E044      LDI	R20,4
    012A2 E050      LDI	R21,0
(0202) 		   break;
    012A3 C143      RJMP	0x13E7
(0203) 		  case 6:
(0204) 		   Set_White_off(10,3,11);
    012A4 E08B      LDI	R24,0xB
    012A5 8388      ST	Y,R24
    012A6 E023      LDI	R18,3
    012A7 E00A      LDI	R16,0xA
    012A8 940E 0A01 CALL	_Set_White_off
(0205) 		   Set_White(6,3,7);
    012AA E087      LDI	R24,7
    012AB 8388      ST	Y,R24
    012AC E023      LDI	R18,3
    012AD E006      LDI	R16,6
    012AE 940E 0A71 CALL	_Set_White
(0206) 		   cur=5;
    012B0 E045      LDI	R20,5
    012B1 E050      LDI	R21,0
(0207) 		   break;
(0208) 		  default:
(0209) 		   break;
(0210) 		 }
(0211) 	}else if(keyV=='r'){
    012B2 C134      RJMP	0x13E7
    012B3 2D8A      MOV	R24,R10
    012B4 3782      CPI	R24,0x72
    012B5 F009      BEQ	0x12B7
    012B6 C04C      RJMP	0x1303
(0212) 	switch(cur){
    012B7 3040      CPI	R20,0
    012B8 0745      CPC	R20,R21
    012B9 F069      BEQ	0x12C7
    012BA 3042      CPI	R20,2
    012BB E0E0      LDI	R30,0
    012BC 075E      CPC	R21,R30
    012BD F0C1      BEQ	0x12D6
    012BE 3044      CPI	R20,4
    012BF E0E0      LDI	R30,0
    012C0 075E      CPC	R21,R30
    012C1 F119      BEQ	0x12E5
    012C2 3045      CPI	R20,5
    012C3 E0E0      LDI	R30,0
    012C4 075E      CPC	R21,R30
    012C5 F171      BEQ	0x12F4
    012C6 C120      RJMP	0x13E7
(0213) 		  case 0:
(0214) 		   Set_White_off(2,1,3);
    012C7 E083      LDI	R24,3
    012C8 8388      ST	Y,R24
    012C9 E021      LDI	R18,1
    012CA E002      LDI	R16,2
    012CB 940E 0A01 CALL	_Set_White_off
(0215) 		   Set_White(7,1,8);
    012CD E088      LDI	R24,0x8
    012CE 8388      ST	Y,R24
    012CF E021      LDI	R18,1
    012D0 E007      LDI	R16,7
    012D1 940E 0A71 CALL	_Set_White
(0216) 		   cur=1;
    012D3 E041      LDI	R20,1
    012D4 E050      LDI	R21,0
(0217) 		   break;
    012D5 C111      RJMP	0x13E7
(0218) 		  case 2:
(0219) 		   Set_White_off(2,2,3);
    012D6 E083      LDI	R24,3
    012D7 8388      ST	Y,R24
    012D8 E022      LDI	R18,2
    012D9 E002      LDI	R16,2
    012DA 940E 0A01 CALL	_Set_White_off
(0220) 		   Set_White(7,2,8);
    012DC E088      LDI	R24,0x8
    012DD 8388      ST	Y,R24
    012DE E022      LDI	R18,2
    012DF E007      LDI	R16,7
    012E0 940E 0A71 CALL	_Set_White
(0221) 		   cur=3;
    012E2 E043      LDI	R20,3
    012E3 E050      LDI	R21,0
(0222) 		   break;
    012E4 C102      RJMP	0x13E7
(0223) 		  case 4:
(0224) 		   Set_White_off(2,3,3);
    012E5 E083      LDI	R24,3
    012E6 8388      ST	Y,R24
    012E7 E023      LDI	R18,3
    012E8 E002      LDI	R16,2
    012E9 940E 0A01 CALL	_Set_White_off
(0225) 		   Set_White(6,3,7);
    012EB E087      LDI	R24,7
    012EC 8388      ST	Y,R24
    012ED E023      LDI	R18,3
    012EE E006      LDI	R16,6
    012EF 940E 0A71 CALL	_Set_White
(0226) 		   cur=5;
    012F1 E045      LDI	R20,5
    012F2 E050      LDI	R21,0
(0227) 		   break;
    012F3 C0F3      RJMP	0x13E7
(0228) 		  case 5:
(0229) 		   Set_White_off(6,3,7);
    012F4 E087      LDI	R24,7
    012F5 8388      ST	Y,R24
    012F6 E023      LDI	R18,3
    012F7 E006      LDI	R16,6
    012F8 940E 0A01 CALL	_Set_White_off
(0230) 		   Set_White(10,3,11);
    012FA E08B      LDI	R24,0xB
    012FB 8388      ST	Y,R24
    012FC E023      LDI	R18,3
    012FD E00A      LDI	R16,0xA
    012FE 940E 0A71 CALL	_Set_White
(0231) 		   cur=6;
    01300 E046      LDI	R20,6
    01301 E050      LDI	R21,0
(0232) 		   break;
(0233) 		  default:
(0234) 		   break;
(0235) 		 }
(0236) 	}else if(keyV=='s'){
    01302 C0E4      RJMP	0x13E7
    01303 2D8A      MOV	R24,R10
    01304 3783      CPI	R24,0x73
    01305 F009      BEQ	0x1307
    01306 C048      RJMP	0x134F
(0237) 	   pageNum=5;
    01307 E085      LDI	R24,5
    01308 E090      LDI	R25,0
    01309 9390 0D75 STS	pageNum+1,R25
    0130B 9380 0D74 STS	pageNum,R24
(0238) 	   switch(cur){
    0130D 3040      CPI	R20,0
    0130E 0745      CPC	R20,R21
    0130F F0A9      BEQ	0x1325
    01310 3041      CPI	R20,1
    01311 E0E0      LDI	R30,0
    01312 075E      CPC	R21,R30
    01313 F0C1      BEQ	0x132C
    01314 3042      CPI	R20,2
    01315 E0E0      LDI	R30,0
    01316 075E      CPC	R21,R30
    01317 F0D9      BEQ	0x1333
    01318 3043      CPI	R20,3
    01319 E0E0      LDI	R30,0
    0131A 075E      CPC	R21,R30
    0131B F0F1      BEQ	0x133A
    0131C 3045      CPI	R20,5
    0131D E0E0      LDI	R30,0
    0131E 075E      CPC	R21,R30
    0131F F109      BEQ	0x1341
    01320 3046      CPI	R20,6
    01321 E0E0      LDI	R30,0
    01322 075E      CPC	R21,R30
    01323 F121      BEQ	0x1348
    01324 C0C3      RJMP	0x13E8
(0239) 		 case 0: 
(0240) 		    Set_White_off(2,1,3);
    01325 E083      LDI	R24,3
    01326 8388      ST	Y,R24
    01327 E021      LDI	R18,1
    01328 E002      LDI	R16,2
    01329 940E 0A01 CALL	_Set_White_off
(0241) 		    break;
    0132B C0BC      RJMP	0x13E8
(0242) 		 case 1:
(0243) 		   Set_White_off(7,1,8);
    0132C E088      LDI	R24,0x8
    0132D 8388      ST	Y,R24
    0132E E021      LDI	R18,1
    0132F E007      LDI	R16,7
    01330 940E 0A01 CALL	_Set_White_off
(0244) 		   break;
    01332 C0B5      RJMP	0x13E8
(0245) 		 case 2:
(0246) 		  Set_White_off(2,2,3);
    01333 E083      LDI	R24,3
    01334 8388      ST	Y,R24
    01335 E022      LDI	R18,2
    01336 E002      LDI	R16,2
    01337 940E 0A01 CALL	_Set_White_off
(0247) 		  break;
    01339 C0AE      RJMP	0x13E8
(0248) 		 case 3:
(0249) 		   Set_White_off(7,2,8);
    0133A E088      LDI	R24,0x8
    0133B 8388      ST	Y,R24
    0133C E022      LDI	R18,2
    0133D E007      LDI	R16,7
    0133E 940E 0A01 CALL	_Set_White_off
(0250) 		    break;
    01340 C0A7      RJMP	0x13E8
(0251) 		case 5:
(0252) 		    Set_White_off(6,3,7);
    01341 E087      LDI	R24,7
    01342 8388      ST	Y,R24
    01343 E023      LDI	R18,3
    01344 E006      LDI	R16,6
    01345 940E 0A01 CALL	_Set_White_off
(0253) 		    break;
    01347 C0A0      RJMP	0x13E8
(0254) 		 case 6:
(0255) 		   Set_White_off(10,3,11);
    01348 E08B      LDI	R24,0xB
    01349 8388      ST	Y,R24
    0134A E023      LDI	R18,3
    0134B E00A      LDI	R16,0xA
    0134C 940E 0A01 CALL	_Set_White_off
(0256) 		    break;
(0257) 		  default:
(0258) 		   break;
(0259) 		 }
(0260) 	   return ;
    0134E C099      RJMP	0x13E8
(0261) 	}else if(keyV=='t'){
    0134F 2D8A      MOV	R24,R10
    01350 3784      CPI	R24,0x74
    01351 F009      BEQ	0x1353
    01352 C094      RJMP	0x13E7
(0262) 	   switch(cur){
    01353 3040      CPI	R20,0
    01354 0745      CPC	R20,R21
    01355 F0F1      BEQ	0x1374
    01356 3041      CPI	R20,1
    01357 E0E0      LDI	R30,0
    01358 075E      CPC	R21,R30
    01359 F191      BEQ	0x138C
    0135A 3042      CPI	R20,2
    0135B E0E0      LDI	R30,0
    0135C 075E      CPC	R21,R30
    0135D F409      BNE	0x135F
    0135E C043      RJMP	0x13A2
    0135F 3043      CPI	R20,3
    01360 E0E0      LDI	R30,0
    01361 075E      CPC	R21,R30
    01362 F409      BNE	0x1364
    01363 C055      RJMP	0x13B9
    01364 3044      CPI	R20,4
    01365 E0E0      LDI	R30,0
    01366 075E      CPC	R21,R30
    01367 F409      BNE	0x1369
    01368 C07E      RJMP	0x13E7
    01369 3045      CPI	R20,5
    0136A E0E0      LDI	R30,0
    0136B 075E      CPC	R21,R30
    0136C F409      BNE	0x136E
    0136D C079      RJMP	0x13E7
    0136E 3046      CPI	R20,6
    0136F E0E0      LDI	R30,0
    01370 075E      CPC	R21,R30
    01371 F409      BNE	0x1373
    01372 C05C      RJMP	0x13CF
    01373 C073      RJMP	0x13E7
(0263) 		 case 0: 
(0264) 		    Set_White_off(2,1,3);
    01374 E083      LDI	R24,3
    01375 8388      ST	Y,R24
    01376 E021      LDI	R18,1
    01377 E002      LDI	R16,2
    01378 940E 0A01 CALL	_Set_White_off
(0265) 		    prePageNum=1;
    0137A E081      LDI	R24,1
    0137B E090      LDI	R25,0
    0137C 9390 0D69 STS	prePageNum+1,R25
    0137E 9380 0D68 STS	prePageNum,R24
(0266) 		    pageParam[0]=0;//传递使用第一个，对应不同的温度
    01380 2422      CLR	R2
    01381 2433      CLR	R3
    01382 9230 0D6B STS	pageParam+1,R3
    01384 9220 0D6A STS	pageParam,R2
(0267) 		    pageNum=3;
    01386 E083      LDI	R24,3
    01387 9390 0D75 STS	pageNum+1,R25
    01389 9380 0D74 STS	pageNum,R24
(0268) 		    return;
    0138B C05C      RJMP	0x13E8
(0269) 		 case 1:
(0270) 		   Set_White_off(7,1,8);
    0138C E088      LDI	R24,0x8
    0138D 8388      ST	Y,R24
    0138E E021      LDI	R18,1
    0138F E007      LDI	R16,7
    01390 940E 0A01 CALL	_Set_White_off
(0271) 		    prePageNum=1;
    01392 E081      LDI	R24,1
    01393 E090      LDI	R25,0
    01394 9390 0D69 STS	prePageNum+1,R25
    01396 9380 0D68 STS	prePageNum,R24
(0272) 		   pageParam[0]=1;//传递使用第一个，对应不同的温度
    01398 9390 0D6B STS	pageParam+1,R25
    0139A 9380 0D6A STS	pageParam,R24
(0273) 		    pageNum=3;
    0139C E083      LDI	R24,3
    0139D 9390 0D75 STS	pageNum+1,R25
    0139F 9380 0D74 STS	pageNum,R24
(0274) 		    return;
    013A1 C046      RJMP	0x13E8
(0275) 		 case 2:
(0276) 		  Set_White_off(2,2,3);
    013A2 E083      LDI	R24,3
    013A3 8388      ST	Y,R24
    013A4 E022      LDI	R18,2
    013A5 E002      LDI	R16,2
    013A6 940E 0A01 CALL	_Set_White_off
(0277) 		    prePageNum=1;
    013A8 E081      LDI	R24,1
    013A9 E090      LDI	R25,0
    013AA 9390 0D69 STS	prePageNum+1,R25
    013AC 9380 0D68 STS	prePageNum,R24
(0278) 		    pageParam[0]=2;//传递使用第一个，对应不同的温度
    013AE E082      LDI	R24,2
    013AF 9390 0D6B STS	pageParam+1,R25
    013B1 9380 0D6A STS	pageParam,R24
(0279) 		   pageNum=3;
    013B3 E083      LDI	R24,3
    013B4 9390 0D75 STS	pageNum+1,R25
    013B6 9380 0D74 STS	pageNum,R24
(0280) 		   return;
    013B8 C02F      RJMP	0x13E8
(0281) 		 case 3:
(0282) 		   Set_White_off(7,2,8);
    013B9 E088      LDI	R24,0x8
    013BA 8388      ST	Y,R24
    013BB E022      LDI	R18,2
    013BC E007      LDI	R16,7
    013BD 940E 0A01 CALL	_Set_White_off
(0283) 		     prePageNum=1;
    013BF E081      LDI	R24,1
    013C0 E090      LDI	R25,0
    013C1 9390 0D69 STS	prePageNum+1,R25
    013C3 9380 0D68 STS	prePageNum,R24
(0284) 		    pageParam[0]=3;//传递使用第一个，对应不同的温度
    013C5 E083      LDI	R24,3
    013C6 9390 0D6B STS	pageParam+1,R25
    013C8 9380 0D6A STS	pageParam,R24
(0285) 		    pageNum=3;
    013CA 9390 0D75 STS	pageNum+1,R25
    013CC 9380 0D74 STS	pageNum,R24
(0286) 		    return;
    013CE C019      RJMP	0x13E8
(0287) 		 case 4:
(0288) 		    //调用函数全部开始，参数正确的
(0289) 		   break;
(0290) 		 case 5:
(0291) 		    //全部停止
(0292) 		   break;
(0293) 		 case 6://重置
(0294) 		   Set_White_off(10,3,11);
    013CF E08B      LDI	R24,0xB
    013D0 8388      ST	Y,R24
    013D1 E023      LDI	R18,3
    013D2 E00A      LDI	R16,0xA
    013D3 940E 0A01 CALL	_Set_White_off
(0295) 		   pageParam[2]=0;//表示是系统重置
    013D5 2422      CLR	R2
    013D6 2433      CLR	R3
    013D7 9230 0D6F STS	pageParam+5,R3
    013D9 9220 0D6E STS	pageParam+4,R2
(0296) 		   prePageNum=1;
    013DB E081      LDI	R24,1
    013DC E090      LDI	R25,0
    013DD 9390 0D69 STS	prePageNum+1,R25
    013DF 9380 0D68 STS	prePageNum,R24
(0297) 		   pageNum=5;
    013E1 E085      LDI	R24,5
    013E2 9390 0D75 STS	pageNum+1,R25
    013E4 9380 0D74 STS	pageNum,R24
(0298) 		    return;
    013E6 C001      RJMP	0x13E8
    013E7 CCEA      RJMP	0x10D2
    013E8 9622      ADIW	R28,2
    013E9 940C 1E49 JMP	pop_xgsetF03C
_page2:
  cur                  --> R20
  keyV                 --> R10
    013EB 940E 1E24 CALL	push_xgsetF00C
    013ED 9722      SBIW	R28,2
(0299) 		  default:
(0300) 		   break;
(0301) 		 }
(0302) 	
(0303) 	}
(0304)   }
(0305)    return;
(0306) }
(0307)  void page2(void){
(0308)    uint cur=0;
    013EE 2744      CLR	R20
    013EF 2755      CLR	R21
(0309)    uchar keyV;
(0310)    //初始画面，会有读取EEPROM的判断默认操作，本次只是画界面
(0311)    lcd_write_str(2,0,"是否恢复上次工作");
    013F0 E482      LDI	R24,0x42
    013F1 E098      LDI	R25,0x8
    013F2 8399      STD	Y+1,R25
    013F3 8388      ST	Y,R24
    013F4 2722      CLR	R18
    013F5 E002      LDI	R16,2
    013F6 940E 084C CALL	_lcd_write_str
(0312)    lcd_write_str(2,2,"恢复");
    013F8 E38D      LDI	R24,0x3D
    013F9 E098      LDI	R25,0x8
    013FA 8399      STD	Y+1,R25
    013FB 8388      ST	Y,R24
    013FC E022      LDI	R18,2
    013FD E002      LDI	R16,2
    013FE 940E 084C CALL	_lcd_write_str
(0313)    lcd_write_str(8,2,"取消");
    01400 E388      LDI	R24,0x38
    01401 E098      LDI	R25,0x8
    01402 8399      STD	Y+1,R25
    01403 8388      ST	Y,R24
    01404 E022      LDI	R18,2
    01405 E008      LDI	R16,0x8
    01406 940E 084C CALL	_lcd_write_str
(0314)    Set_White(3,2,4);
    01408 E084      LDI	R24,4
    01409 8388      ST	Y,R24
    0140A E022      LDI	R18,2
    0140B E003      LDI	R16,3
    0140C 940E 0A71 CALL	_Set_White
    0140E C04F      RJMP	0x145E
(0315)     while(1){
(0316)       keyV=KeyScan_once();
    0140F 940E 06E9 CALL	_KeyScan_once
    01411 2EA0      MOV	R10,R16
(0317) 	  switch(keyV){
    01412 2D6A      MOV	R22,R10
    01413 2777      CLR	R23
    01414 366C      CPI	R22,0x6C
    01415 E0E0      LDI	R30,0
    01416 077E      CPC	R23,R30
    01417 F071      BEQ	0x1426
    01418 366C      CPI	R22,0x6C
    01419 E0E0      LDI	R30,0
    0141A 077E      CPC	R23,R30
    0141B F40C      BGE	0x141D
    0141C C041      RJMP	0x145E
    0141D 3762      CPI	R22,0x72
    0141E E0E0      LDI	R30,0
    0141F 077E      CPC	R23,R30
    01420 F0C1      BEQ	0x1439
    01421 3764      CPI	R22,0x74
    01422 E0E0      LDI	R30,0
    01423 077E      CPC	R23,R30
    01424 F131      BEQ	0x144B
    01425 C038      RJMP	0x145E
(0318) 	    case 'l':
(0319) 		   if(cur==1){
    01426 3041      CPI	R20,1
    01427 E0E0      LDI	R30,0
    01428 075E      CPC	R21,R30
    01429 F5A1      BNE	0x145E
(0320) 		      Set_White_off(9,2,10);
    0142A E08A      LDI	R24,0xA
    0142B 8388      ST	Y,R24
    0142C E022      LDI	R18,2
    0142D E009      LDI	R16,0x9
    0142E 940E 0A01 CALL	_Set_White_off
(0321) 		      Set_White(3,2,4);
    01430 E084      LDI	R24,4
    01431 8388      ST	Y,R24
    01432 E022      LDI	R18,2
    01433 E003      LDI	R16,3
    01434 940E 0A71 CALL	_Set_White
(0322) 			  cur=0;
    01436 2744      CLR	R20
    01437 2755      CLR	R21
(0323) 		   }
(0324) 		   break;
    01438 C025      RJMP	0x145E
(0325) 		case 'r':
(0326) 		   if(cur==0){
    01439 3040      CPI	R20,0
    0143A 0745      CPC	R20,R21
    0143B F511      BNE	0x145E
(0327) 		      Set_White_off(3,2,4);
    0143C E084      LDI	R24,4
    0143D 8388      ST	Y,R24
    0143E E022      LDI	R18,2
    0143F E003      LDI	R16,3
    01440 940E 0A01 CALL	_Set_White_off
(0328) 		      Set_White(9,2,10);
    01442 E08A      LDI	R24,0xA
    01443 8388      ST	Y,R24
    01444 E022      LDI	R18,2
    01445 E009      LDI	R16,0x9
    01446 940E 0A71 CALL	_Set_White
(0329) 			  cur=1;
    01448 E041      LDI	R20,1
    01449 E050      LDI	R21,0
(0330) 		   }
(0331) 		  break;
    0144A C013      RJMP	0x145E
(0332) 		case 't':
(0333) 		  //执行相关操作
(0334) 		   Set_White_off(9,2,10);
    0144B E08A      LDI	R24,0xA
    0144C 8388      ST	Y,R24
    0144D E022      LDI	R18,2
    0144E E009      LDI	R16,0x9
    0144F 940E 0A01 CALL	_Set_White_off
(0335) 		    Set_White_off(3,2,4);
    01451 E084      LDI	R24,4
    01452 8388      ST	Y,R24
    01453 E022      LDI	R18,2
    01454 E003      LDI	R16,3
    01455 940E 0A01 CALL	_Set_White_off
(0336) 		  pageNum=1;
    01457 E081      LDI	R24,1
    01458 E090      LDI	R25,0
    01459 9390 0D75 STS	pageNum+1,R25
    0145B 9380 0D74 STS	pageNum,R24
(0337) 		  return;
    0145D C001      RJMP	0x145F
    0145E CFB0      RJMP	0x140F
    0145F 9622      ADIW	R28,2
    01460 940C 1E2B JMP	pop_xgsetF00C
_page3:
  cur                  --> R20
  keyV                 --> R22
    01462 940E 1E1A CALL	push_xgsetF000
    01464 9722      SBIW	R28,2
(0338) 	  }
(0339) 	}
(0340)  }
(0341)  void page3(void){
(0342)   uint cur=0;
    01465 2744      CLR	R20
    01466 2755      CLR	R21
(0343)    uchar keyV;
(0344)    lcd_write_str(0,0,"T");
    01467 E386      LDI	R24,0x36
    01468 E098      LDI	R25,0x8
    01469 8399      STD	Y+1,R25
    0146A 8388      ST	Y,R24
    0146B 2722      CLR	R18
    0146C 2700      CLR	R16
    0146D 940E 084C CALL	_lcd_write_str
(0345)     lcd_write_char_con(0,0x30 | (pageParam[0]+1));
    0146F 9120 0D6A LDS	R18,pageParam
    01471 9130 0D6B LDS	R19,pageParam+1
    01473 5F2F      SUBI	R18,0xFF
    01474 4F3F      SBCI	R19,0xFF
    01475 6320      ORI	R18,0x30
    01476 2700      CLR	R16
    01477 940E 07F4 CALL	_lcd_write_char_con
(0346) 	lcd_write_char_con(0,':');
    01479 E32A      LDI	R18,0x3A
    0147A 2700      CLR	R16
    0147B 940E 07F4 CALL	_lcd_write_char_con
(0347)    lcd_write_str(1,1,"温度:");
    0147D E380      LDI	R24,0x30
    0147E E098      LDI	R25,0x8
    0147F 8399      STD	Y+1,R25
    01480 8388      ST	Y,R24
    01481 E021      LDI	R18,1
    01482 E001      LDI	R16,1
    01483 940E 084C CALL	_lcd_write_str
(0348)    lcd_write_str(1,2,"状态:");
    01485 E28A      LDI	R24,0x2A
    01486 E098      LDI	R25,0x8
    01487 8399      STD	Y+1,R25
    01488 8388      ST	Y,R24
    01489 E022      LDI	R18,2
    0148A E001      LDI	R16,1
    0148B 940E 084C CALL	_lcd_write_str
(0349)    lcd_write_str(0,3,"编辑");
    0148D E285      LDI	R24,0x25
    0148E E098      LDI	R25,0x8
    0148F 8399      STD	Y+1,R25
    01490 8388      ST	Y,R24
    01491 E023      LDI	R18,3
    01492 2700      CLR	R16
    01493 940E 084C CALL	_lcd_write_str
(0350)    lcd_write_str(3,3,"运行");
    01495 E280      LDI	R24,0x20
    01496 E098      LDI	R25,0x8
    01497 8399      STD	Y+1,R25
    01498 8388      ST	Y,R24
    01499 E023      LDI	R18,3
    0149A E003      LDI	R16,3
    0149B 940E 084C CALL	_lcd_write_str
(0351)    lcd_write_str(7,3,"暂停");
    0149D E682      LDI	R24,0x62
    0149E E098      LDI	R25,0x8
    0149F 8399      STD	Y+1,R25
    014A0 8388      ST	Y,R24
    014A1 E023      LDI	R18,3
    014A2 E007      LDI	R16,7
    014A3 940E 084C CALL	_lcd_write_str
(0352)    lcd_write_str(10,3,"重置");
    014A5 E18B      LDI	R24,0x1B
    014A6 E098      LDI	R25,0x8
    014A7 8399      STD	Y+1,R25
    014A8 8388      ST	Y,R24
    014A9 E023      LDI	R18,3
    014AA E00A      LDI	R16,0xA
    014AB 940E 084C CALL	_lcd_write_str
(0353)    Set_White(1,3,2);
    014AD E082      LDI	R24,2
    014AE 8388      ST	Y,R24
    014AF E023      LDI	R18,3
    014B0 E001      LDI	R16,1
    014B1 940E 0A71 CALL	_Set_White
    014B3 C104      RJMP	0x15B8
(0354)    //Set_White(9,2,10);
(0355)     while(1){
(0356) 	lcd_write_pos(2,0);
    014B4 2722      CLR	R18
    014B5 E002      LDI	R16,2
    014B6 940E 0808 CALL	_lcd_write_pos
(0357) 	pageTime2(0);
    014B8 2700      CLR	R16
    014B9 2711      CLR	R17
    014BA DBB6      RCALL	_pageTime2
(0358) 	 lcd_write_str(4,1,"100");
    014BB E187      LDI	R24,0x17
    014BC E098      LDI	R25,0x8
    014BD 8399      STD	Y+1,R25
    014BE 8388      ST	Y,R24
    014BF E021      LDI	R18,1
    014C0 E004      LDI	R16,4
    014C1 940E 084C CALL	_lcd_write_str
(0359) 	 lcd_write_char(6,1,0xA1);
    014C3 EA81      LDI	R24,0xA1
    014C4 8388      ST	Y,R24
    014C5 E021      LDI	R18,1
    014C6 E006      LDI	R16,6
    014C7 940E 0826 CALL	_lcd_write_char
(0360)      lcd_write_char_con(1,0xE6);
    014C9 EE26      LDI	R18,0xE6
    014CA E001      LDI	R16,1
    014CB 940E 07F4 CALL	_lcd_write_char_con
(0361) 	 lcd_write_str(4,2,"阶段1");
    014CD E181      LDI	R24,0x11
    014CE E098      LDI	R25,0x8
    014CF 8399      STD	Y+1,R25
    014D0 8388      ST	Y,R24
    014D1 E022      LDI	R18,2
    014D2 E004      LDI	R16,4
    014D3 940E 084C CALL	_lcd_write_str
(0362) 	 lcd_write_str(8,2," 1:10");
    014D5 E08B      LDI	R24,0xB
    014D6 E098      LDI	R25,0x8
    014D7 8399      STD	Y+1,R25
    014D8 8388      ST	Y,R24
    014D9 E022      LDI	R18,2
    014DA E008      LDI	R16,0x8
    014DB 940E 084C CALL	_lcd_write_str
(0363) 	
(0364)       keyV=KeyScan_once();  
    014DD 940E 06E9 CALL	_KeyScan_once
    014DF 2F60      MOV	R22,R16
(0365) 	  if(keyV=='e'){
    014E0 3605      CPI	R16,0x65
    014E1 F4F9      BNE	0x1501
(0366) 	      Set_White_off(1,3,2);
    014E2 E082      LDI	R24,2
    014E3 8388      ST	Y,R24
    014E4 E023      LDI	R18,3
    014E5 E001      LDI	R16,1
    014E6 940E 0A01 CALL	_Set_White_off
(0367) 		  Set_White_off(4,3,5);
    014E8 E085      LDI	R24,5
    014E9 8388      ST	Y,R24
    014EA E023      LDI	R18,3
    014EB E004      LDI	R16,4
    014EC 940E 0A01 CALL	_Set_White_off
(0368) 		  Set_White_off(8,3,9);
    014EE E089      LDI	R24,0x9
    014EF 8388      ST	Y,R24
    014F0 E023      LDI	R18,3
    014F1 E008      LDI	R16,0x8
    014F2 940E 0A01 CALL	_Set_White_off
(0369) 		  Set_White_off(11,3,12);
    014F4 E08C      LDI	R24,0xC
    014F5 8388      ST	Y,R24
    014F6 E023      LDI	R18,3
    014F7 E00B      LDI	R16,0xB
    014F8 940E 0A01 CALL	_Set_White_off
(0370) 		  pageNum=1;
    014FA E081      LDI	R24,1
    014FB E090      LDI	R25,0
    014FC 9390 0D75 STS	pageNum+1,R25
    014FE 9380 0D74 STS	pageNum,R24
(0371) 		  return;
    01500 C0B8      RJMP	0x15B9
(0372) 	  }else if(keyV=='l'){
    01501 366C      CPI	R22,0x6C
    01502 F5D1      BNE	0x153D
(0373) 	     switch(cur){
    01503 3041      CPI	R20,1
    01504 E0E0      LDI	R30,0
    01505 075E      CPC	R21,R30
    01506 F049      BEQ	0x1510
    01507 3042      CPI	R20,2
    01508 E0E0      LDI	R30,0
    01509 075E      CPC	R21,R30
    0150A F0A1      BEQ	0x151F
    0150B 3043      CPI	R20,3
    0150C E0E0      LDI	R30,0
    0150D 075E      CPC	R21,R30
    0150E F0F9      BEQ	0x152E
    0150F C0A8      RJMP	0x15B8
(0374) 		   case 1:
(0375) 		     Set_White_off(4,3,5);
    01510 E085      LDI	R24,5
    01511 8388      ST	Y,R24
    01512 E023      LDI	R18,3
    01513 E004      LDI	R16,4
    01514 940E 0A01 CALL	_Set_White_off
(0376) 		     Set_White(1,3,2);
    01516 E082      LDI	R24,2
    01517 8388      ST	Y,R24
    01518 E023      LDI	R18,3
    01519 E001      LDI	R16,1
    0151A 940E 0A71 CALL	_Set_White
(0377) 			 cur=0;
    0151C 2744      CLR	R20
    0151D 2755      CLR	R21
(0378) 		     break;
    0151E C099      RJMP	0x15B8
(0379) 		   case 2:
(0380) 		     Set_White_off(8,3,9);
    0151F E089      LDI	R24,0x9
    01520 8388      ST	Y,R24
    01521 E023      LDI	R18,3
    01522 E008      LDI	R16,0x8
    01523 940E 0A01 CALL	_Set_White_off
(0381) 		     Set_White(4,3,5);
    01525 E085      LDI	R24,5
    01526 8388      ST	Y,R24
    01527 E023      LDI	R18,3
    01528 E004      LDI	R16,4
    01529 940E 0A71 CALL	_Set_White
(0382) 		     cur=1;
    0152B E041      LDI	R20,1
    0152C E050      LDI	R21,0
(0383) 		     break;
    0152D C08A      RJMP	0x15B8
(0384) 		   case 3:
(0385) 		     Set_White_off(11,3,12);
    0152E E08C      LDI	R24,0xC
    0152F 8388      ST	Y,R24
    01530 E023      LDI	R18,3
    01531 E00B      LDI	R16,0xB
    01532 940E 0A01 CALL	_Set_White_off
(0386) 		     Set_White(8,3,9);
    01534 E089      LDI	R24,0x9
    01535 8388      ST	Y,R24
    01536 E023      LDI	R18,3
    01537 E008      LDI	R16,0x8
    01538 940E 0A71 CALL	_Set_White
(0387) 		     cur=2;
    0153A E042      LDI	R20,2
    0153B E050      LDI	R21,0
(0388) 		     break;
(0389) 		 }
(0390) 	  }else if(keyV=='r'){
    0153C C07B      RJMP	0x15B8
    0153D 3762      CPI	R22,0x72
    0153E F5C9      BNE	0x1578
(0391) 	       switch(cur){
    0153F 3040      CPI	R20,0
    01540 0745      CPC	R20,R21
    01541 F049      BEQ	0x154B
    01542 3041      CPI	R20,1
    01543 E0E0      LDI	R30,0
    01544 075E      CPC	R21,R30
    01545 F0A1      BEQ	0x155A
    01546 3042      CPI	R20,2
    01547 E0E0      LDI	R30,0
    01548 075E      CPC	R21,R30
    01549 F0F9      BEQ	0x1569
    0154A C06D      RJMP	0x15B8
(0392) 		   case 0:
(0393) 		     Set_White(4,3,5);
    0154B E085      LDI	R24,5
    0154C 8388      ST	Y,R24
    0154D E023      LDI	R18,3
    0154E E004      LDI	R16,4
    0154F 940E 0A71 CALL	_Set_White
(0394) 		     Set_White_off(1,3,2);
    01551 E082      LDI	R24,2
    01552 8388      ST	Y,R24
    01553 E023      LDI	R18,3
    01554 E001      LDI	R16,1
    01555 940E 0A01 CALL	_Set_White_off
(0395) 			 cur=1;
    01557 E041      LDI	R20,1
    01558 E050      LDI	R21,0
(0396) 		     break;
    01559 C05E      RJMP	0x15B8
(0397) 		   case 1:
(0398) 		     Set_White(8,3,9);
    0155A E089      LDI	R24,0x9
    0155B 8388      ST	Y,R24
    0155C E023      LDI	R18,3
    0155D E008      LDI	R16,0x8
    0155E 940E 0A71 CALL	_Set_White
(0399) 		     Set_White_off(4,3,5);
    01560 E085      LDI	R24,5
    01561 8388      ST	Y,R24
    01562 E023      LDI	R18,3
    01563 E004      LDI	R16,4
    01564 940E 0A01 CALL	_Set_White_off
(0400) 		     cur=2;
    01566 E042      LDI	R20,2
    01567 E050      LDI	R21,0
(0401) 		     break;
    01568 C04F      RJMP	0x15B8
(0402) 		   case 2:
(0403) 		     Set_White(11,3,12);
    01569 E08C      LDI	R24,0xC
    0156A 8388      ST	Y,R24
    0156B E023      LDI	R18,3
    0156C E00B      LDI	R16,0xB
    0156D 940E 0A71 CALL	_Set_White
(0404) 		     Set_White_off(8,3,9);
    0156F E089      LDI	R24,0x9
    01570 8388      ST	Y,R24
    01571 E023      LDI	R18,3
    01572 E008      LDI	R16,0x8
    01573 940E 0A01 CALL	_Set_White_off
(0405) 		     cur=3;
    01575 E043      LDI	R20,3
    01576 E050      LDI	R21,0
(0406) 		     break;
(0407) 		 }
(0408) 	  }else if(keyV=='t'){
    01577 C040      RJMP	0x15B8
    01578 3764      CPI	R22,0x74
    01579 F4E9      BNE	0x1597
(0409) 	       switch(cur){
    0157A 3040      CPI	R20,0
    0157B 0745      CPC	R20,R21
    0157C F069      BEQ	0x158A
    0157D 3041      CPI	R20,1
    0157E E0E0      LDI	R30,0
    0157F 075E      CPC	R21,R30
    01580 F1B9      BEQ	0x15B8
    01581 3042      CPI	R20,2
    01582 E0E0      LDI	R30,0
    01583 075E      CPC	R21,R30
    01584 F199      BEQ	0x15B8
    01585 3043      CPI	R20,3
    01586 E0E0      LDI	R30,0
    01587 075E      CPC	R21,R30
    01588 F179      BEQ	0x15B8
    01589 C02E      RJMP	0x15B8
(0410) 		   case 0:
(0411) 		     Set_White_off(1,3,2);
    0158A E082      LDI	R24,2
    0158B 8388      ST	Y,R24
    0158C E023      LDI	R18,3
    0158D E001      LDI	R16,1
    0158E 940E 0A01 CALL	_Set_White_off
(0412) 			 pageNum=4;
    01590 E084      LDI	R24,4
    01591 E090      LDI	R25,0
    01592 9390 0D75 STS	pageNum+1,R25
    01594 9380 0D74 STS	pageNum,R24
(0413) 		     return;
    01596 C022      RJMP	0x15B9
(0414) 		   case 1:
(0415) 		     //运行操作
(0416) 		     break;
(0417) 		   case 2:
(0418) 		     //暂停操作
(0419) 		     break;
(0420) 		  case 3:
(0421) 		     //重置操作
(0422) 		     break;
(0423) 		 }
(0424) 	  }else if(keyV=='s'){
    01597 3763      CPI	R22,0x73
    01598 F4F9      BNE	0x15B8
(0425) 	       Set_White_off(1,3,2);
    01599 E082      LDI	R24,2
    0159A 8388      ST	Y,R24
    0159B E023      LDI	R18,3
    0159C E001      LDI	R16,1
    0159D 940E 0A01 CALL	_Set_White_off
(0426) 		   Set_White_off(4,3,5);
    0159F E085      LDI	R24,5
    015A0 8388      ST	Y,R24
    015A1 E023      LDI	R18,3
    015A2 E004      LDI	R16,4
    015A3 940E 0A01 CALL	_Set_White_off
(0427) 		   Set_White_off(8,3,9);
    015A5 E089      LDI	R24,0x9
    015A6 8388      ST	Y,R24
    015A7 E023      LDI	R18,3
    015A8 E008      LDI	R16,0x8
    015A9 940E 0A01 CALL	_Set_White_off
(0428) 		   Set_White_off(11,3,12);
    015AB E08C      LDI	R24,0xC
    015AC 8388      ST	Y,R24
    015AD E023      LDI	R18,3
    015AE E00B      LDI	R16,0xB
    015AF 940E 0A01 CALL	_Set_White_off
(0429) 			pageNum=4;
    015B1 E084      LDI	R24,4
    015B2 E090      LDI	R25,0
    015B3 9390 0D75 STS	pageNum+1,R25
    015B5 9380 0D74 STS	pageNum,R24
(0430) 		     return;
    015B7 C001      RJMP	0x15B9
    015B8 CEFB      RJMP	0x14B4
    015B9 9622      ADIW	R28,2
    015BA 940C 1E1F JMP	pop_xgsetF000
_page4_data:
  numL                 --> R20
  numH                 --> R22
  y                    --> R10
  cur                  --> Y,+7
    015BC 940E 1DB9 CALL	push_arg4
    015BE 940E 1E24 CALL	push_xgsetF00C
    015C0 0159      MOVW	R10,R18
    015C1 9721      SBIW	R28,1
(0431) 	  }
(0432) 	}
(0433)  }
(0434)  //等下调用page_ac()函数改变ac写数据
(0435)  void page4_data(uint cur,uint y){
(0436)       uint numH=0xA2;
    015C2 EA62      LDI	R22,0xA2
    015C3 E070      LDI	R23,0
(0437)       uint numL=0xC4;//带括号的123，低位加1是1、方便操作，需要加上即可
    015C4 EC44      LDI	R20,0xC4
    015C5 E050      LDI	R21,0
(0438)     //这个判断需要些到读取值函数中去
(0439) 	 if(y>0 && y<3){
    015C6 20AA      TST	R10
    015C7 F411      BNE	0x15CA
    015C8 20BB      TST	R11
    015C9 F139      BEQ	0x15F1
    015CA 01C5      MOVW	R24,R10
    015CB 3083      CPI	R24,3
    015CC E0E0      LDI	R30,0
    015CD 079E      CPC	R25,R30
    015CE F510      BCC	0x15F1
(0440) 	   lcd_write_char(2,1,numH);
    015CF 8368      ST	Y,R22
    015D0 E021      LDI	R18,1
    015D1 E002      LDI	R16,2
    015D2 940E 0826 CALL	_lcd_write_char
(0441)        lcd_write_char_con(1,numL+1);
    015D4 019A      MOVW	R18,R20
    015D5 5F2F      SUBI	R18,0xFF
    015D6 4F3F      SBCI	R19,0xFF
    015D7 E001      LDI	R16,1
    015D8 940E 07F4 CALL	_lcd_write_char_con
(0442) 	   lcd_write_char(2,2,numH);
    015DA 8368      ST	Y,R22
    015DB E022      LDI	R18,2
    015DC E002      LDI	R16,2
    015DD 940E 0826 CALL	_lcd_write_char
(0443)        lcd_write_char_con(2,numL+2);
    015DF 019A      MOVW	R18,R20
    015E0 5F2E      SUBI	R18,0xFE
    015E1 4F3F      SBCI	R19,0xFF
    015E2 E002      LDI	R16,2
    015E3 940E 07F4 CALL	_lcd_write_char_con
(0444)        lcd_write_char(2,3,numH);
    015E5 8368      ST	Y,R22
    015E6 E023      LDI	R18,3
    015E7 E002      LDI	R16,2
    015E8 940E 0826 CALL	_lcd_write_char
(0445)        lcd_write_char_con(3,numL+3);
    015EA 019A      MOVW	R18,R20
    015EB 5F2D      SUBI	R18,0xFD
    015EC 4F3F      SBCI	R19,0xFF
    015ED E003      LDI	R16,3
    015EE 940E 07F4 CALL	_lcd_write_char_con
(0446) 	  }else if(y>=3 && y<6){
    015F0 C080      RJMP	0x1671
    015F1 01C5      MOVW	R24,R10
    015F2 3083      CPI	R24,3
    015F3 E0E0      LDI	R30,0
    015F4 079E      CPC	R25,R30
    015F5 F130      BCS	0x161C
    015F6 3086      CPI	R24,6
    015F7 E0E0      LDI	R30,0
    015F8 079E      CPC	R25,R30
    015F9 F510      BCC	0x161C
(0447) 	   lcd_write_char(2,1,numH);
    015FA 8368      ST	Y,R22
    015FB E021      LDI	R18,1
    015FC E002      LDI	R16,2
    015FD 940E 0826 CALL	_lcd_write_char
(0448)        lcd_write_char_con(1,numL+4);
    015FF 019A      MOVW	R18,R20
    01600 5F2C      SUBI	R18,0xFC
    01601 4F3F      SBCI	R19,0xFF
    01602 E001      LDI	R16,1
    01603 940E 07F4 CALL	_lcd_write_char_con
(0449) 	   lcd_write_char(2,2,numH);
    01605 8368      ST	Y,R22
    01606 E022      LDI	R18,2
    01607 E002      LDI	R16,2
    01608 940E 0826 CALL	_lcd_write_char
(0450)        lcd_write_char_con(2,numL+5);
    0160A 019A      MOVW	R18,R20
    0160B 5F2B      SUBI	R18,0xFB
    0160C 4F3F      SBCI	R19,0xFF
    0160D E002      LDI	R16,2
    0160E 940E 07F4 CALL	_lcd_write_char_con
(0451)        lcd_write_char(2,3,numH);
    01610 8368      ST	Y,R22
    01611 E023      LDI	R18,3
    01612 E002      LDI	R16,2
    01613 940E 0826 CALL	_lcd_write_char
(0452)        lcd_write_char_con(3,numL+6);
    01615 019A      MOVW	R18,R20
    01616 5F2A      SUBI	R18,0xFA
    01617 4F3F      SBCI	R19,0xFF
    01618 E003      LDI	R16,3
    01619 940E 07F4 CALL	_lcd_write_char_con
(0453) 	  }else if(y>=6 && y<9){
    0161B C055      RJMP	0x1671
    0161C 01C5      MOVW	R24,R10
    0161D 3086      CPI	R24,6
    0161E E0E0      LDI	R30,0
    0161F 079E      CPC	R25,R30
    01620 F130      BCS	0x1647
    01621 3089      CPI	R24,0x9
    01622 E0E0      LDI	R30,0
    01623 079E      CPC	R25,R30
    01624 F510      BCC	0x1647
(0454) 	   lcd_write_char(2,1,numH);
    01625 8368      ST	Y,R22
    01626 E021      LDI	R18,1
    01627 E002      LDI	R16,2
    01628 940E 0826 CALL	_lcd_write_char
(0455)        lcd_write_char_con(1,numL+7);
    0162A 019A      MOVW	R18,R20
    0162B 5F29      SUBI	R18,0xF9
    0162C 4F3F      SBCI	R19,0xFF
    0162D E001      LDI	R16,1
    0162E 940E 07F4 CALL	_lcd_write_char_con
(0456) 	   lcd_write_char(2,2,numH);
    01630 8368      ST	Y,R22
    01631 E022      LDI	R18,2
    01632 E002      LDI	R16,2
    01633 940E 0826 CALL	_lcd_write_char
(0457)        lcd_write_char_con(2,numL+8);
    01635 019A      MOVW	R18,R20
    01636 5F28      SUBI	R18,0xF8
    01637 4F3F      SBCI	R19,0xFF
    01638 E002      LDI	R16,2
    01639 940E 07F4 CALL	_lcd_write_char_con
(0458)        lcd_write_char(2,3,numH);
    0163B 8368      ST	Y,R22
    0163C E023      LDI	R18,3
    0163D E002      LDI	R16,2
    0163E 940E 0826 CALL	_lcd_write_char
(0459)        lcd_write_char_con(3,numL+9);
    01640 019A      MOVW	R18,R20
    01641 5F27      SUBI	R18,0xF7
    01642 4F3F      SBCI	R19,0xFF
    01643 E003      LDI	R16,3
    01644 940E 07F4 CALL	_lcd_write_char_con
(0460) 	  }else if(y>=9 && y<12){
    01646 C02A      RJMP	0x1671
    01647 01C5      MOVW	R24,R10
    01648 3089      CPI	R24,0x9
    01649 E0E0      LDI	R30,0
    0164A 079E      CPC	R25,R30
    0164B F128      BCS	0x1671
    0164C 308C      CPI	R24,0xC
    0164D E0E0      LDI	R30,0
    0164E 079E      CPC	R25,R30
    0164F F508      BCC	0x1671
(0461) 	   lcd_write_char(2,1,numH);
    01650 8368      ST	Y,R22
    01651 E021      LDI	R18,1
    01652 E002      LDI	R16,2
    01653 940E 0826 CALL	_lcd_write_char
(0462)        lcd_write_char_con(1,numL+10);
    01655 019A      MOVW	R18,R20
    01656 5F26      SUBI	R18,0xF6
    01657 4F3F      SBCI	R19,0xFF
    01658 E001      LDI	R16,1
    01659 940E 07F4 CALL	_lcd_write_char_con
(0463) 	   lcd_write_char(2,2,numH);
    0165B 8368      ST	Y,R22
    0165C E022      LDI	R18,2
    0165D E002      LDI	R16,2
    0165E 940E 0826 CALL	_lcd_write_char
(0464)        lcd_write_char_con(2,numL+11);
    01660 019A      MOVW	R18,R20
    01661 5F25      SUBI	R18,0xF5
    01662 4F3F      SBCI	R19,0xFF
    01663 E002      LDI	R16,2
    01664 940E 07F4 CALL	_lcd_write_char_con
(0465)        lcd_write_char(2,3,numH);
    01666 8368      ST	Y,R22
    01667 E023      LDI	R18,3
    01668 E002      LDI	R16,2
    01669 940E 0826 CALL	_lcd_write_char
(0466)        lcd_write_char_con(3,numL+12);
    0166B 019A      MOVW	R18,R20
    0166C 5F24      SUBI	R18,0xF4
    0166D 4F3F      SBCI	R19,0xFF
    0166E E003      LDI	R16,3
    0166F 940E 07F4 CALL	_lcd_write_char_con
(0467) 	  }
    01671 9621      ADIW	R28,1
    01672 940E 1E2B CALL	pop_xgsetF00C
    01674 9624      ADIW	R28,4
    01675 9508      RET
_page4_ac:
  y                    --> R12
  x                    --> R22
  lcd_y                --> R20
  oldcur               --> R14
  cur                  --> Y,+10
    01676 940E 1DB9 CALL	push_arg4
    01678 940E 1E05 CALL	push_xgsetF0FC
    0167A 0179      MOVW	R14,R18
(0468) 	  //还要做数据读取操作
(0469)  }
(0470)  //传入cur做ac位置操作,判断是否翻页
(0471)  void page4_ac(uint cur,uint oldcur){
(0472)       uint y=cur/11;//逻辑y.从0开始
    0167B E02B      LDI	R18,0xB
    0167C E030      LDI	R19,0
    0167D 850A      LDD	R16,Y+10
    0167E 851B      LDD	R17,Y+11
    0167F 940E 1DC0 CALL	div16u
    01681 0168      MOVW	R12,R16
(0473) 	  uint lcd_y;//显示y
(0474) 	  uint x=cur%11;//x轴
    01682 E02B      LDI	R18,0xB
    01683 E030      LDI	R19,0
    01684 850A      LDD	R16,Y+10
    01685 851B      LDD	R17,Y+11
    01686 940E 1DBE CALL	mod16u
    01688 01B8      MOVW	R22,R16
(0475) 	  switch(y%3){
    01689 E023      LDI	R18,3
    0168A E030      LDI	R19,0
    0168B 0186      MOVW	R16,R12
    0168C 940E 1DBE CALL	mod16u
    0168E 0158      MOVW	R10,R16
    0168F 3000      CPI	R16,0
    01690 0701      CPC	R16,R17
    01691 F051      BEQ	0x169C
    01692 01C5      MOVW	R24,R10
    01693 3001      CPI	R16,1
    01694 E0E0      LDI	R30,0
    01695 071E      CPC	R17,R30
    01696 F041      BEQ	0x169F
    01697 3002      CPI	R16,2
    01698 E0E0      LDI	R30,0
    01699 071E      CPC	R17,R30
    0169A F039      BEQ	0x16A2
    0169B C008      RJMP	0x16A4
(0476) 	   case 0://1行
(0477) 	     lcd_y=1;
    0169C E041      LDI	R20,1
    0169D E050      LDI	R21,0
(0478) 	     break;
    0169E C005      RJMP	0x16A4
(0479) 	   case 1://2行
(0480) 	     lcd_y=2;
    0169F E042      LDI	R20,2
    016A0 E050      LDI	R21,0
(0481) 		 break;
    016A1 C002      RJMP	0x16A4
(0482) 	   case 2://3行
(0483) 	     lcd_y=3;
    016A2 E043      LDI	R20,3
    016A3 E050      LDI	R21,0
(0484) 	     break;
(0485) 	  }
(0486) 	  switch((oldcur/11)/3){
    016A4 E02B      LDI	R18,0xB
    016A5 E030      LDI	R19,0
    016A6 0187      MOVW	R16,R14
    016A7 940E 1DC0 CALL	div16u
    016A9 E023      LDI	R18,3
    016AA E030      LDI	R19,0
    016AB 940E 1DC0 CALL	div16u
    016AD 0178      MOVW	R14,R16
    016AE 3000      CPI	R16,0
    016AF 0701      CPC	R16,R17
    016B0 F071      BEQ	0x16BF
    016B1 01C7      MOVW	R24,R14
    016B2 3001      CPI	R16,1
    016B3 E0E0      LDI	R30,0
    016B4 071E      CPC	R17,R30
    016B5 F0A1      BEQ	0x16CA
    016B6 3002      CPI	R16,2
    016B7 E0E0      LDI	R30,0
    016B8 071E      CPC	R17,R30
    016B9 F109      BEQ	0x16DB
    016BA 3003      CPI	R16,3
    016BB E0E0      LDI	R30,0
    016BC 071E      CPC	R17,R30
    016BD F179      BEQ	0x16ED
    016BE C037      RJMP	0x16F6
(0487) 	    case 0:
(0488) 		 if(cur>32){
    016BF E280      LDI	R24,0x20
    016C0 E090      LDI	R25,0
    016C1 840A      LDD	R0,Y+10
    016C2 841B      LDD	R1,Y+11
    016C3 1580      CP	R24,R0
    016C4 0591      CPC	R25,R1
    016C5 F580      BCC	0x16F6
(0489) 		   page4_data(cur,y);
    016C6 0196      MOVW	R18,R12
    016C7 0180      MOVW	R16,R0
    016C8 DEF3      RCALL	_page4_data
(0490) 		 }
(0491) 		 break;
    016C9 C02C      RJMP	0x16F6
(0492) 		case 1:
(0493) 		  if(cur>65 || cur<33){
    016CA E481      LDI	R24,0x41
    016CB E090      LDI	R25,0
    016CC 840A      LDD	R0,Y+10
    016CD 841B      LDD	R1,Y+11
    016CE 1580      CP	R24,R0
    016CF 0591      CPC	R25,R1
    016D0 F028      BCS	0x16D6
    016D1 01C0      MOVW	R24,R0
    016D2 3281      CPI	R24,0x21
    016D3 E0E0      LDI	R30,0
    016D4 079E      CPC	R25,R30
    016D5 F500      BCC	0x16F6
(0494) 		   page4_data(cur,y);
    016D6 0196      MOVW	R18,R12
    016D7 850A      LDD	R16,Y+10
    016D8 851B      LDD	R17,Y+11
    016D9 DEE2      RCALL	_page4_data
(0495) 		 }
(0496) 		 break;
    016DA C01B      RJMP	0x16F6
(0497) 		case 2:
(0498) 		if(cur<66 || cur>98){
    016DB 858A      LDD	R24,Y+10
    016DC 859B      LDD	R25,Y+11
    016DD 3482      CPI	R24,0x42
    016DE E0E0      LDI	R30,0
    016DF 079E      CPC	R25,R30
    016E0 F038      BCS	0x16E8
    016E1 E682      LDI	R24,0x62
    016E2 E090      LDI	R25,0
    016E3 840A      LDD	R0,Y+10
    016E4 841B      LDD	R1,Y+11
    016E5 1580      CP	R24,R0
    016E6 0591      CPC	R25,R1
    016E7 F470      BCC	0x16F6
(0499) 		   page4_data(cur,y);
    016E8 0196      MOVW	R18,R12
    016E9 850A      LDD	R16,Y+10
    016EA 851B      LDD	R17,Y+11
    016EB DED0      RCALL	_page4_data
(0500) 		 }
(0501) 		 break;
    016EC C009      RJMP	0x16F6
(0502) 		case 3:
(0503) 		if(cur<99){
    016ED 858A      LDD	R24,Y+10
    016EE 859B      LDD	R25,Y+11
    016EF 3683      CPI	R24,0x63
    016F0 E0E0      LDI	R30,0
    016F1 079E      CPC	R25,R30
    016F2 F418      BCC	0x16F6
(0504) 		   page4_data(cur,y);
    016F3 0196      MOVW	R18,R12
    016F4 018C      MOVW	R16,R24
    016F5 DEC6      RCALL	_page4_data
(0505) 		 }
(0506) 		 break;
(0507) 	  }
(0508) 	  if(lcd_y==1){
    016F6 3041      CPI	R20,1
    016F7 E0E0      LDI	R30,0
    016F8 075E      CPC	R21,R30
    016F9 F449      BNE	0x1703
(0509) 	     cur_set(3);
    016FA E003      LDI	R16,3
    016FB E010      LDI	R17,0
    016FC 940E 09BD CALL	_cur_set
(0510) 		 cur_set(4);
    016FE E004      LDI	R16,4
    016FF E010      LDI	R17,0
    01700 940E 09BD CALL	_cur_set
(0511) 	  }else if(lcd_y==2 || lcd_y==3){
    01702 C010      RJMP	0x1713
    01703 3042      CPI	R20,2
    01704 E0E0      LDI	R30,0
    01705 075E      CPC	R21,R30
    01706 F021      BEQ	0x170B
    01707 3043      CPI	R20,3
    01708 E0E0      LDI	R30,0
    01709 075E      CPC	R21,R30
    0170A F441      BNE	0x1713
(0512) 	     cur_set(0);
    0170B 2700      CLR	R16
    0170C 2711      CLR	R17
    0170D 940E 09BD CALL	_cur_set
(0513) 		 cur_set(7);
    0170F E007      LDI	R16,7
    01710 E010      LDI	R17,0
    01711 940E 09BD CALL	_cur_set
(0514) 	  }
(0515) 	  if(x==0){
    01713 3060      CPI	R22,0
    01714 0767      CPC	R22,R23
    01715 F429      BNE	0x171B
(0516) 	      lcd_write_pos(3,lcd_y);
    01716 2F24      MOV	R18,R20
    01717 E003      LDI	R16,3
    01718 940E 0808 CALL	_lcd_write_pos
(0517) 	  }else if(x==2){
    0171A C031      RJMP	0x174C
    0171B 3062      CPI	R22,2
    0171C E0E0      LDI	R30,0
    0171D 077E      CPC	R23,R30
    0171E F429      BNE	0x1724
(0518) 	       lcd_write_pos(5,lcd_y);
    0171F 2F24      MOV	R18,R20
    01720 E005      LDI	R16,5
    01721 940E 0808 CALL	_lcd_write_pos
(0519) 	  }else if(x==4){
    01723 C028      RJMP	0x174C
    01724 3064      CPI	R22,4
    01725 E0E0      LDI	R30,0
    01726 077E      CPC	R23,R30
    01727 F429      BNE	0x172D
(0520) 	        lcd_write_pos(7,lcd_y);
    01728 2F24      MOV	R18,R20
    01729 E007      LDI	R16,7
    0172A 940E 0808 CALL	_lcd_write_pos
(0521) 	  }else if(x==6){
    0172C C01F      RJMP	0x174C
    0172D 3066      CPI	R22,6
    0172E E0E0      LDI	R30,0
    0172F 077E      CPC	R23,R30
    01730 F429      BNE	0x1736
(0522) 	        lcd_write_pos(9,lcd_y);
    01731 2F24      MOV	R18,R20
    01732 E009      LDI	R16,0x9
    01733 940E 0808 CALL	_lcd_write_pos
(0523) 	  }else if(x==8){
    01735 C016      RJMP	0x174C
    01736 3068      CPI	R22,0x8
    01737 E0E0      LDI	R30,0
    01738 077E      CPC	R23,R30
    01739 F451      BNE	0x1744
(0524) 	        lcd_write_pos(10,lcd_y);
    0173A 2F24      MOV	R18,R20
    0173B E00A      LDI	R16,0xA
    0173C 940E 0808 CALL	_lcd_write_pos
(0525) 			lcd_write_str_con(lcd_y," ");
    0173E E029      LDI	R18,0x9
    0173F E038      LDI	R19,0x8
    01740 2F04      MOV	R16,R20
    01741 940E 0896 CALL	_lcd_write_str_con
(0526) 	  }else if(x==9){
    01743 C008      RJMP	0x174C
    01744 3069      CPI	R22,0x9
    01745 E0E0      LDI	R30,0
    01746 077E      CPC	R23,R30
    01747 F421      BNE	0x174C
(0527) 	        lcd_write_pos(11,lcd_y);
    01748 2F24      MOV	R18,R20
    01749 E00B      LDI	R16,0xB
    0174A 940E 0808 CALL	_lcd_write_pos
(0528) 	  }
(0529) 	  return;
    0174C 940E 1DFA CALL	pop_xgsetF0FC
    0174E 9624      ADIW	R28,4
    0174F 9508      RET
_page4:
  oldcur               --> R10
  numL                 --> R22
  numH                 --> R12
  cur                  --> R20
  keyV                 --> R22
    01750 940E 1E40 CALL	push_xgsetF03C
    01752 9722      SBIW	R28,2
(0530)  }
(0531)   void page4(void){
(0532)     //定义一个局部的结构体，从对呀温度中获得数据。暂时未写
(0533)   uint numH=0xA2;
    01753 EA82      LDI	R24,0xA2
    01754 E090      LDI	R25,0
    01755 016C      MOVW	R12,R24
(0534)   uint numL=0xC4;//带括号的123，低位加1是1、方便操作，需要加上即可
    01756 EC64      LDI	R22,0xC4
    01757 E070      LDI	R23,0
(0535)     uint cur=0;
(0536) 	uint oldcur=0;
    01758 24AA      CLR	R10
    01759 24BB      CLR	R11
(0537)    uchar keyV;
(0538)    lcd_write_str(0,0,"T");
    0175A E386      LDI	R24,0x36
    0175B E098      LDI	R25,0x8
    0175C 8399      STD	Y+1,R25
    0175D 8388      ST	Y,R24
    0175E 2722      CLR	R18
    0175F 2700      CLR	R16
    01760 940E 084C CALL	_lcd_write_str
(0539)    lcd_write_char_con(0,0x30 | (pageParam[0]+1));
    01762 9120 0D6A LDS	R18,pageParam
    01764 9130 0D6B LDS	R19,pageParam+1
    01766 5F2F      SUBI	R18,0xFF
    01767 4F3F      SBCI	R19,0xFF
    01768 6320      ORI	R18,0x30
    01769 2700      CLR	R16
    0176A 940E 07F4 CALL	_lcd_write_char_con
(0540)    lcd_write_char_con(0,':');
    0176C E32A      LDI	R18,0x3A
    0176D 2700      CLR	R16
    0176E 940E 07F4 CALL	_lcd_write_char_con
(0541)    
(0542)    lcd_write_str(4,0,"升温");
    01770 E084      LDI	R24,4
    01771 E098      LDI	R25,0x8
    01772 8399      STD	Y+1,R25
    01773 8388      ST	Y,R24
    01774 2722      CLR	R18
    01775 E004      LDI	R16,4
    01776 940E 084C CALL	_lcd_write_str
(0543)    lcd_write_str(7,0,"恒温");
    01778 EF8F      LDI	R24,0xFF
    01779 E097      LDI	R25,7
    0177A 8399      STD	Y+1,R25
    0177B 8388      ST	Y,R24
    0177C 2722      CLR	R18
    0177D E007      LDI	R16,7
    0177E 940E 084C CALL	_lcd_write_str
(0544)    lcd_write_str(10,0,"温度");
    01780 EF8A      LDI	R24,0xFA
    01781 E097      LDI	R25,7
    01782 8399      STD	Y+1,R25
    01783 8388      ST	Y,R24
    01784 2722      CLR	R18
    01785 E00A      LDI	R16,0xA
    01786 940E 084C CALL	_lcd_write_str
(0545)    lcd_write_str(0,1,"保存");
    01788 EF85      LDI	R24,0xF5
    01789 E097      LDI	R25,7
    0178A 8399      STD	Y+1,R25
    0178B 8388      ST	Y,R24
    0178C E021      LDI	R18,1
    0178D 2700      CLR	R16
    0178E 940E 084C CALL	_lcd_write_str
(0546)    lcd_write_str(0,2,"取消");
    01790 E388      LDI	R24,0x38
    01791 E098      LDI	R25,0x8
    01792 8399      STD	Y+1,R25
    01793 8388      ST	Y,R24
    01794 E022      LDI	R18,2
    01795 2700      CLR	R16
    01796 940E 084C CALL	_lcd_write_str
(0547)    lcd_write_str(0,3,"重置");
    01798 E18B      LDI	R24,0x1B
    01799 E098      LDI	R25,0x8
    0179A 8399      STD	Y+1,R25
    0179B 8388      ST	Y,R24
    0179C E023      LDI	R18,3
    0179D 2700      CLR	R16
    0179E 940E 084C CALL	_lcd_write_str
(0548)    
(0549)    lcd_write_char(2,1,numH);
    017A0 82C8      ST	Y,R12
    017A1 E021      LDI	R18,1
    017A2 E002      LDI	R16,2
    017A3 940E 0826 CALL	_lcd_write_char
(0550)    lcd_write_char_con(1,numL+1);
    017A5 019B      MOVW	R18,R22
    017A6 5F2F      SUBI	R18,0xFF
    017A7 4F3F      SBCI	R19,0xFF
    017A8 E001      LDI	R16,1
    017A9 940E 07F4 CALL	_lcd_write_char_con
(0551)    lcd_write_str(3,1,"01: 00  01: 00 100");
    017AB EE82      LDI	R24,0xE2
    017AC E097      LDI	R25,7
    017AD 8399      STD	Y+1,R25
    017AE 8388      ST	Y,R24
    017AF E021      LDI	R18,1
    017B0 E003      LDI	R16,3
    017B1 940E 084C CALL	_lcd_write_str
(0552)    lcd_write_char(2,2,numH);
    017B3 82C8      ST	Y,R12
    017B4 E022      LDI	R18,2
    017B5 E002      LDI	R16,2
    017B6 940E 0826 CALL	_lcd_write_char
(0553)    lcd_write_char_con(2,numL+2);
    017B8 019B      MOVW	R18,R22
    017B9 5F2E      SUBI	R18,0xFE
    017BA 4F3F      SBCI	R19,0xFF
    017BB E002      LDI	R16,2
    017BC 940E 07F4 CALL	_lcd_write_char_con
(0554)    lcd_write_str(3,2,"01: 32  01: 00 10");
    017BE ED80      LDI	R24,0xD0
    017BF E097      LDI	R25,7
    017C0 8399      STD	Y+1,R25
    017C1 8388      ST	Y,R24
    017C2 E022      LDI	R18,2
    017C3 E003      LDI	R16,3
    017C4 940E 084C CALL	_lcd_write_str
(0555)    lcd_write_char(2,3,numH);
    017C6 82C8      ST	Y,R12
    017C7 E023      LDI	R18,3
    017C8 E002      LDI	R16,2
    017C9 940E 0826 CALL	_lcd_write_char
(0556)    lcd_write_char_con(3,numL+3);
    017CB 019B      MOVW	R18,R22
    017CC 5F2D      SUBI	R18,0xFD
    017CD 4F3F      SBCI	R19,0xFF
    017CE E003      LDI	R16,3
    017CF 940E 07F4 CALL	_lcd_write_char_con
(0557)    lcd_write_str(3,3,"01: 15  01: 12 150");
    017D1 EB8D      LDI	R24,0xBD
    017D2 E097      LDI	R25,7
    017D3 8399      STD	Y+1,R25
    017D4 8388      ST	Y,R24
    017D5 E023      LDI	R18,3
    017D6 E003      LDI	R16,3
    017D7 940E 084C CALL	_lcd_write_str
(0558)    //初始化操作
(0559)    cur=0;
    017D9 2744      CLR	R20
    017DA 2755      CLR	R21
(0560)    lcd_write_pos(3,1);
    017DB E021      LDI	R18,1
    017DC E003      LDI	R16,3
    017DD 940E 0808 CALL	_lcd_write_pos
(0561)    cur_set(3);
    017DF E003      LDI	R16,3
    017E0 E010      LDI	R17,0
    017E1 940E 09BD CALL	_cur_set
    017E3 C16C      RJMP	0x1950
(0562)    
(0563)    //Set_White(9,2,10);
(0564)     while(1){
(0565)       keyV=KeyScan_once();
    017E4 940E 06E9 CALL	_KeyScan_once
    017E6 2F60      MOV	R22,R16
(0566) 	  if(keyV=='e'){
    017E7 3605      CPI	R16,0x65
    017E8 F509      BNE	0x180A
(0567) 	        Set_White_off(1,1,2);
    017E9 E082      LDI	R24,2
    017EA 8388      ST	Y,R24
    017EB E021      LDI	R18,1
    017EC E001      LDI	R16,1
    017ED 940E 0A01 CALL	_Set_White_off
(0568) 			Set_White_off(1,2,2);
    017EF E082      LDI	R24,2
    017F0 8388      ST	Y,R24
    017F1 E022      LDI	R18,2
    017F2 E001      LDI	R16,1
    017F3 940E 0A01 CALL	_Set_White_off
(0569) 			Set_White_off(1,3,2);
    017F5 E082      LDI	R24,2
    017F6 8388      ST	Y,R24
    017F7 E023      LDI	R18,3
    017F8 E001      LDI	R16,1
    017F9 940E 0A01 CALL	_Set_White_off
(0570) 			cur_set(0);
    017FB 2700      CLR	R16
    017FC 2711      CLR	R17
    017FD 940E 09BD CALL	_cur_set
(0571) 			cur_set(4);
    017FF E004      LDI	R16,4
    01800 E010      LDI	R17,0
    01801 940E 09BD CALL	_cur_set
(0572) 		    pageNum=3;
    01803 E083      LDI	R24,3
    01804 E090      LDI	R25,0
    01805 9390 0D75 STS	pageNum+1,R25
    01807 9380 0D74 STS	pageNum,R24
(0573) 		    return;
    01809 C147      RJMP	0x1951
(0574) 	  }else if(keyV=='u'){
    0180A 3765      CPI	R22,0x75
    0180B F009      BEQ	0x180D
    0180C C042      RJMP	0x184F
(0575) 	     if(cur==133){
    0180D 3845      CPI	R20,0x85
    0180E E0E0      LDI	R30,0
    0180F 075E      CPC	R21,R30
    01810 F479      BNE	0x1820
(0576) 		    Set_White(1,1,2);
    01811 E082      LDI	R24,2
    01812 8388      ST	Y,R24
    01813 E021      LDI	R18,1
    01814 E001      LDI	R16,1
    01815 940E 0A71 CALL	_Set_White
(0577) 			Set_White_off(1,2,2);
    01817 E082      LDI	R24,2
    01818 8388      ST	Y,R24
    01819 E022      LDI	R18,2
    0181A E001      LDI	R16,1
    0181B 940E 0A01 CALL	_Set_White_off
(0578) 			cur=132;
    0181D E844      LDI	R20,0x84
    0181E E050      LDI	R21,0
(0579) 		 }else if(cur==134){
    0181F C130      RJMP	0x1950
    01820 3846      CPI	R20,0x86
    01821 E0E0      LDI	R30,0
    01822 075E      CPC	R21,R30
    01823 F479      BNE	0x1833
(0580) 		    Set_White(1,2,2);
    01824 E082      LDI	R24,2
    01825 8388      ST	Y,R24
    01826 E022      LDI	R18,2
    01827 E001      LDI	R16,1
    01828 940E 0A71 CALL	_Set_White
(0581) 			Set_White_off(1,3,2);
    0182A E082      LDI	R24,2
    0182B 8388      ST	Y,R24
    0182C E023      LDI	R18,3
    0182D E001      LDI	R16,1
    0182E 940E 0A01 CALL	_Set_White_off
(0582) 			cur=133;
    01830 E845      LDI	R20,0x85
    01831 E050      LDI	R21,0
(0583) 		 }else if(cur>10 && cur<=131){
    01832 C11D      RJMP	0x1950
    01833 E08A      LDI	R24,0xA
    01834 E090      LDI	R25,0
    01835 1784      CP	R24,R20
    01836 0795      CPC	R25,R21
    01837 F008      BCS	0x1839
    01838 C117      RJMP	0x1950
    01839 E883      LDI	R24,0x83
    0183A 1784      CP	R24,R20
    0183B 0795      CPC	R25,R21
    0183C F408      BCC	0x183E
    0183D C112      RJMP	0x1950
(0584) 		   oldcur=cur;
    0183E 015A      MOVW	R10,R20
(0585) 	       cur=(cur/11-1)*11;
    0183F E02B      LDI	R18,0xB
    01840 E030      LDI	R19,0
    01841 018A      MOVW	R16,R20
    01842 940E 1DC0 CALL	div16u
    01844 0198      MOVW	R18,R16
    01845 5021      SUBI	R18,1
    01846 4030      SBCI	R19,0
    01847 E00B      LDI	R16,0xB
    01848 E010      LDI	R17,0
    01849 940E 1DDA CALL	empy16s
    0184B 01A8      MOVW	R20,R16
(0586) 		   page4_ac(cur,oldcur);
    0184C 0195      MOVW	R18,R10
    0184D DE28      RCALL	_page4_ac
(0587) 		 }
(0588) 	  }else if(keyV=='d'){
    0184E C101      RJMP	0x1950
    0184F 3664      CPI	R22,0x64
    01850 F009      BEQ	0x1852
    01851 C03C      RJMP	0x188E
(0589) 	     if(cur==132){
    01852 3844      CPI	R20,0x84
    01853 E0E0      LDI	R30,0
    01854 075E      CPC	R21,R30
    01855 F479      BNE	0x1865
(0590) 		    Set_White_off(1,1,2);
    01856 E082      LDI	R24,2
    01857 8388      ST	Y,R24
    01858 E021      LDI	R18,1
    01859 E001      LDI	R16,1
    0185A 940E 0A01 CALL	_Set_White_off
(0591) 			Set_White(1,2,2);
    0185C E082      LDI	R24,2
    0185D 8388      ST	Y,R24
    0185E E022      LDI	R18,2
    0185F E001      LDI	R16,1
    01860 940E 0A71 CALL	_Set_White
(0592) 			cur=133;
    01862 E845      LDI	R20,0x85
    01863 E050      LDI	R21,0
(0593) 		 }else if(cur==133){
    01864 C0EB      RJMP	0x1950
    01865 3845      CPI	R20,0x85
    01866 E0E0      LDI	R30,0
    01867 075E      CPC	R21,R30
    01868 F479      BNE	0x1878
(0594) 		    Set_White_off(1,2,2);
    01869 E082      LDI	R24,2
    0186A 8388      ST	Y,R24
    0186B E022      LDI	R18,2
    0186C E001      LDI	R16,1
    0186D 940E 0A01 CALL	_Set_White_off
(0595) 			Set_White(1,3,2);
    0186F E082      LDI	R24,2
    01870 8388      ST	Y,R24
    01871 E023      LDI	R18,3
    01872 E001      LDI	R16,1
    01873 940E 0A71 CALL	_Set_White
(0596) 			cur=134;
    01875 E846      LDI	R20,0x86
    01876 E050      LDI	R21,0
(0597) 		 }else if(cur<121){
    01877 C0D8      RJMP	0x1950
    01878 3749      CPI	R20,0x79
    01879 E0E0      LDI	R30,0
    0187A 075E      CPC	R21,R30
    0187B F008      BCS	0x187D
    0187C C0D3      RJMP	0x1950
(0598) 	      oldcur=cur;
    0187D 015A      MOVW	R10,R20
(0599) 	      cur=(cur/11+1)*11;
    0187E E02B      LDI	R18,0xB
    0187F E030      LDI	R19,0
    01880 018A      MOVW	R16,R20
    01881 940E 1DC0 CALL	div16u
    01883 0198      MOVW	R18,R16
    01884 5F2F      SUBI	R18,0xFF
    01885 4F3F      SBCI	R19,0xFF
    01886 E00B      LDI	R16,0xB
    01887 E010      LDI	R17,0
    01888 940E 1DDA CALL	empy16s
    0188A 01A8      MOVW	R20,R16
(0600) 		  page4_ac(cur,oldcur);
    0188B 0195      MOVW	R18,R10
    0188C DDE9      RCALL	_page4_ac
(0601) 		}
(0602) 		
(0603) 	  }else if(keyV=='l'){
    0188D C0C2      RJMP	0x1950
    0188E 366C      CPI	R22,0x6C
    0188F F521      BNE	0x18B4
(0604) 	   oldcur=cur;
    01890 015A      MOVW	R10,R20
(0605) 	  if(cur%11==0){
    01891 E02B      LDI	R18,0xB
    01892 E030      LDI	R19,0
    01893 018A      MOVW	R16,R20
    01894 940E 1DBE CALL	mod16u
    01896 3000      CPI	R16,0
    01897 0701      CPC	R16,R17
    01898 F489      BNE	0x18AA
(0606) 	        Set_White(1,1,2);
    01899 E082      LDI	R24,2
    0189A 8388      ST	Y,R24
    0189B E021      LDI	R18,1
    0189C E001      LDI	R16,1
    0189D 940E 0A71 CALL	_Set_White
(0607) 			cur_set(0);
    0189F 2700      CLR	R16
    018A0 2711      CLR	R17
    018A1 940E 09BD CALL	_cur_set
(0608) 			cur_set(4);
    018A3 E004      LDI	R16,4
    018A4 E010      LDI	R17,0
    018A5 940E 09BD CALL	_cur_set
(0609) 			cur=132;
    018A7 E844      LDI	R20,0x84
    018A8 E050      LDI	R21,0
(0610) 	   }else if(cur>0){
    018A9 C0A6      RJMP	0x1950
    018AA 3040      CPI	R20,0
    018AB 0745      CPC	R20,R21
    018AC F409      BNE	0x18AE
    018AD C0A2      RJMP	0x1950
(0611) 	      cur--;
    018AE 5041      SUBI	R20,1
    018AF 4050      SBCI	R21,0
(0612) 		   page4_ac(cur,oldcur);
    018B0 0195      MOVW	R18,R10
    018B1 018A      MOVW	R16,R20
    018B2 DDC3      RCALL	_page4_ac
(0613) 		}
(0614) 	  
(0615) 	  }else if(keyV=='r'){
    018B3 C09C      RJMP	0x1950
    018B4 3762      CPI	R22,0x72
    018B5 F521      BNE	0x18DA
(0616) 	  if(cur>131){
    018B6 E883      LDI	R24,0x83
    018B7 E090      LDI	R25,0
    018B8 1784      CP	R24,R20
    018B9 0795      CPC	R25,R21
    018BA F4A0      BCC	0x18CF
(0617) 	      Set_White_off(1,1,2);
    018BB E082      LDI	R24,2
    018BC 8388      ST	Y,R24
    018BD E021      LDI	R18,1
    018BE E001      LDI	R16,1
    018BF 940E 0A01 CALL	_Set_White_off
(0618) 	      Set_White_off(1,2,2);
    018C1 E082      LDI	R24,2
    018C2 8388      ST	Y,R24
    018C3 E022      LDI	R18,2
    018C4 E001      LDI	R16,1
    018C5 940E 0A01 CALL	_Set_White_off
(0619) 		  Set_White_off(1,3,2);
    018C7 E082      LDI	R24,2
    018C8 8388      ST	Y,R24
    018C9 E023      LDI	R18,3
    018CA E001      LDI	R16,1
    018CB 940E 0A01 CALL	_Set_White_off
(0620) 		  cur=oldcur;
    018CD 01A5      MOVW	R20,R10
(0621) 	  }else  if(cur<131){
    018CE C007      RJMP	0x18D6
    018CF 3843      CPI	R20,0x83
    018D0 E0E0      LDI	R30,0
    018D1 075E      CPC	R21,R30
    018D2 F418      BCC	0x18D6
(0622) 		 oldcur=cur;
    018D3 015A      MOVW	R10,R20
(0623) 	     cur++;
    018D4 5F4F      SUBI	R20,0xFF
    018D5 4F5F      SBCI	R21,0xFF
(0624) 		 }
(0625) 	    page4_ac(cur,oldcur);
    018D6 0195      MOVW	R18,R10
    018D7 018A      MOVW	R16,R20
    018D8 DD9D      RCALL	_page4_ac
(0626) 	  }else if(keyV=='t'){
    018D9 C076      RJMP	0x1950
    018DA 3764      CPI	R22,0x74
    018DB F009      BEQ	0x18DD
    018DC C05F      RJMP	0x193C
(0627) 	        Set_White_off(1,1,2);
    018DD E082      LDI	R24,2
    018DE 8388      ST	Y,R24
    018DF E021      LDI	R18,1
    018E0 E001      LDI	R16,1
    018E1 940E 0A01 CALL	_Set_White_off
(0628) 			Set_White_off(1,2,2);
    018E3 E082      LDI	R24,2
    018E4 8388      ST	Y,R24
    018E5 E022      LDI	R18,2
    018E6 E001      LDI	R16,1
    018E7 940E 0A01 CALL	_Set_White_off
(0629) 			Set_White_off(1,3,2);
    018E9 E082      LDI	R24,2
    018EA 8388      ST	Y,R24
    018EB E023      LDI	R18,3
    018EC E001      LDI	R16,1
    018ED 940E 0A01 CALL	_Set_White_off
(0630) 		    
(0631) 	     if(cur==132){
    018EF 3844      CPI	R20,0x84
    018F0 E0E0      LDI	R30,0
    018F1 075E      CPC	R21,R30
    018F2 F4C9      BNE	0x190C
(0632) 		   cur_set(0);
    018F3 2700      CLR	R16
    018F4 2711      CLR	R17
    018F5 940E 09BD CALL	_cur_set
(0633) 			cur_set(4);
    018F7 E004      LDI	R16,4
    018F8 E010      LDI	R17,0
    018F9 940E 09BD CALL	_cur_set
(0634) 		    pageParam[1]=1;//表示是温度数据的，这里处理保存的方法，因为数据在这里。只是跳转过去，参数如果是1表示成功。2表示失败
    018FB E081      LDI	R24,1
    018FC E090      LDI	R25,0
    018FD 9390 0D6D STS	pageParam+3,R25
    018FF 9380 0D6C STS	pageParam+2,R24
(0635) 		    prePageNum=4;
    01901 E084      LDI	R24,4
    01902 9390 0D69 STS	prePageNum+1,R25
    01904 9380 0D68 STS	prePageNum,R24
(0636) 		    pageNum=6;
    01906 E086      LDI	R24,6
    01907 9390 0D75 STS	pageNum+1,R25
    01909 9380 0D74 STS	pageNum,R24
(0637) 		    return;
    0190B C045      RJMP	0x1951
(0638) 		 }else if(cur==133){
    0190C 3845      CPI	R20,0x85
    0190D E0E0      LDI	R30,0
    0190E 075E      CPC	R21,R30
    0190F F479      BNE	0x191F
(0639) 		    cur_set(0);
    01910 2700      CLR	R16
    01911 2711      CLR	R17
    01912 940E 09BD CALL	_cur_set
(0640) 			cur_set(4);
    01914 E004      LDI	R16,4
    01915 E010      LDI	R17,0
    01916 940E 09BD CALL	_cur_set
(0641) 		    pageNum=3;
    01918 E083      LDI	R24,3
    01919 E090      LDI	R25,0
    0191A 9390 0D75 STS	pageNum+1,R25
    0191C 9380 0D74 STS	pageNum,R24
(0642) 		    return;
    0191E C032      RJMP	0x1951
(0643) 		 }else if(cur==134){
    0191F 3846      CPI	R20,0x86
    01920 E0E0      LDI	R30,0
    01921 075E      CPC	R21,R30
    01922 F569      BNE	0x1950
(0644) 		   cur_set(0);
    01923 2700      CLR	R16
    01924 2711      CLR	R17
    01925 940E 09BD CALL	_cur_set
(0645) 			cur_set(4);
    01927 E004      LDI	R16,4
    01928 E010      LDI	R17,0
    01929 940E 09BD CALL	_cur_set
(0646) 		   //重置。有提示
(0647) 			pageParam[2]=1;//表示重置是温度数据的
    0192B E081      LDI	R24,1
    0192C E090      LDI	R25,0
    0192D 9390 0D6F STS	pageParam+5,R25
    0192F 9380 0D6E STS	pageParam+4,R24
(0648) 			prePageNum=4;
    01931 E084      LDI	R24,4
    01932 9390 0D69 STS	prePageNum+1,R25
    01934 9380 0D68 STS	prePageNum,R24
(0649) 		    pageNum=7;
    01936 E087      LDI	R24,7
    01937 9390 0D75 STS	pageNum+1,R25
    01939 9380 0D74 STS	pageNum,R24
(0650) 		    return;
    0193B C015      RJMP	0x1951
(0651) 		 }
(0652) 	     
(0653) 	  }else if(keyV=='0' || keyV=='1' || keyV=='2' || keyV=='3' || keyV=='4' || keyV=='5' 
    0193C 3360      CPI	R22,0x30
    0193D F091      BEQ	0x1950
    0193E 3361      CPI	R22,0x31
    0193F F081      BEQ	0x1950
    01940 3362      CPI	R22,0x32
    01941 F071      BEQ	0x1950
    01942 3363      CPI	R22,0x33
    01943 F061      BEQ	0x1950
    01944 3364      CPI	R22,0x34
    01945 F051      BEQ	0x1950
    01946 3365      CPI	R22,0x35
    01947 F041      BEQ	0x1950
    01948 3366      CPI	R22,0x36
    01949 F031      BEQ	0x1950
    0194A 3367      CPI	R22,0x37
    0194B F021      BEQ	0x1950
    0194C 3368      CPI	R22,0x38
    0194D F011      BEQ	0x1950
    0194E 3369      CPI	R22,0x39
    0194F F401      BNE	0x1950
    01950 CE93      RJMP	0x17E4
    01951 9622      ADIW	R28,2
    01952 940C 1E49 JMP	pop_xgsetF03C
_page5:
  cur                  --> R20
  keyV                 --> R22
    01954 940E 1E1A CALL	push_xgsetF000
    01956 9722      SBIW	R28,2
(0654) 	           || keyV=='6'  || keyV=='7' || keyV=='8' || keyV=='9'){
(0655) 			   
(0656) 		}
(0657) 	}
(0658)  }
(0659)  
(0660)  void page5(void){
(0661)   uint cur=0;
(0662)    uchar keyV;
(0663)    lcd_write_str(4,0,"断电自动重置");
    01957 EB80      LDI	R24,0xB0
    01958 E097      LDI	R25,7
    01959 8399      STD	Y+1,R25
    0195A 8388      ST	Y,R24
    0195B 2722      CLR	R18
    0195C E004      LDI	R16,4
    0195D 940E 084C CALL	_lcd_write_str
(0664)    lcd_write_str(4,1,"设置时间");
    0195F EA87      LDI	R24,0xA7
    01960 E097      LDI	R25,7
    01961 8399      STD	Y+1,R25
    01962 8388      ST	Y,R24
    01963 E021      LDI	R18,1
    01964 E004      LDI	R16,4
    01965 940E 084C CALL	_lcd_write_str
(0665)    lcd_write_str(4,2,"重置系统");
    01967 E98E      LDI	R24,0x9E
    01968 E097      LDI	R25,7
    01969 8399      STD	Y+1,R25
    0196A 8388      ST	Y,R24
    0196B E022      LDI	R18,2
    0196C E004      LDI	R16,4
    0196D 940E 084C CALL	_lcd_write_str
(0666)    lcd_write_char(3,0,0xA1);
    0196F EA81      LDI	R24,0xA1
    01970 8388      ST	Y,R24
    01971 2722      CLR	R18
    01972 E003      LDI	R16,3
    01973 940E 0826 CALL	_lcd_write_char
(0667)    lcd_write_char_con(0,0xC1);
    01975 EC21      LDI	R18,0xC1
    01976 2700      CLR	R16
    01977 940E 07F4 CALL	_lcd_write_char_con
(0668)    
(0669)    /* lcd_write_char(1,0,0xA1);
(0670)    lcd_write_char_con(0,0xCC);*/
(0671)    cur=0;
    01979 2744      CLR	R20
    0197A 2755      CLR	R21
(0672)    Set_White(5,0,10);
    0197B E08A      LDI	R24,0xA
    0197C 8388      ST	Y,R24
    0197D 2722      CLR	R18
    0197E E005      LDI	R16,5
    0197F 940E 0A71 CALL	_Set_White
    01981 C0A4      RJMP	0x1A26
(0673)    while(1){
(0674)       keyV=KeyScan_once();
    01982 940E 06E9 CALL	_KeyScan_once
    01984 2F60      MOV	R22,R16
(0675) 	  if(keyV=='u'){
    01985 3705      CPI	R16,0x75
    01986 F539      BNE	0x19AE
(0676) 	    switch(cur){
    01987 3041      CPI	R20,1
    01988 E0E0      LDI	R30,0
    01989 075E      CPC	R21,R30
    0198A F029      BEQ	0x1990
    0198B 3042      CPI	R20,2
    0198C E0E0      LDI	R30,0
    0198D 075E      CPC	R21,R30
    0198E F081      BEQ	0x199F
    0198F C096      RJMP	0x1A26
(0677) 		  case 1:
(0678) 		   Set_White_off(5,1,8);
    01990 E088      LDI	R24,0x8
    01991 8388      ST	Y,R24
    01992 E021      LDI	R18,1
    01993 E005      LDI	R16,5
    01994 940E 0A01 CALL	_Set_White_off
(0679) 		   Set_White(5,0,10);
    01996 E08A      LDI	R24,0xA
    01997 8388      ST	Y,R24
    01998 2722      CLR	R18
    01999 E005      LDI	R16,5
    0199A 940E 0A71 CALL	_Set_White
(0680) 		   cur=0;
    0199C 2744      CLR	R20
    0199D 2755      CLR	R21
(0681) 		   break;
    0199E C087      RJMP	0x1A26
(0682) 		  case 2: 
(0683) 		   Set_White_off(5,2,8);
    0199F E088      LDI	R24,0x8
    019A0 8388      ST	Y,R24
    019A1 E022      LDI	R18,2
    019A2 E005      LDI	R16,5
    019A3 940E 0A01 CALL	_Set_White_off
(0684) 		   Set_White(5,1,8);
    019A5 E088      LDI	R24,0x8
    019A6 8388      ST	Y,R24
    019A7 E021      LDI	R18,1
    019A8 E005      LDI	R16,5
    019A9 940E 0A71 CALL	_Set_White
(0685) 		   cur=1;
    019AB E041      LDI	R20,1
    019AC E050      LDI	R21,0
(0686) 		   break;
(0687) 		}
(0688) 	  }else if(keyV=='d'){
    019AD C078      RJMP	0x1A26
    019AE 3664      CPI	R22,0x64
    019AF F531      BNE	0x19D6
(0689) 	      switch(cur){
    019B0 3040      CPI	R20,0
    019B1 0745      CPC	R20,R21
    019B2 F029      BEQ	0x19B8
    019B3 3041      CPI	R20,1
    019B4 E0E0      LDI	R30,0
    019B5 075E      CPC	R21,R30
    019B6 F081      BEQ	0x19C7
    019B7 C06E      RJMP	0x1A26
(0690) 		  case 0:
(0691) 		   Set_White_off(5,0,10);
    019B8 E08A      LDI	R24,0xA
    019B9 8388      ST	Y,R24
    019BA 2722      CLR	R18
    019BB E005      LDI	R16,5
    019BC 940E 0A01 CALL	_Set_White_off
(0692) 		   Set_White(5,1,8);
    019BE E088      LDI	R24,0x8
    019BF 8388      ST	Y,R24
    019C0 E021      LDI	R18,1
    019C1 E005      LDI	R16,5
    019C2 940E 0A71 CALL	_Set_White
(0693) 		   cur=1;
    019C4 E041      LDI	R20,1
    019C5 E050      LDI	R21,0
(0694) 		   break;
    019C6 C05F      RJMP	0x1A26
(0695) 		  case 1: 
(0696) 		   Set_White_off(5,1,8);
    019C7 E088      LDI	R24,0x8
    019C8 8388      ST	Y,R24
    019C9 E021      LDI	R18,1
    019CA E005      LDI	R16,5
    019CB 940E 0A01 CALL	_Set_White_off
(0697) 		   Set_White(5,2,8);
    019CD E088      LDI	R24,0x8
    019CE 8388      ST	Y,R24
    019CF E022      LDI	R18,2
    019D0 E005      LDI	R16,5
    019D1 940E 0A71 CALL	_Set_White
(0698) 		   cur=2;
    019D3 E042      LDI	R20,2
    019D4 E050      LDI	R21,0
(0699) 		   break;
(0700) 		}
(0701) 	  }else if(keyV=='e'){
    019D5 C050      RJMP	0x1A26
    019D6 3665      CPI	R22,0x65
    019D7 F539      BNE	0x19FF
(0702) 	     switch(cur){
    019D8 3040      CPI	R20,0
    019D9 0745      CPC	R20,R21
    019DA F049      BEQ	0x19E4
    019DB 3041      CPI	R20,1
    019DC E0E0      LDI	R30,0
    019DD 075E      CPC	R21,R30
    019DE F061      BEQ	0x19EB
    019DF 3042      CPI	R20,2
    019E0 E0E0      LDI	R30,0
    019E1 075E      CPC	R21,R30
    019E2 F079      BEQ	0x19F2
    019E3 C014      RJMP	0x19F8
(0703) 		 case 0: 
(0704) 		   Set_White_off(5,0,10);
    019E4 E08A      LDI	R24,0xA
    019E5 8388      ST	Y,R24
    019E6 2722      CLR	R18
    019E7 E005      LDI	R16,5
    019E8 940E 0A01 CALL	_Set_White_off
(0705) 		    break;
    019EA C00D      RJMP	0x19F8
(0706) 		 case 1:
(0707) 		   Set_White_off(5,1,8);
    019EB E088      LDI	R24,0x8
    019EC 8388      ST	Y,R24
    019ED E021      LDI	R18,1
    019EE E005      LDI	R16,5
    019EF 940E 0A01 CALL	_Set_White_off
(0708) 		   break;
    019F1 C006      RJMP	0x19F8
(0709) 		 case 2:
(0710) 		  Set_White_off(5,2,8);
    019F2 E088      LDI	R24,0x8
    019F3 8388      ST	Y,R24
    019F4 E022      LDI	R18,2
    019F5 E005      LDI	R16,5
    019F6 940E 0A01 CALL	_Set_White_off
(0711) 		  break;
(0712) 	
(0713) 		  default:
(0714) 		   break;
(0715) 		 }
(0716) 	    pageNum=1;
    019F8 E081      LDI	R24,1
    019F9 E090      LDI	R25,0
    019FA 9390 0D75 STS	pageNum+1,R25
    019FC 9380 0D74 STS	pageNum,R24
(0717) 		return;
    019FE C028      RJMP	0x1A27
(0718) 	  }else if(keyV=='t'){
    019FF 3764      CPI	R22,0x74
    01A00 F529      BNE	0x1A26
(0719) 	    switch(cur){
    01A01 3040      CPI	R20,0
    01A02 0745      CPC	R20,R21
    01A03 F111      BEQ	0x1A26
    01A04 3041      CPI	R20,1
    01A05 E0E0      LDI	R30,0
    01A06 075E      CPC	R21,R30
    01A07 F029      BEQ	0x1A0D
    01A08 3042      CPI	R20,2
    01A09 E0E0      LDI	R30,0
    01A0A 075E      CPC	R21,R30
    01A0B F069      BEQ	0x1A19
    01A0C C019      RJMP	0x1A26
(0720) 		  case 0:
(0721) 		     //执行EEPROM操作
(0722) 		    break;
(0723) 		  case 1:
(0724) 		   pageNum=8;
    01A0D E088      LDI	R24,0x8
    01A0E E090      LDI	R25,0
    01A0F 9390 0D75 STS	pageNum+1,R25
    01A11 9380 0D74 STS	pageNum,R24
(0725) 		   Set_White_off(5,1,8);
    01A13 8388      ST	Y,R24
    01A14 E021      LDI	R18,1
    01A15 E005      LDI	R16,5
    01A16 940E 0A01 CALL	_Set_White_off
(0726) 		   return;
    01A18 C00E      RJMP	0x1A27
(0727) 		  
(0728) 		  case 2:
(0729) 		    pageNum=7;
    01A19 E087      LDI	R24,7
    01A1A E090      LDI	R25,0
    01A1B 9390 0D75 STS	pageNum+1,R25
    01A1D 9380 0D74 STS	pageNum,R24
(0730) 		    Set_White_off(5,2,8);
    01A1F E088      LDI	R24,0x8
    01A20 8388      ST	Y,R24
    01A21 E022      LDI	R18,2
    01A22 E005      LDI	R16,5
    01A23 940E 0A01 CALL	_Set_White_off
(0731) 		   return;
    01A25 C001      RJMP	0x1A27
    01A26 CF5B      RJMP	0x1982
    01A27 9622      ADIW	R28,2
    01A28 940C 1E1F JMP	pop_xgsetF000
_page6:
    01A2A 9722      SBIW	R28,2
(0732) 		}
(0733) 	    
(0734) 	  }
(0735)    }
(0736)    
(0737)  }
(0738)  void page6(void){//复用的方法
(0739)  if(pageParam[1]==0){
    01A2B 9020 0D6C LDS	R2,pageParam+2
    01A2D 9030 0D6D LDS	R3,pageParam+3
    01A2F 2022      TST	R2
    01A30 F459      BNE	0x1A3C
    01A31 2033      TST	R3
    01A32 F449      BNE	0x1A3C
(0740)      lcd_write_str(4,1,"时间保存成功！");
    01A33 E88F      LDI	R24,0x8F
    01A34 E097      LDI	R25,7
    01A35 8399      STD	Y+1,R25
    01A36 8388      ST	Y,R24
    01A37 E021      LDI	R18,1
    01A38 E004      LDI	R16,4
    01A39 940E 084C CALL	_lcd_write_str
(0741)    }else if(pageParam[1]==1){
    01A3B C021      RJMP	0x1A5D
    01A3C 9180 0D6C LDS	R24,pageParam+2
    01A3E 9190 0D6D LDS	R25,pageParam+3
    01A40 3081      CPI	R24,1
    01A41 E0E0      LDI	R30,0
    01A42 079E      CPC	R25,R30
    01A43 F449      BNE	0x1A4D
(0742)      lcd_write_str(4,1,"温度保存成功！");
    01A44 E880      LDI	R24,0x80
    01A45 E097      LDI	R25,7
    01A46 8399      STD	Y+1,R25
    01A47 8388      ST	Y,R24
    01A48 E021      LDI	R18,1
    01A49 E004      LDI	R16,4
    01A4A 940E 084C CALL	_lcd_write_str
(0743)    }else if(pageParam[1]==2){
    01A4C C010      RJMP	0x1A5D
    01A4D 9180 0D6C LDS	R24,pageParam+2
    01A4F 9190 0D6D LDS	R25,pageParam+3
    01A51 3082      CPI	R24,2
    01A52 E0E0      LDI	R30,0
    01A53 079E      CPC	R25,R30
    01A54 F441      BNE	0x1A5D
(0744)      lcd_write_str(4,1,"温度保存失败！");
    01A55 E781      LDI	R24,0x71
    01A56 E097      LDI	R25,7
    01A57 8399      STD	Y+1,R25
    01A58 8388      ST	Y,R24
    01A59 E021      LDI	R18,1
    01A5A E004      LDI	R16,4
    01A5B 940E 084C CALL	_lcd_write_str
(0745)    }
(0746)    delay_ms(500);
    01A5D EF04      LDI	R16,0xF4
    01A5E E011      LDI	R17,1
    01A5F 940E 044D CALL	_delay_ms
(0747)    pageNum=prePageNum;
    01A61 9020 0D68 LDS	R2,prePageNum
    01A63 9030 0D69 LDS	R3,prePageNum+1
    01A65 9230 0D75 STS	pageNum+1,R3
    01A67 9220 0D74 STS	pageNum,R2
    01A69 9622      ADIW	R28,2
    01A6A 9508      RET
_page7:
  cur                  --> R20
  keyV                 --> R10
    01A6B 940E 1E24 CALL	push_xgsetF00C
    01A6D 9722      SBIW	R28,2
(0748)  }
(0749)  void page7(void){
(0750)    uint cur=1;
    01A6E E041      LDI	R20,1
    01A6F E050      LDI	R21,0
(0751)    uchar keyV;
(0752)    lcd_write_str(2,0,"是否重置");
    01A70 E688      LDI	R24,0x68
    01A71 E097      LDI	R25,7
    01A72 8399      STD	Y+1,R25
    01A73 8388      ST	Y,R24
    01A74 2722      CLR	R18
    01A75 E002      LDI	R16,2
    01A76 940E 084C CALL	_lcd_write_str
(0753)    lcd_write_str(2,2,"确认");
    01A78 E683      LDI	R24,0x63
    01A79 E097      LDI	R25,7
    01A7A 8399      STD	Y+1,R25
    01A7B 8388      ST	Y,R24
    01A7C E022      LDI	R18,2
    01A7D E002      LDI	R16,2
    01A7E 940E 084C CALL	_lcd_write_str
(0754)    lcd_write_str(8,2,"取消");
    01A80 E388      LDI	R24,0x38
    01A81 E098      LDI	R25,0x8
    01A82 8399      STD	Y+1,R25
    01A83 8388      ST	Y,R24
    01A84 E022      LDI	R18,2
    01A85 E008      LDI	R16,0x8
    01A86 940E 084C CALL	_lcd_write_str
(0755)    Set_White(9,2,10);
    01A88 E08A      LDI	R24,0xA
    01A89 8388      ST	Y,R24
    01A8A E022      LDI	R18,2
    01A8B E009      LDI	R16,0x9
    01A8C 940E 0A71 CALL	_Set_White
    01A8E C074      RJMP	0x1B03
(0756)     while(1){
(0757)       keyV=KeyScan_once();
    01A8F 940E 06E9 CALL	_KeyScan_once
    01A91 2EA0      MOV	R10,R16
(0758) 	  switch(keyV){
    01A92 2D6A      MOV	R22,R10
    01A93 2777      CLR	R23
    01A94 366C      CPI	R22,0x6C
    01A95 E0E0      LDI	R30,0
    01A96 077E      CPC	R23,R30
    01A97 F0A1      BEQ	0x1AAC
    01A98 E68C      LDI	R24,0x6C
    01A99 E090      LDI	R25,0
    01A9A 1786      CP	R24,R22
    01A9B 0797      CPC	R25,R23
    01A9C F034      BLT	0x1AA3
    01A9D 3665      CPI	R22,0x65
    01A9E E0E0      LDI	R30,0
    01A9F 077E      CPC	R23,R30
    01AA0 F409      BNE	0x1AA2
    01AA1 C04E      RJMP	0x1AF0
    01AA2 C060      RJMP	0x1B03
    01AA3 3762      CPI	R22,0x72
    01AA4 E0E0      LDI	R30,0
    01AA5 077E      CPC	R23,R30
    01AA6 F0C9      BEQ	0x1AC0
    01AA7 3764      CPI	R22,0x74
    01AA8 E0E0      LDI	R30,0
    01AA9 077E      CPC	R23,R30
    01AAA F141      BEQ	0x1AD3
    01AAB C057      RJMP	0x1B03
(0759) 	    case 'l':
(0760) 		   if(cur==1){
    01AAC 3041      CPI	R20,1
    01AAD E0E0      LDI	R30,0
    01AAE 075E      CPC	R21,R30
    01AAF F009      BEQ	0x1AB1
    01AB0 C052      RJMP	0x1B03
(0761) 		      Set_White_off(9,2,10);
    01AB1 E08A      LDI	R24,0xA
    01AB2 8388      ST	Y,R24
    01AB3 E022      LDI	R18,2
    01AB4 E009      LDI	R16,0x9
    01AB5 940E 0A01 CALL	_Set_White_off
(0762) 		      Set_White(3,2,4);
    01AB7 E084      LDI	R24,4
    01AB8 8388      ST	Y,R24
    01AB9 E022      LDI	R18,2
    01ABA E003      LDI	R16,3
    01ABB 940E 0A71 CALL	_Set_White
(0763) 			  cur=0;
    01ABD 2744      CLR	R20
    01ABE 2755      CLR	R21
(0764) 		   }
(0765) 		   break;
    01ABF C043      RJMP	0x1B03
(0766) 		case 'r':
(0767) 		   if(cur==0){
    01AC0 3040      CPI	R20,0
    01AC1 0745      CPC	R20,R21
    01AC2 F009      BEQ	0x1AC4
    01AC3 C03F      RJMP	0x1B03
(0768) 		      Set_White_off(3,2,4);
    01AC4 E084      LDI	R24,4
    01AC5 8388      ST	Y,R24
    01AC6 E022      LDI	R18,2
    01AC7 E003      LDI	R16,3
    01AC8 940E 0A01 CALL	_Set_White_off
(0769) 		      Set_White(9,2,10);
    01ACA E08A      LDI	R24,0xA
    01ACB 8388      ST	Y,R24
    01ACC E022      LDI	R18,2
    01ACD E009      LDI	R16,0x9
    01ACE 940E 0A71 CALL	_Set_White
(0770) 			  cur=1;
    01AD0 E041      LDI	R20,1
    01AD1 E050      LDI	R21,0
(0771) 		   }
(0772) 		  break;
    01AD2 C030      RJMP	0x1B03
(0773) 		case 't':
(0774) 		  //执行相关操作	  
(0775) 		  if(cur==0){
    01AD3 3040      CPI	R20,0
    01AD4 0745      CPC	R20,R21
    01AD5 F469      BNE	0x1AE3
(0776) 		     Set_White_off(3,2,4);
    01AD6 E084      LDI	R24,4
    01AD7 8388      ST	Y,R24
    01AD8 E022      LDI	R18,2
    01AD9 E003      LDI	R16,3
    01ADA 940E 0A01 CALL	_Set_White_off
(0777) 			 
(0778) 		       //进入重置画面。在Page9启动看门狗重置系统、不喂狗
(0779) 		       pageNum=9;
    01ADC E089      LDI	R24,0x9
    01ADD E090      LDI	R25,0
    01ADE 9390 0D75 STS	pageNum+1,R25
    01AE0 9380 0D74 STS	pageNum,R24
(0780) 		  }else {
    01AE2 C021      RJMP	0x1B04
(0781) 		      Set_White_off(9,2,10);
    01AE3 E08A      LDI	R24,0xA
    01AE4 8388      ST	Y,R24
    01AE5 E022      LDI	R18,2
    01AE6 E009      LDI	R16,0x9
    01AE7 940E 0A01 CALL	_Set_White_off
(0782) 		       pageNum=5;
    01AE9 E085      LDI	R24,5
    01AEA E090      LDI	R25,0
    01AEB 9390 0D75 STS	pageNum+1,R25
    01AED 9380 0D74 STS	pageNum,R24
(0783) 		  }
(0784) 		  return;
    01AEF C014      RJMP	0x1B04
(0785) 		 case 'e':
(0786) 		    Set_White_off(3,2,4);
    01AF0 E084      LDI	R24,4
    01AF1 8388      ST	Y,R24
    01AF2 E022      LDI	R18,2
    01AF3 E003      LDI	R16,3
    01AF4 940E 0A01 CALL	_Set_White_off
(0787) 		    Set_White_off(9,2,10);
    01AF6 E08A      LDI	R24,0xA
    01AF7 8388      ST	Y,R24
    01AF8 E022      LDI	R18,2
    01AF9 E009      LDI	R16,0x9
    01AFA 940E 0A01 CALL	_Set_White_off
(0788) 		    pageNum=5;
    01AFC E085      LDI	R24,5
    01AFD E090      LDI	R25,0
    01AFE 9390 0D75 STS	pageNum+1,R25
    01B00 9380 0D74 STS	pageNum,R24
(0789) 		    return;
    01B02 C001      RJMP	0x1B04
    01B03 CF8B      RJMP	0x1A8F
    01B04 9622      ADIW	R28,2
    01B05 940C 1E2B JMP	pop_xgsetF00C
_page8:
  dateAc               --> Y,+17
  keyV                 --> R22
  cur                  --> R20
  date                 --> Y,+2
  i                    --> R22
    01B07 940E 1E1A CALL	push_xgsetF000
    01B09 97AD      SBIW	R28,0x2D
(0790) 	  }
(0791) 	}
(0792)  }
(0793)  //由于使用DS1307，暂时不做读取和保存时间的。等实时时钟模块买来
(0794)  void page8(void){
(0795)    uint cur=0;
    01B0A 2744      CLR	R20
    01B0B 2755      CLR	R21
(0796)    uchar keyV;
(0797)    uchar date[15];
(0798)    uint i;
(0799)     uint dateAc[14]={1,2,3,4,6,7,9,10,2,3,5,6,8,9};
    01B0C E18F      LDI	R24,0x1F
    01B0D E097      LDI	R25,7
    01B0E 01FE      MOVW	R30,R28
    01B0F 9671      ADIW	R30,0x11
    01B10 E10C      LDI	R16,0x1C
    01B11 E010      LDI	R17,0
    01B12 93FA      ST	-Y,R31
    01B13 93EA      ST	-Y,R30
    01B14 939A      ST	-Y,R25
    01B15 938A      ST	-Y,R24
    01B16 940E 1E5F CALL	asgnblk
(0800) 	
(0801)    date[0]=2;
    01B18 E082      LDI	R24,2
    01B19 838A      STD	Y+2,R24
(0802)    date[1]=0;
    01B1A 2422      CLR	R2
    01B1B 822B      STD	Y+3,R2
(0803)    date[2]=1;
    01B1C E081      LDI	R24,1
    01B1D 838C      STD	Y+4,R24
(0804)    date[3]=5;
    01B1E E085      LDI	R24,5
    01B1F 838D      STD	Y+5,R24
(0805)    date[4]=1;
    01B20 E081      LDI	R24,1
    01B21 838E      STD	Y+6,R24
(0806)    date[5]=2;
    01B22 E082      LDI	R24,2
    01B23 838F      STD	Y+7,R24
(0807)    date[6]=2;
    01B24 8788      STD	Y+8,R24
(0808)    date[7]=5;
    01B25 E085      LDI	R24,5
    01B26 8789      STD	Y+9,R24
(0809)    date[8]=1;
    01B27 E081      LDI	R24,1
    01B28 878A      STD	Y+10,R24
(0810)    date[9]=2;
    01B29 E082      LDI	R24,2
    01B2A 878B      STD	Y+11,R24
(0811)    date[10]=3;
    01B2B E083      LDI	R24,3
    01B2C 878C      STD	Y+12,R24
(0812)    date[11]=0;
    01B2D 862D      STD	Y+13,R2
(0813)    date[12]=5;
    01B2E E085      LDI	R24,5
    01B2F 878E      STD	Y+14,R24
(0814)    date[13]=0;
    01B30 862F      STD	Y+15,R2
(0815)     lcd_write_pos(1,0);
    01B31 2722      CLR	R18
    01B32 E001      LDI	R16,1
    01B33 940E 0808 CALL	_lcd_write_pos
(0816)   for(i=0;i<8;i++){
    01B35 2766      CLR	R22
    01B36 2777      CLR	R23
    01B37 C01D      RJMP	0x1B55
(0817)    lcd_write_char_con(0,0x30 | date[i]);
    01B38 01CE      MOVW	R24,R28
    01B39 9602      ADIW	R24,2
    01B3A 01FB      MOVW	R30,R22
    01B3B 0FE8      ADD	R30,R24
    01B3C 1FF9      ADC	R31,R25
    01B3D 8120      LD	R18,Z
    01B3E 6320      ORI	R18,0x30
    01B3F 2700      CLR	R16
    01B40 940E 07F4 CALL	_lcd_write_char_con
(0818)     lcd_write_char_con(0,' ');
    01B42 E220      LDI	R18,0x20
    01B43 2700      CLR	R16
    01B44 940E 07F4 CALL	_lcd_write_char_con
(0819) 	if(i==3 || i==5){
    01B46 3063      CPI	R22,3
    01B47 E0E0      LDI	R30,0
    01B48 077E      CPC	R23,R30
    01B49 F021      BEQ	0x1B4E
    01B4A 3065      CPI	R22,5
    01B4B E0E0      LDI	R30,0
    01B4C 077E      CPC	R23,R30
    01B4D F429      BNE	0x1B53
(0820) 	  lcd_write_str_con(0,"- ");
    01B4E E620      LDI	R18,0x60
    01B4F E037      LDI	R19,7
    01B50 2700      CLR	R16
    01B51 940E 0896 CALL	_lcd_write_str_con
    01B53 5F6F      SUBI	R22,0xFF
    01B54 4F7F      SBCI	R23,0xFF
    01B55 3068      CPI	R22,0x8
    01B56 E0E0      LDI	R30,0
    01B57 077E      CPC	R23,R30
    01B58 F2F8      BCS	0x1B38
(0821) 	}
(0822)   }
(0823)    lcd_write_pos(2,1);
    01B59 E021      LDI	R18,1
    01B5A E002      LDI	R16,2
    01B5B 940E 0808 CALL	_lcd_write_pos
(0824)    for(i=8;i<14;i++){
    01B5D E068      LDI	R22,0x8
    01B5E E070      LDI	R23,0
    01B5F C01D      RJMP	0x1B7D
(0825)    lcd_write_char_con(1,0x30 | date[i]);
    01B60 01CE      MOVW	R24,R28
    01B61 9602      ADIW	R24,2
    01B62 01FB      MOVW	R30,R22
    01B63 0FE8      ADD	R30,R24
    01B64 1FF9      ADC	R31,R25
    01B65 8120      LD	R18,Z
    01B66 6320      ORI	R18,0x30
    01B67 E001      LDI	R16,1
    01B68 940E 07F4 CALL	_lcd_write_char_con
(0826)    lcd_write_char_con(0,' ');
    01B6A E220      LDI	R18,0x20
    01B6B 2700      CLR	R16
    01B6C 940E 07F4 CALL	_lcd_write_char_con
(0827)    if(i==9 || i==11){
    01B6E 3069      CPI	R22,0x9
    01B6F E0E0      LDI	R30,0
    01B70 077E      CPC	R23,R30
    01B71 F021      BEQ	0x1B76
    01B72 306B      CPI	R22,0xB
    01B73 E0E0      LDI	R30,0
    01B74 077E      CPC	R23,R30
    01B75 F429      BNE	0x1B7B
(0828) 	 lcd_write_str_con(0,": ");
    01B76 E52D      LDI	R18,0x5D
    01B77 E037      LDI	R19,7
    01B78 2700      CLR	R16
    01B79 940E 0896 CALL	_lcd_write_str_con
    01B7B 5F6F      SUBI	R22,0xFF
    01B7C 4F7F      SBCI	R23,0xFF
    01B7D 306E      CPI	R22,0xE
    01B7E E0E0      LDI	R30,0
    01B7F 077E      CPC	R23,R30
    01B80 F2F8      BCS	0x1B60
(0829)    }
(0830)   } 
(0831)    lcd_write_str(3,2,"保存");
    01B81 EF85      LDI	R24,0xF5
    01B82 E097      LDI	R25,7
    01B83 8399      STD	Y+1,R25
    01B84 8388      ST	Y,R24
    01B85 E022      LDI	R18,2
    01B86 E003      LDI	R16,3
    01B87 940E 084C CALL	_lcd_write_str
(0832)    lcd_write_str(8,2,"取消");
    01B89 E388      LDI	R24,0x38
    01B8A E098      LDI	R25,0x8
    01B8B 8399      STD	Y+1,R25
    01B8C 8388      ST	Y,R24
    01B8D E022      LDI	R18,2
    01B8E E008      LDI	R16,0x8
    01B8F 940E 084C CALL	_lcd_write_str
(0833)    //初始化date
(0834)   
(0835)    cur=0;
    01B91 2744      CLR	R20
    01B92 2755      CLR	R21
(0836)    lcd_write_pos(1,0);//初始游标位置
    01B93 2722      CLR	R18
    01B94 E001      LDI	R16,1
    01B95 940E 0808 CALL	_lcd_write_pos
(0837)    cur_set(3);//上半屏幕游标设置
    01B97 E003      LDI	R16,3
    01B98 E010      LDI	R17,0
    01B99 940E 09BD CALL	_cur_set
    01B9B C18A      RJMP	0x1D26
(0838)    while(1){
(0839)      pageTime(3);//
    01B9C E003      LDI	R16,3
    01B9D E010      LDI	R17,0
    01B9E 940E 105E CALL	_pageTime
(0840) 	 keyV=KeyScan_once();
    01BA0 940E 06E9 CALL	_KeyScan_once
    01BA2 2F60      MOV	R22,R16
(0841) 	 if(keyV=='u'){
    01BA3 3705      CPI	R16,0x75
    01BA4 F571      BNE	0x1BD3
(0842) 	   if(cur>13){//调到时间第一个
    01BA5 E08D      LDI	R24,0xD
    01BA6 E090      LDI	R25,0
    01BA7 1784      CP	R24,R20
    01BA8 0795      CPC	R25,R21
    01BA9 F4B8      BCC	0x1BC1
(0843) 	        Set_White_off(4,2,5);
    01BAA E085      LDI	R24,5
    01BAB 8388      ST	Y,R24
    01BAC E022      LDI	R18,2
    01BAD E004      LDI	R16,4
    01BAE 940E 0A01 CALL	_Set_White_off
(0844) 			Set_White_off(9,2,10);
    01BB0 E08A      LDI	R24,0xA
    01BB1 8388      ST	Y,R24
    01BB2 E022      LDI	R18,2
    01BB3 E009      LDI	R16,0x9
    01BB4 940E 0A01 CALL	_Set_White_off
(0845) 	        lcd_write_pos(2,1);
    01BB6 E021      LDI	R18,1
    01BB7 E002      LDI	R16,2
    01BB8 940E 0808 CALL	_lcd_write_pos
(0846) 		    cur_set(3);
    01BBA E003      LDI	R16,3
    01BBB E010      LDI	R17,0
    01BBC 940E 09BD CALL	_cur_set
(0847) 			cur=8; 
    01BBE E048      LDI	R20,0x8
    01BBF E050      LDI	R21,0
(0848) 		   }else if(cur>7 && cur <14){//调到日期第一个
    01BC0 C165      RJMP	0x1D26
    01BC1 E087      LDI	R24,7
    01BC2 E090      LDI	R25,0
    01BC3 1784      CP	R24,R20
    01BC4 0795      CPC	R25,R21
    01BC5 F008      BCS	0x1BC7
    01BC6 C15F      RJMP	0x1D26
    01BC7 304E      CPI	R20,0xE
    01BC8 E0E0      LDI	R30,0
    01BC9 075E      CPC	R21,R30
    01BCA F008      BCS	0x1BCC
    01BCB C15A      RJMP	0x1D26
(0849) 		    lcd_write_pos(1,0);
    01BCC 2722      CLR	R18
    01BCD E001      LDI	R16,1
    01BCE 940E 0808 CALL	_lcd_write_pos
(0850) 			cur=0; 
    01BD0 2744      CLR	R20
    01BD1 2755      CLR	R21
(0851) 		   }
(0852) 	 }else if(keyV=='d'){
    01BD2 C153      RJMP	0x1D26
    01BD3 3664      CPI	R22,0x64
    01BD4 F519      BNE	0x1BF8
(0853) 	     if(cur>7 && cur <14){//在时间上，第三行，默认要保存，所以调到保存上
    01BD5 E087      LDI	R24,7
    01BD6 E090      LDI	R25,0
    01BD7 1784      CP	R24,R20
    01BD8 0795      CPC	R25,R21
    01BD9 F488      BCC	0x1BEB
    01BDA 304E      CPI	R20,0xE
    01BDB E0E0      LDI	R30,0
    01BDC 075E      CPC	R21,R30
    01BDD F468      BCC	0x1BEB
(0854) 		      cur_set(0);//关下半屏幕游标
    01BDE 2700      CLR	R16
    01BDF 2711      CLR	R17
    01BE0 940E 09BD CALL	_cur_set
(0855) 			  Set_White(4,2,5);
    01BE2 E085      LDI	R24,5
    01BE3 8388      ST	Y,R24
    01BE4 E022      LDI	R18,2
    01BE5 E004      LDI	R16,4
    01BE6 940E 0A71 CALL	_Set_White
(0856) 			  cur=14;
    01BE8 E04E      LDI	R20,0xE
    01BE9 E050      LDI	R21,0
(0857) 		 }else if(cur<=7){ //调到时间第一个
    01BEA C13B      RJMP	0x1D26
    01BEB E087      LDI	R24,7
    01BEC E090      LDI	R25,0
    01BED 1784      CP	R24,R20
    01BEE 0795      CPC	R25,R21
    01BEF F408      BCC	0x1BF1
    01BF0 C135      RJMP	0x1D26
(0858) 		    lcd_write_pos(2,1);
    01BF1 E021      LDI	R18,1
    01BF2 E002      LDI	R16,2
    01BF3 940E 0808 CALL	_lcd_write_pos
(0859) 			cur=8; 
    01BF5 E048      LDI	R20,0x8
    01BF6 E050      LDI	R21,0
(0860) 		 }
(0861) 	 }else if(keyV=='l'){
    01BF7 C12E      RJMP	0x1D26
    01BF8 366C      CPI	R22,0x6C
    01BF9 F009      BEQ	0x1BFB
    01BFA C043      RJMP	0x1C3E
(0862) 			if(cur<=8 && cur>0){
    01BFB E088      LDI	R24,0x8
    01BFC E090      LDI	R25,0
    01BFD 1784      CP	R24,R20
    01BFE 0795      CPC	R25,R21
    01BFF F090      BCS	0x1C12
    01C00 3040      CPI	R20,0
    01C01 0745      CPC	R20,R21
    01C02 F079      BEQ	0x1C12
(0863) 			 cur--;
    01C03 5041      SUBI	R20,1
    01C04 4050      SBCI	R21,0
(0864) 			 lcd_write_pos(dateAc[cur],0);
    01C05 2722      CLR	R18
    01C06 01CE      MOVW	R24,R28
    01C07 9641      ADIW	R24,0x11
    01C08 01FA      MOVW	R30,R20
    01C09 0FEE      LSL	R30
    01C0A 1FFF      ROL	R31
    01C0B 0FE8      ADD	R30,R24
    01C0C 1FF9      ADC	R31,R25
    01C0D 8100      LD	R16,Z
    01C0E 8111      LDD	R17,Z+1
    01C0F 940E 0808 CALL	_lcd_write_pos
(0865) 			}else if (cur>8 && cur<14){
    01C11 C114      RJMP	0x1D26
    01C12 E088      LDI	R24,0x8
    01C13 E090      LDI	R25,0
    01C14 1784      CP	R24,R20
    01C15 0795      CPC	R25,R21
    01C16 F498      BCC	0x1C2A
    01C17 304E      CPI	R20,0xE
    01C18 E0E0      LDI	R30,0
    01C19 075E      CPC	R21,R30
    01C1A F478      BCC	0x1C2A
(0866) 			 cur--;
    01C1B 5041      SUBI	R20,1
    01C1C 4050      SBCI	R21,0
(0867) 			 lcd_write_pos(dateAc[cur],1);
    01C1D E021      LDI	R18,1
    01C1E 01CE      MOVW	R24,R28
    01C1F 9641      ADIW	R24,0x11
    01C20 01FA      MOVW	R30,R20
    01C21 0FEE      LSL	R30
    01C22 1FFF      ROL	R31
    01C23 0FE8      ADD	R30,R24
    01C24 1FF9      ADC	R31,R25
    01C25 8100      LD	R16,Z
    01C26 8111      LDD	R17,Z+1
    01C27 940E 0808 CALL	_lcd_write_pos
(0868) 			}else if (cur==15){
    01C29 C0FC      RJMP	0x1D26
    01C2A 304F      CPI	R20,0xF
    01C2B E0E0      LDI	R30,0
    01C2C 075E      CPC	R21,R30
    01C2D F009      BEQ	0x1C2F
    01C2E C0F7      RJMP	0x1D26
(0869) 			    Set_White_off(9,2,10);
    01C2F E08A      LDI	R24,0xA
    01C30 8388      ST	Y,R24
    01C31 E022      LDI	R18,2
    01C32 E009      LDI	R16,0x9
    01C33 940E 0A01 CALL	_Set_White_off
(0870) 			    Set_White(4,2,5);
    01C35 E085      LDI	R24,5
    01C36 8388      ST	Y,R24
    01C37 E022      LDI	R18,2
    01C38 E004      LDI	R16,4
    01C39 940E 0A71 CALL	_Set_White
(0871) 				cur=14;
    01C3B E04E      LDI	R20,0xE
    01C3C E050      LDI	R21,0
(0872) 			}
(0873) 			
(0874) 		
(0875) 	 }else if(keyV=='r'){
    01C3D C0E8      RJMP	0x1D26
    01C3E 3762      CPI	R22,0x72
    01C3F F009      BEQ	0x1C41
    01C40 C03A      RJMP	0x1C7B
(0876) 	       if(cur<7){
    01C41 3047      CPI	R20,7
    01C42 E0E0      LDI	R30,0
    01C43 075E      CPC	R21,R30
    01C44 F478      BCC	0x1C54
(0877) 			   cur++;
    01C45 5F4F      SUBI	R20,0xFF
    01C46 4F5F      SBCI	R21,0xFF
(0878) 			   lcd_write_pos(dateAc[cur],0);
    01C47 2722      CLR	R18
    01C48 01CE      MOVW	R24,R28
    01C49 9641      ADIW	R24,0x11
    01C4A 01FA      MOVW	R30,R20
    01C4B 0FEE      LSL	R30
    01C4C 1FFF      ROL	R31
    01C4D 0FE8      ADD	R30,R24
    01C4E 1FF9      ADC	R31,R25
    01C4F 8100      LD	R16,Z
    01C50 8111      LDD	R17,Z+1
    01C51 940E 0808 CALL	_lcd_write_pos
(0879) 			}else if (cur<13){
    01C53 C0D2      RJMP	0x1D26
    01C54 304D      CPI	R20,0xD
    01C55 E0E0      LDI	R30,0
    01C56 075E      CPC	R21,R30
    01C57 F478      BCC	0x1C67
(0880) 			   cur++;
    01C58 5F4F      SUBI	R20,0xFF
    01C59 4F5F      SBCI	R21,0xFF
(0881) 			   lcd_write_pos(dateAc[cur],1);
    01C5A E021      LDI	R18,1
    01C5B 01CE      MOVW	R24,R28
    01C5C 9641      ADIW	R24,0x11
    01C5D 01FA      MOVW	R30,R20
    01C5E 0FEE      LSL	R30
    01C5F 1FFF      ROL	R31
    01C60 0FE8      ADD	R30,R24
    01C61 1FF9      ADC	R31,R25
    01C62 8100      LD	R16,Z
    01C63 8111      LDD	R17,Z+1
    01C64 940E 0808 CALL	_lcd_write_pos
(0882) 			}else if (cur==14){
    01C66 C0BF      RJMP	0x1D26
    01C67 304E      CPI	R20,0xE
    01C68 E0E0      LDI	R30,0
    01C69 075E      CPC	R21,R30
    01C6A F009      BEQ	0x1C6C
    01C6B C0BA      RJMP	0x1D26
(0883) 			    Set_White_off(4,2,5);
    01C6C E085      LDI	R24,5
    01C6D 8388      ST	Y,R24
    01C6E E022      LDI	R18,2
    01C6F E004      LDI	R16,4
    01C70 940E 0A01 CALL	_Set_White_off
(0884) 				Set_White(9,2,10);
    01C72 E08A      LDI	R24,0xA
    01C73 8388      ST	Y,R24
    01C74 E022      LDI	R18,2
    01C75 E009      LDI	R16,0x9
    01C76 940E 0A71 CALL	_Set_White
(0885) 				cur=15;
    01C78 E04F      LDI	R20,0xF
    01C79 E050      LDI	R21,0
(0886) 			}
(0887) 	 }else if(keyV=='e'){
    01C7A C0AB      RJMP	0x1D26
    01C7B 3665      CPI	R22,0x65
    01C7C F4B9      BNE	0x1C94
(0888) 	     cur_set(0);//关上半屏幕游标
    01C7D 2700      CLR	R16
    01C7E 2711      CLR	R17
    01C7F 940E 09BD CALL	_cur_set
(0889) 		  Set_White_off(4,2,5);
    01C81 E085      LDI	R24,5
    01C82 8388      ST	Y,R24
    01C83 E022      LDI	R18,2
    01C84 E004      LDI	R16,4
    01C85 940E 0A01 CALL	_Set_White_off
(0890) 		  Set_White_off(9,2,10);
    01C87 E08A      LDI	R24,0xA
    01C88 8388      ST	Y,R24
    01C89 E022      LDI	R18,2
    01C8A E009      LDI	R16,0x9
    01C8B 940E 0A01 CALL	_Set_White_off
(0891) 		 pageNum=1;
    01C8D E081      LDI	R24,1
    01C8E E090      LDI	R25,0
    01C8F 9390 0D75 STS	pageNum+1,R25
    01C91 9380 0D74 STS	pageNum,R24
(0892) 		 return;
    01C93 C093      RJMP	0x1D27
(0893) 	     //退出界面
(0894) 	 }else if(keyV=='t'){
    01C94 3764      CPI	R22,0x74
    01C95 F591      BNE	0x1CC8
(0895) 	      if(cur==14){
    01C96 304E      CPI	R20,0xE
    01C97 E0E0      LDI	R30,0
    01C98 075E      CPC	R21,R30
    01C99 F491      BNE	0x1CAC
(0896) 		        //保存操作
(0897) 				pageParam[1]=0;//标记是时间的保存
    01C9A 2422      CLR	R2
    01C9B 2433      CLR	R3
    01C9C 9230 0D6D STS	pageParam+3,R3
    01C9E 9220 0D6C STS	pageParam+2,R2
(0898) 				prePageNum=8;
    01CA0 E088      LDI	R24,0x8
    01CA1 E090      LDI	R25,0
    01CA2 9390 0D69 STS	prePageNum+1,R25
    01CA4 9380 0D68 STS	prePageNum,R24
(0899) 				pageNum=6;
    01CA6 E086      LDI	R24,6
    01CA7 9390 0D75 STS	pageNum+1,R25
    01CA9 9380 0D74 STS	pageNum,R24
(0900) 				return;
    01CAB C07B      RJMP	0x1D27
(0901) 		 }else if(cur==15){
    01CAC 304F      CPI	R20,0xF
    01CAD E0E0      LDI	R30,0
    01CAE 075E      CPC	R21,R30
    01CAF F009      BEQ	0x1CB1
    01CB0 C075      RJMP	0x1D26
(0902) 		        //取消操作
(0903) 			 cur_set(0);//关上半屏幕游标
    01CB1 2700      CLR	R16
    01CB2 2711      CLR	R17
    01CB3 940E 09BD CALL	_cur_set
(0904) 		  Set_White_off(4,2,5);
    01CB5 E085      LDI	R24,5
    01CB6 8388      ST	Y,R24
    01CB7 E022      LDI	R18,2
    01CB8 E004      LDI	R16,4
    01CB9 940E 0A01 CALL	_Set_White_off
(0905) 		  Set_White_off(9,2,10);
    01CBB E08A      LDI	R24,0xA
    01CBC 8388      ST	Y,R24
    01CBD E022      LDI	R18,2
    01CBE E009      LDI	R16,0x9
    01CBF 940E 0A01 CALL	_Set_White_off
(0906) 		 pageNum=1;
    01CC1 E081      LDI	R24,1
    01CC2 E090      LDI	R25,0
    01CC3 9390 0D75 STS	pageNum+1,R25
    01CC5 9380 0D74 STS	pageNum,R24
(0907) 		 return;
    01CC7 C05F      RJMP	0x1D27
(0908) 		 }
(0909) 	 }else if(keyV=='0' || keyV=='1' || keyV=='2' || keyV=='3' || keyV=='4' || keyV=='5' 
    01CC8 3360      CPI	R22,0x30
    01CC9 F099      BEQ	0x1CDD
    01CCA 3361      CPI	R22,0x31
    01CCB F089      BEQ	0x1CDD
    01CCC 3362      CPI	R22,0x32
    01CCD F079      BEQ	0x1CDD
    01CCE 3363      CPI	R22,0x33
    01CCF F069      BEQ	0x1CDD
    01CD0 3364      CPI	R22,0x34
    01CD1 F059      BEQ	0x1CDD
    01CD2 3365      CPI	R22,0x35
    01CD3 F049      BEQ	0x1CDD
    01CD4 3366      CPI	R22,0x36
    01CD5 F039      BEQ	0x1CDD
    01CD6 3367      CPI	R22,0x37
    01CD7 F029      BEQ	0x1CDD
    01CD8 3368      CPI	R22,0x38
    01CD9 F019      BEQ	0x1CDD
    01CDA 3369      CPI	R22,0x39
    01CDB F009      BEQ	0x1CDD
    01CDC C049      RJMP	0x1D26
(0910) 	           || keyV=='6'  || keyV=='7' || keyV=='8' || keyV=='9'){
(0911) 			if(cur<14){
    01CDD 304E      CPI	R20,0xE
    01CDE E0E0      LDI	R30,0
    01CDF 075E      CPC	R21,R30
    01CE0 F008      BCS	0x1CE2
    01CE1 C044      RJMP	0x1D26
(0912) 			 lcd_write_char_con(0,0x30 | keyV);
    01CE2 2F26      MOV	R18,R22
    01CE3 6320      ORI	R18,0x30
    01CE4 2700      CLR	R16
    01CE5 940E 07F4 CALL	_lcd_write_char_con
(0913) 			 lcd_write_char_con(0,' ');
    01CE7 E220      LDI	R18,0x20
    01CE8 2700      CLR	R16
    01CE9 940E 07F4 CALL	_lcd_write_char_con
(0914) 			 date[cur]=keyV;
    01CEB 01CE      MOVW	R24,R28
    01CEC 9602      ADIW	R24,2
    01CED 01FA      MOVW	R30,R20
    01CEE 0FE8      ADD	R30,R24
    01CEF 1FF9      ADC	R31,R25
    01CF0 8360      ST	Z,R22
(0915) 			  if(cur==3 || cur==5){
    01CF1 3043      CPI	R20,3
    01CF2 E0E0      LDI	R30,0
    01CF3 075E      CPC	R21,R30
    01CF4 F021      BEQ	0x1CF9
    01CF5 3045      CPI	R20,5
    01CF6 E0E0      LDI	R30,0
    01CF7 075E      CPC	R21,R30
    01CF8 F431      BNE	0x1CFF
(0916) 			    lcd_write_str_con(0,"- ");
    01CF9 E620      LDI	R18,0x60
    01CFA E037      LDI	R19,7
    01CFB 2700      CLR	R16
    01CFC 940E 0896 CALL	_lcd_write_str_con
(0917) 			 }else if(cur==9 || cur==11){
    01CFE C00D      RJMP	0x1D0C
    01CFF 3049      CPI	R20,0x9
    01D00 E0E0      LDI	R30,0
    01D01 075E      CPC	R21,R30
    01D02 F021      BEQ	0x1D07
    01D03 304B      CPI	R20,0xB
    01D04 E0E0      LDI	R30,0
    01D05 075E      CPC	R21,R30
    01D06 F429      BNE	0x1D0C
(0918) 			    lcd_write_str_con(0,": ");
    01D07 E52D      LDI	R18,0x5D
    01D08 E037      LDI	R19,7
    01D09 2700      CLR	R16
    01D0A 940E 0896 CALL	_lcd_write_str_con
(0919) 			 }
(0920) 			 cur++;
    01D0C 5F4F      SUBI	R20,0xFF
    01D0D 4F5F      SBCI	R21,0xFF
(0921) 			 if(cur==8){
    01D0E 3048      CPI	R20,0x8
    01D0F E0E0      LDI	R30,0
    01D10 075E      CPC	R21,R30
    01D11 F431      BNE	0x1D18
(0922) 			    lcd_write_pos(dateAc[8],1);
    01D12 E021      LDI	R18,1
    01D13 A109      LDD	R16,Y+33
    01D14 A11A      LDD	R17,Y+34
    01D15 940E 0808 CALL	_lcd_write_pos
(0923) 			 }else if(cur==14){
    01D17 C00E      RJMP	0x1D26
    01D18 304E      CPI	R20,0xE
    01D19 E0E0      LDI	R30,0
    01D1A 075E      CPC	R21,R30
    01D1B F451      BNE	0x1D26
(0924) 			  cur_set(0);//关下半屏幕游标
    01D1C 2700      CLR	R16
    01D1D 2711      CLR	R17
    01D1E 940E 09BD CALL	_cur_set
(0925) 			  Set_White(4,2,5);
    01D20 E085      LDI	R24,5
    01D21 8388      ST	Y,R24
    01D22 E022      LDI	R18,2
    01D23 E004      LDI	R16,4
    01D24 940E 0A71 CALL	_Set_White
    01D26 CE75      RJMP	0x1B9C
    01D27 96AD      ADIW	R28,0x2D
    01D28 940C 1E1F JMP	pop_xgsetF000
_page9:
    01D2A 9722      SBIW	R28,2
(0926) 			 }
(0927) 			}
(0928) 	 }
(0929)    }
(0930)  }
(0931) void page9(void){//复用的方法
(0932)   if(pageParam[2]==0){
    01D2B 9020 0D6E LDS	R2,pageParam+4
    01D2D 9030 0D6F LDS	R3,pageParam+5
    01D2F 2022      TST	R2
    01D30 F459      BNE	0x1D3C
    01D31 2033      TST	R3
    01D32 F449      BNE	0x1D3C
(0933)      lcd_write_str(4,1,"系统重置中。。。");
    01D33 E48C      LDI	R24,0x4C
    01D34 E097      LDI	R25,7
    01D35 8399      STD	Y+1,R25
    01D36 8388      ST	Y,R24
    01D37 E021      LDI	R18,1
    01D38 E004      LDI	R16,4
    01D39 940E 084C CALL	_lcd_write_str
(0934)    }else if(pageParam[2]==1){
    01D3B C010      RJMP	0x1D4C
    01D3C 9180 0D6E LDS	R24,pageParam+4
    01D3E 9190 0D6F LDS	R25,pageParam+5
    01D40 3081      CPI	R24,1
    01D41 E0E0      LDI	R30,0
    01D42 079E      CPC	R25,R30
    01D43 F441      BNE	0x1D4C
(0935)      lcd_write_str(4,1,"数据重置中。。。");
    01D44 E38B      LDI	R24,0x3B
    01D45 E097      LDI	R25,7
    01D46 8399      STD	Y+1,R25
    01D47 8388      ST	Y,R24
    01D48 E021      LDI	R18,1
    01D49 E004      LDI	R16,4
    01D4A 940E 084C CALL	_lcd_write_str
(0936)    }
(0937)    delay_ms(500);
    01D4C EF04      LDI	R16,0xF4
    01D4D E011      LDI	R17,1
    01D4E 940E 044D CALL	_delay_ms
(0938)    pageNum=prePageNum;
    01D50 9020 0D68 LDS	R2,prePageNum
    01D52 9030 0D69 LDS	R3,prePageNum+1
    01D54 9230 0D75 STS	pageNum+1,R3
    01D56 9220 0D74 STS	pageNum,R2
    01D58 9622      ADIW	R28,2
    01D59 9508      RET
(0939)  }
(0940) //分发Pages
(0941) void dispatchPages(void){
(0942)       lcd_clear();//清屏幕
_dispatchPages:
    01D5A 940E 0903 CALL	_lcd_clear
(0943)       if(pageNum==1){
    01D5C 9180 0D74 LDS	R24,pageNum
    01D5E 9190 0D75 LDS	R25,pageNum+1
    01D60 3081      CPI	R24,1
    01D61 E0E0      LDI	R30,0
    01D62 079E      CPC	R25,R30
    01D63 F419      BNE	0x1D67
(0944) 	    page1();
    01D64 940E 107A CALL	_page1
(0945) 	  }else if(pageNum==2){
    01D66 C051      RJMP	0x1DB8
    01D67 9180 0D74 LDS	R24,pageNum
    01D69 9190 0D75 LDS	R25,pageNum+1
    01D6B 3082      CPI	R24,2
    01D6C E0E0      LDI	R30,0
    01D6D 079E      CPC	R25,R30
    01D6E F419      BNE	0x1D72
(0946) 	    page2();
    01D6F 940E 13EB CALL	_page2
(0947) 	  }else if(pageNum==3){
    01D71 C046      RJMP	0x1DB8
    01D72 9180 0D74 LDS	R24,pageNum
    01D74 9190 0D75 LDS	R25,pageNum+1
    01D76 3083      CPI	R24,3
    01D77 E0E0      LDI	R30,0
    01D78 079E      CPC	R25,R30
    01D79 F419      BNE	0x1D7D
(0948) 	    page3();
    01D7A 940E 1462 CALL	_page3
(0949) 	  }else if(pageNum==4){
    01D7C C03B      RJMP	0x1DB8
    01D7D 9180 0D74 LDS	R24,pageNum
    01D7F 9190 0D75 LDS	R25,pageNum+1
    01D81 3084      CPI	R24,4
    01D82 E0E0      LDI	R30,0
    01D83 079E      CPC	R25,R30
    01D84 F411      BNE	0x1D87
(0950) 	    page4();
    01D85 D9CA      RCALL	_page4
(0951) 	  }else if(pageNum==5){
    01D86 C031      RJMP	0x1DB8
    01D87 9180 0D74 LDS	R24,pageNum
    01D89 9190 0D75 LDS	R25,pageNum+1
    01D8B 3085      CPI	R24,5
    01D8C E0E0      LDI	R30,0
    01D8D 079E      CPC	R25,R30
    01D8E F411      BNE	0x1D91
(0952) 	    page5();
    01D8F DBC4      RCALL	_page5
(0953) 	  }else if(pageNum==6){
    01D90 C027      RJMP	0x1DB8
    01D91 9180 0D74 LDS	R24,pageNum
    01D93 9190 0D75 LDS	R25,pageNum+1
    01D95 3086      CPI	R24,6
    01D96 E0E0      LDI	R30,0
    01D97 079E      CPC	R25,R30
    01D98 F411      BNE	0x1D9B
(0954) 	    page6();
    01D99 DC90      RCALL	_page6
(0955) 	  }else if(pageNum==7){
    01D9A C01D      RJMP	0x1DB8
    01D9B 9180 0D74 LDS	R24,pageNum
    01D9D 9190 0D75 LDS	R25,pageNum+1
    01D9F 3087      CPI	R24,7
    01DA0 E0E0      LDI	R30,0
    01DA1 079E      CPC	R25,R30
    01DA2 F411      BNE	0x1DA5
(0956) 	    page7();
    01DA3 DCC7      RCALL	_page7
(0957) 	  }else if(pageNum==8){
    01DA4 C013      RJMP	0x1DB8
    01DA5 9180 0D74 LDS	R24,pageNum
    01DA7 9190 0D75 LDS	R25,pageNum+1
    01DA9 3088      CPI	R24,0x8
    01DAA E0E0      LDI	R30,0
    01DAB 079E      CPC	R25,R30
    01DAC F411      BNE	0x1DAF
(0958) 	    page8();
    01DAD DD59      RCALL	_page8
(0959) 	  }else if(pageNum==9){
    01DAE C009      RJMP	0x1DB8
    01DAF 9180 0D74 LDS	R24,pageNum
    01DB1 9190 0D75 LDS	R25,pageNum+1
    01DB3 3089      CPI	R24,0x9
    01DB4 E0E0      LDI	R30,0
    01DB5 079E      CPC	R25,R30
    01DB6 F409      BNE	0x1DB8
(0960) 	    page9();
    01DB7 DF72      RCALL	_page9
(0961) 	  }
FILE: <library>
    01DB8 9508      RET
push_arg4:
    01DB9 933A      ST	-Y,R19
    01DBA 932A      ST	-Y,R18
push_arg2:
    01DBB 931A      ST	-Y,R17
    01DBC 930A      ST	-Y,R16
    01DBD 9508      RET
mod16u:
    01DBE 9468      BSET	6
    01DBF C001      RJMP	xdiv16u
div16u:
    01DC0 94E8      BCLR	6
xdiv16u:
    01DC1 92EA      ST	-Y,R14
    01DC2 92FA      ST	-Y,R15
    01DC3 938A      ST	-Y,R24
    01DC4 24EE      CLR	R14
    01DC5 24FF      CLR	R15
    01DC6 E180      LDI	R24,0x10
    01DC7 0F00      LSL	R16
    01DC8 1F11      ROL	R17
    01DC9 1CEE      ROL	R14
    01DCA 1CFF      ROL	R15
    01DCB 16E2      CP	R14,R18
    01DCC 06F3      CPC	R15,R19
    01DCD F018      BCS	0x1DD1
    01DCE 1AE2      SUB	R14,R18
    01DCF 0AF3      SBC	R15,R19
    01DD0 9503      INC	R16
    01DD1 958A      DEC	R24
    01DD2 F7A1      BNE	0x1DC7
    01DD3 F416      BRTC	0x1DD6
    01DD4 2D0E      MOV	R16,R14
    01DD5 2D1F      MOV	R17,R15
    01DD6 9189      LD	R24,Y+
    01DD7 90F9      LD	R15,Y+
    01DD8 90E9      LD	R14,Y+
    01DD9 9508      RET
empy16s:
    01DDA 920A      ST	-Y,R0
    01DDB 921A      ST	-Y,R1
    01DDC 938A      ST	-Y,R24
    01DDD 939A      ST	-Y,R25
    01DDE 9F02      MUL	R16,R18
    01DDF 01C0      MOVW	R24,R0
    01DE0 9F12      MUL	R17,R18
    01DE1 0D90      ADD	R25,R0
    01DE2 9F03      MUL	R16,R19
    01DE3 0D90      ADD	R25,R0
    01DE4 018C      MOVW	R16,R24
    01DE5 9199      LD	R25,Y+
    01DE6 9189      LD	R24,Y+
    01DE7 9019      LD	R1,Y+
    01DE8 9009      LD	R0,Y+
    01DE9 9508      RET
pop_xgset00FC:
    01DEA 90A9      LD	R10,Y+
    01DEB 90B9      LD	R11,Y+
    01DEC 90C9      LD	R12,Y+
    01DED 90D9      LD	R13,Y+
    01DEE 90E9      LD	R14,Y+
    01DEF 90F9      LD	R15,Y+
    01DF0 9508      RET
pop_xgset30FC:
    01DF1 90A9      LD	R10,Y+
    01DF2 90B9      LD	R11,Y+
    01DF3 90C9      LD	R12,Y+
    01DF4 90D9      LD	R13,Y+
    01DF5 90E9      LD	R14,Y+
    01DF6 90F9      LD	R15,Y+
    01DF7 9149      LD	R20,Y+
    01DF8 9159      LD	R21,Y+
    01DF9 9508      RET
pop_xgsetF0FC:
    01DFA 90A9      LD	R10,Y+
    01DFB 90B9      LD	R11,Y+
    01DFC 90C9      LD	R12,Y+
    01DFD 90D9      LD	R13,Y+
    01DFE 90E9      LD	R14,Y+
    01DFF 90F9      LD	R15,Y+
    01E00 9149      LD	R20,Y+
    01E01 9159      LD	R21,Y+
    01E02 9169      LD	R22,Y+
    01E03 9179      LD	R23,Y+
    01E04 9508      RET
push_xgsetF0FC:
    01E05 937A      ST	-Y,R23
    01E06 936A      ST	-Y,R22
push_xgset30FC:
    01E07 935A      ST	-Y,R21
    01E08 934A      ST	-Y,R20
push_xgset00FC:
    01E09 92FA      ST	-Y,R15
    01E0A 92EA      ST	-Y,R14
push_xgset003C:
    01E0B 92DA      ST	-Y,R13
    01E0C 92CA      ST	-Y,R12
    01E0D 92BA      ST	-Y,R11
    01E0E 92AA      ST	-Y,R10
    01E0F 9508      RET
push_xgset300C:
    01E10 935A      ST	-Y,R21
    01E11 934A      ST	-Y,R20
    01E12 92BA      ST	-Y,R11
    01E13 92AA      ST	-Y,R10
    01E14 9508      RET
pop_xgset300C:
    01E15 90A9      LD	R10,Y+
    01E16 90B9      LD	R11,Y+
    01E17 9149      LD	R20,Y+
    01E18 9159      LD	R21,Y+
    01E19 9508      RET
push_xgsetF000:
    01E1A 937A      ST	-Y,R23
    01E1B 936A      ST	-Y,R22
    01E1C 935A      ST	-Y,R21
    01E1D 934A      ST	-Y,R20
    01E1E 9508      RET
pop_xgsetF000:
    01E1F 9149      LD	R20,Y+
    01E20 9159      LD	R21,Y+
    01E21 9169      LD	R22,Y+
    01E22 9179      LD	R23,Y+
    01E23 9508      RET
push_xgsetF00C:
    01E24 937A      ST	-Y,R23
    01E25 936A      ST	-Y,R22
    01E26 935A      ST	-Y,R21
    01E27 934A      ST	-Y,R20
    01E28 92BA      ST	-Y,R11
    01E29 92AA      ST	-Y,R10
    01E2A 9508      RET
pop_xgsetF00C:
    01E2B 90A9      LD	R10,Y+
    01E2C 90B9      LD	R11,Y+
    01E2D 9149      LD	R20,Y+
    01E2E 9159      LD	R21,Y+
    01E2F 9169      LD	R22,Y+
    01E30 9179      LD	R23,Y+
    01E31 9508      RET
push_xgset303C:
    01E32 935A      ST	-Y,R21
    01E33 934A      ST	-Y,R20
    01E34 92DA      ST	-Y,R13
    01E35 92CA      ST	-Y,R12
    01E36 92BA      ST	-Y,R11
    01E37 92AA      ST	-Y,R10
    01E38 9508      RET
pop_xgset303C:
    01E39 90A9      LD	R10,Y+
    01E3A 90B9      LD	R11,Y+
    01E3B 90C9      LD	R12,Y+
    01E3C 90D9      LD	R13,Y+
    01E3D 9149      LD	R20,Y+
    01E3E 9159      LD	R21,Y+
    01E3F 9508      RET
push_xgsetF03C:
    01E40 937A      ST	-Y,R23
    01E41 936A      ST	-Y,R22
    01E42 935A      ST	-Y,R21
    01E43 934A      ST	-Y,R20
    01E44 92DA      ST	-Y,R13
    01E45 92CA      ST	-Y,R12
    01E46 92BA      ST	-Y,R11
    01E47 92AA      ST	-Y,R10
    01E48 9508      RET
pop_xgsetF03C:
    01E49 90A9      LD	R10,Y+
    01E4A 90B9      LD	R11,Y+
    01E4B 90C9      LD	R12,Y+
    01E4C 90D9      LD	R13,Y+
    01E4D 9149      LD	R20,Y+
    01E4E 9159      LD	R21,Y+
    01E4F 9169      LD	R22,Y+
    01E50 9179      LD	R23,Y+
    01E51 9508      RET
lsl16:
    01E52 2322      TST	R18
    01E53 F021      BEQ	0x1E58
    01E54 0F00      LSL	R16
    01E55 1F11      ROL	R17
    01E56 952A      DEC	R18
    01E57 CFFA      RJMP	lsl16
    01E58 9508      RET
lsl8:
    01E59 2311      TST	R17
    01E5A F019      BEQ	0x1E5E
    01E5B 0F00      LSL	R16
    01E5C 951A      DEC	R17
    01E5D CFFB      RJMP	lsl8
    01E5E 9508      RET
asgnblk:
    01E5F 93AA      ST	-Y,R26
    01E60 93BA      ST	-Y,R27
    01E61 93EA      ST	-Y,R30
    01E62 93FA      ST	-Y,R31
    01E63 920A      ST	-Y,R0
    01E64 81AF      LDD	R26,Y+7
    01E65 85B8      LDD	R27,Y+8
    01E66 81ED      LDD	R30,Y+5
    01E67 81FE      LDD	R31,Y+6
    01E68 3000      CPI	R16,0
    01E69 0701      CPC	R16,R17
    01E6A F029      BEQ	0x1E70
    01E6B 9001      LD	R0,Z+
    01E6C 920D      ST	X+,R0
    01E6D 5001      SUBI	R16,1
    01E6E 4010      SBCI	R17,0
    01E6F CFF8      RJMP	0x1E68
    01E70 9009      LD	R0,Y+
    01E71 91F9      LD	R31,Y+
    01E72 91E9      LD	R30,Y+
    01E73 91B9      LD	R27,Y+
    01E74 91A9      LD	R26,Y+
    01E75 9624      ADIW	R28,4
    01E76 9508      RET
