Interrupt Vectors
    00000 940C 00DA JMP	__text_start|__start
    00014 940C 098E JMP	_int_timer2
    0001C 940C 093D JMP	_int_timer1
    00020 940C 08EF JMP	_int_timer0
    0003A 940C 09DF JMP	_int_timer3

Program Code (text area)
__text_start|__start:
    000DA EFCF      LDI	R28,0xFF
    000DB E1D0      LDI	R29,0x10
    000DC BFCD      OUT	0x3D,R28
    000DD BFDE      OUT	0x3E,R29
    000DE 51CE      SUBI	R28,0x1E
    000DF 40D0      SBCI	R29,0
    000E0 EA0A      LDI	R16,0xAA
    000E1 8308      ST	Y,R16
    000E2 2400      CLR	R0
    000E3 E2E7      LDI	R30,0x27
    000E4 E0F2      LDI	R31,2
    000E5 E016      LDI	R17,6
    000E6 3FE2      CPI	R30,0xF2
    000E7 07F1      CPC	R31,R17
    000E8 F011      BEQ	0x00EB
    000E9 9201      ST	Z+,R0
    000EA CFFB      RJMP	0x00E6
    000EB 8300      ST	Z,R16
    000EC E8EC      LDI	R30,0x8C
    000ED E0F0      LDI	R31,0
    000EE E0A0      LDI	R26,0
    000EF E0B1      LDI	R27,1
    000F0 E011      LDI	R17,1
    000F1 E000      LDI	R16,0
    000F2 BF0B      OUT	0x3B,R16
    000F3 3BE3      CPI	R30,0xB3
    000F4 07F1      CPC	R31,R17
    000F5 F021      BEQ	0x00FA
    000F6 95C8      LPM
    000F7 9631      ADIW	R30,1
    000F8 920D      ST	X+,R0
    000F9 CFF9      RJMP	0x00F3
    000FA 940E 0876 CALL	_main
_exit:
    000FC CFFF      RJMP	_exit
FILE: E:\ICCDemo\Temp_Control\temp_control\delay.c
(0001) #include<iom128v.h>
(0002) #include "delay.h"
(0003) 
(0004) 
(0005) void delay_us(uint n)//延时us
(0006) {
(0007)   n=2*n;
_delay_us:
  n                    --> R16
    000FD 0F00      LSL	R16
    000FE 1F11      ROL	R17
(0008)   do{ n--;
    000FF 5001      SUBI	R16,1
    00100 4010      SBCI	R17,0
(0009)   }while(n>1);
    00101 E081      LDI	R24,1
    00102 E090      LDI	R25,0
    00103 1780      CP	R24,R16
    00104 0791      CPC	R25,R17
    00105 F3C8      BCS	0x00FF
    00106 9508      RET
_delay_ms:
  j                    --> R20
    00107 934A      ST	-Y,R20
    00108 935A      ST	-Y,R21
    00109 01A8      MOVW	R20,R16
(0010) }
(0011) void delay_ms(uint j)//延时ms
(0012) {
(0013)    do{j--;
    0010A 5041      SUBI	R20,1
    0010B 4050      SBCI	R21,0
(0014)      delay_us(1141);
    0010C E705      LDI	R16,0x75
    0010D E014      LDI	R17,4
    0010E DFEE      RCALL	_delay_us
(0015)    }while(j>1);
    0010F E081      LDI	R24,1
    00110 E090      LDI	R25,0
    00111 1784      CP	R24,R20
    00112 0795      CPC	R25,R21
    00113 F3B0      BCS	0x010A
    00114 9159      LD	R21,Y+
    00115 9149      LD	R20,Y+
    00116 9508      RET
_delay_s:
  i                    --> R20
    00117 934A      ST	-Y,R20
    00118 935A      ST	-Y,R21
    00119 01A8      MOVW	R20,R16
(0016) }
(0017) void delay_s(uint i)
(0018) {
(0019)    do{
(0020)    i--;
    0011A 5041      SUBI	R20,1
    0011B 4050      SBCI	R21,0
(0021)    delay_ms(1000);
    0011C EE08      LDI	R16,0xE8
    0011D E013      LDI	R17,3
    0011E DFE8      RCALL	_delay_ms
(0022)    }while(i>1);
    0011F E081      LDI	R24,1
    00120 E090      LDI	R25,0
    00121 1784      CP	R24,R20
    00122 0795      CPC	R25,R21
    00123 F3B0      BCS	0x011A
    00124 9159      LD	R21,Y+
    00125 9149      LD	R20,Y+
    00126 9508      RET
_Write1302:
  temp                 --> R10
  i                    --> R20
  dat                  --> R18
  addr                 --> R16
    00127 92AA      ST	-Y,R10
    00128 934A      ST	-Y,R20
FILE: E:\ICCDemo\Temp_Control\temp_control\time.c
(0001) #include<iom128v.h>
(0002) #include "time.h"
(0003) #include "delay.h"
(0004) #include "lcd.h"
(0005) //寄存器宏定义
(0006) #define WRITE_SECOND 0x80
(0007) #define WRITE_MINUTE 0x82 
(0008) #define WRITE_HOUR 0x84
(0009) #define WRITE_DAY 0x86
(0010) #define WRITE_MONTH 0x88 
(0011) #define WRITE_WEEK 0x8A
(0012) #define WRITE_YEAE 0x8C
(0013) #define WRITE_PROTECT 0x8E 
(0014) 
(0015) #define READ_SECOND 0x81 
(0016) #define READ_MINUTE 0x83 
(0017) #define READ_HOUR 0x85 
(0018) #define READ_DAY 0x87
(0019) #define READ_MONTH 0x89
(0020) #define READ_WEEK 0x8B
(0021) #define READ_YEAE 0x8D
(0022) #define READ_PROTECT 0x8F
(0023) 
(0024) 
(0025) #define  SCLK_H  PORTD|=1<<PD0 //
(0026) #define  SCLK_L  PORTD&=~(1<<PD0) //
(0027) #define  DIO    PORTD&(~(1<<PD1)) //会获得PB1的值，判断是否等于0来确定值
(0028) #define  DIO_H   PORTD|=1<<PD1 //
(0029) #define  DIO_L  PORTD&=~(1<<PD1)  //
(0030) #define  CE_H    PORTD|=1<<PD2
(0031) #define  CE_L   PORTD&=~(1<<PD2) 
(0032) 
(0033) 
(0034) //地址、数据发送子程序
(0035) void Write1302  ( unsigned char  addr,unsigned char dat )
(0036) { 
(0037)   unsigned char  i,temp; 
(0038)   CE_L; //CE引脚为低，数据传送中止
    00129 9892      CBI	0x12,2
(0039)   SCLK_L;//清零时钟总线?
    0012A 9890      CBI	0x12,0
(0040)   CE_H;//CE引脚为高，逻辑控制有效
    0012B 9A92      SBI	0x12,2
(0041)   //发送地址?
(0042)     for ( i=8; i>0; i-- ) //循环8次移位
    0012C E048      LDI	R20,0x8
    0012D C00A      RJMP	0x0138
(0043)     { 
(0044)        SCLK_L;
    0012E 9890      CBI	0x12,0
(0045) 	   temp=addr;
    0012F 2EA0      MOV	R10,R16
(0046)        if((temp&0x01))//每次传输低字节
    00130 FF00      SBRS	R16,0
    00131 C002      RJMP	0x0134
(0047) 	   {
(0048) 	   	DIO_H;
    00132 9A91      SBI	0x12,1
(0049) 	   }else{
    00133 C001      RJMP	0x0135
(0050) 	   DIO_L;
    00134 9891      CBI	0x12,1
(0051) 	   }
(0052)        addr>>=1;//右移一位
    00135 9506      LSR	R16
(0053) 			  SCLK_H;
    00136 9A90      SBI	0x12,0
    00137 954A      DEC	R20
    00138 E080      LDI	R24,0
    00139 1784      CP	R24,R20
    0013A F398      BCS	0x012E
(0054)  }
(0055) //发送数据?
(0056) for(i=8;i>0;i--){
    0013B E048      LDI	R20,0x8
    0013C C00A      RJMP	0x0147
(0057)    SCLK_L; 
    0013D 9890      CBI	0x12,0
(0058)    temp=dat;
    0013E 2EA2      MOV	R10,R18
(0059)    if((temp&0x01))//每次传输低字节
    0013F FF20      SBRS	R18,0
    00140 C002      RJMP	0x0143
(0060) 	   {
(0061) 	   	DIO_H;
    00141 9A91      SBI	0x12,1
(0062) 	   }else{
    00142 C001      RJMP	0x0144
(0063) 	   DIO_L;
    00143 9891      CBI	0x12,1
(0064) 	   }
(0065) 	dat>>=1;
    00144 9526      LSR	R18
(0066)     SCLK_H;
    00145 9A90      SBI	0x12,0
    00146 954A      DEC	R20
    00147 E080      LDI	R24,0
    00148 1784      CP	R24,R20
    00149 F398      BCS	0x013D
(0067)   }
(0068)    CE_L;
    0014A 9892      CBI	0x12,2
    0014B 9149      LD	R20,Y+
    0014C 90A9      LD	R10,Y+
    0014D 9508      RET
_Read1302:
  data                 --> R10
  temp                 --> R14
  i                    --> R20
  addr                 --> R12
    0014E 940E 15C5 CALL	push_xgset30FC
    00150 2EC0      MOV	R12,R16
(0069) }
(0070) //数据读取子程序
(0071) unsigned char Read1302( unsigned char addr ){
(0072)    unsigned char i,temp,data=0;
    00151 24AA      CLR	R10
(0073)    CE_L;
    00152 9892      CBI	0x12,2
(0074)    SCLK_L;
    00153 9890      CBI	0x12,0
(0075)    CE_H;//发送地址?
    00154 9A92      SBI	0x12,2
(0076)    for(i=8;i>0;i--)//循环8次移位
    00155 E048      LDI	R20,0x8
    00156 C00A      RJMP	0x0161
(0077)    {
(0078)       
(0079) 	   temp=addr;
    00157 2CEC      MOV	R14,R12
(0080)       if((temp&0x01))//每次传输低字节
    00158 FEC0      SBRS	R12,0
    00159 C002      RJMP	0x015C
(0081) 	   {
(0082) 	   	DIO_H;
    0015A 9A91      SBI	0x12,1
(0083) 	   }else{
    0015B C001      RJMP	0x015D
(0084) 	   DIO_L;
    0015C 9891      CBI	0x12,1
(0085) 	   }
(0086) 	   SCLK_L;
    0015D 9890      CBI	0x12,0
(0087)        addr>>=1;//右移一位
    0015E 94C6      LSR	R12
(0088) 	  SCLK_H;
    0015F 9A90      SBI	0x12,0
    00160 954A      DEC	R20
    00161 E080      LDI	R24,0
    00162 1784      CP	R24,R20
    00163 F398      BCS	0x0157
(0089)    }
(0090) //读取数据
(0091) DDRD&=0xFD;
    00164 B381      IN	R24,0x11
    00165 7F8D      ANDI	R24,0xFD
    00166 BB81      OUT	0x11,R24
(0092)  for(i=0;i<8;i++)
    00167 2744      CLR	R20
    00168 C00E      RJMP	0x0177
(0093)   {
(0094)      SCLK_H;
    00169 9A90      SBI	0x12,0
(0095) 	 SCLK_L;
    0016A 9890      CBI	0x12,0
(0096) 	 delay_ms(1);
    0016B E001      LDI	R16,1
    0016C E010      LDI	R17,0
    0016D 940E 0107 CALL	_delay_ms
(0097)    	 data |=(((PIND&(1<<PD1))>>1)<<i);
    0016F B300      IN	R16,0x10
    00170 7002      ANDI	R16,2
    00171 9506      LSR	R16
    00172 2F14      MOV	R17,R20
    00173 940E 1617 CALL	lsl8
    00175 2AA0      OR	R10,R16
    00176 9543      INC	R20
    00177 3048      CPI	R20,0x8
    00178 F380      BCS	0x0169
(0098)            
(0099)     }
(0100) 	///PORTE=data;
(0101)    DDRD|=0x07;
    00179 B381      IN	R24,0x11
    0017A 6087      ORI	R24,7
    0017B BB81      OUT	0x11,R24
(0102)     CE_L;
    0017C 9892      CBI	0x12,2
(0103)     // temp = data>>4;
(0104)    // data &= 0x0f;
(0105)     //data = temp*10 + data;
(0106) 	
(0107)     return(data);
    0017D 2D0A      MOV	R16,R10
    0017E 940C 15AF JMP	pop_xgset30FC
(0108) }
(0109) //初始化DS1302?
(0110) void Initial_time(void) {
(0111)    DDRD|=0x07;
_Initial_time:
    00180 B381      IN	R24,0x11
    00181 6087      ORI	R24,7
    00182 BB81      OUT	0x11,R24
(0112)    PORTD=0x00;
    00183 2422      CLR	R2
    00184 BA22      OUT	0x12,R2
(0113)   // Write1302(WRITE_PROTECT,0X00);//禁止写保护
(0114)    //Write1302(WRITE_SECOND,0x00);//秒位初始化
(0115)    //Write1302(WRITE_MINUTE,0x50);//分钟初始化
(0116)   // Write1302(WRITE_HOUR,0xa4);//小时初始化
(0117)    Write1302(WRITE_PROTECT,0x80);//写保护
    00185 E820      LDI	R18,0x80
    00186 E80E      LDI	R16,0x8E
    00187 CF9F      RJMP	_Write1302
_showTimeLcd:
    00188 92AA      ST	-Y,R10
    00189 934A      ST	-Y,R20
    0018A 9721      SBIW	R28,1
(0118) }
(0119) //显示时间，时分秒
(0120) void showTimeLcd(void){
(0121)    //PORTE=~Read1302(0x81);
(0122) 	if(Read1302(0x85)&0x80){
    0018B E805      LDI	R16,0x85
    0018C DFC1      RCALL	_Read1302
    0018D FF07      SBRS	R16,7
    0018E C048      RJMP	0x01D7
(0123) 	if( (Read1302(0x85)>>4)&0x01 )
    0018F E805      LDI	R16,0x85
    00190 DFBD      RCALL	_Read1302
    00191 2F80      MOV	R24,R16
    00192 9582      SWAP	R24
    00193 708F      ANDI	R24,0xF
    00194 7081      ANDI	R24,1
    00195 F0B9      BEQ	0x01AD
(0124) 	{
(0125) 	 lcd_write_char(0x00,1,0x30|((Read1302(0x85)>>4)&0x01));
    00196 E805      LDI	R16,0x85
    00197 DFB6      RCALL	_Read1302
    00198 2EA0      MOV	R10,R16
    00199 2D8A      MOV	R24,R10
    0019A 9582      SWAP	R24
    0019B 708F      ANDI	R24,0xF
    0019C 7081      ANDI	R24,1
    0019D 6380      ORI	R24,0x30
    0019E 8388      ST	Y,R24
    0019F E021      LDI	R18,1
    001A0 2700      CLR	R16
    001A1 940E 04F0 CALL	_lcd_write_char
(0126) 	 lcd_write_char_con(1,0x30|(Read1302(0x85)&0x0F));
    001A3 E805      LDI	R16,0x85
    001A4 DFA9      RCALL	_Read1302
    001A5 2F40      MOV	R20,R16
    001A6 2F24      MOV	R18,R20
    001A7 702F      ANDI	R18,0xF
    001A8 6320      ORI	R18,0x30
    001A9 E001      LDI	R16,1
    001AA 940E 04BE CALL	_lcd_write_char_con
(0127) 	}else{
    001AC C00F      RJMP	0x01BC
(0128) 	 lcd_write_char(0x00,1,' ' );
    001AD E280      LDI	R24,0x20
    001AE 8388      ST	Y,R24
    001AF E021      LDI	R18,1
    001B0 2700      CLR	R16
    001B1 940E 04F0 CALL	_lcd_write_char
(0129) 	 lcd_write_char_con(1,0x30|(Read1302(0x85)&0x0F));
    001B3 E805      LDI	R16,0x85
    001B4 DF99      RCALL	_Read1302
    001B5 2F40      MOV	R20,R16
    001B6 2F24      MOV	R18,R20
    001B7 702F      ANDI	R18,0xF
    001B8 6320      ORI	R18,0x30
    001B9 E001      LDI	R16,1
    001BA 940E 04BE CALL	_lcd_write_char_con
(0130) 	}
(0131) 
(0132) 	   if(((Read1302(0x85))&0x20)){
    001BC E805      LDI	R16,0x85
    001BD DF90      RCALL	_Read1302
    001BE 2EA0      MOV	R10,R16
    001BF FF05      SBRS	R16,5
    001C0 C00B      RJMP	0x01CC
(0133) 	      lcd_write_char(0x05,1, 'P');
    001C1 E580      LDI	R24,0x50
    001C2 8388      ST	Y,R24
    001C3 E021      LDI	R18,1
    001C4 E005      LDI	R16,5
    001C5 940E 04F0 CALL	_lcd_write_char
(0134) 	     lcd_write_char_con(1, 'M');
    001C7 E42D      LDI	R18,0x4D
    001C8 E001      LDI	R16,1
    001C9 940E 04BE CALL	_lcd_write_char_con
(0135) 	   }else{
    001CB C021      RJMP	0x01ED
(0136) 	     lcd_write_char(0x05,1, 'A');
    001CC E481      LDI	R24,0x41
    001CD 8388      ST	Y,R24
    001CE E021      LDI	R18,1
    001CF E005      LDI	R16,5
    001D0 940E 04F0 CALL	_lcd_write_char
(0137) 	     lcd_write_char_con(1, 'M');
    001D2 E42D      LDI	R18,0x4D
    001D3 E001      LDI	R16,1
    001D4 940E 04BE CALL	_lcd_write_char_con
(0138) 	    }
(0139) 	}else{
    001D6 C016      RJMP	0x01ED
(0140) 	 lcd_write_char(0x00,1, 0x30|((Read1302(0x85)>>4)&0x03));
    001D7 E805      LDI	R16,0x85
    001D8 DF75      RCALL	_Read1302
    001D9 2EA0      MOV	R10,R16
    001DA 2D8A      MOV	R24,R10
    001DB 9582      SWAP	R24
    001DC 708F      ANDI	R24,0xF
    001DD 7083      ANDI	R24,3
    001DE 6380      ORI	R24,0x30
    001DF 8388      ST	Y,R24
    001E0 E021      LDI	R18,1
    001E1 2700      CLR	R16
    001E2 940E 04F0 CALL	_lcd_write_char
(0141) 	 lcd_write_char_con(1,0x30|(Read1302(0x85)&0x0F)); 
    001E4 E805      LDI	R16,0x85
    001E5 DF68      RCALL	_Read1302
    001E6 2F40      MOV	R20,R16
    001E7 2F24      MOV	R18,R20
    001E8 702F      ANDI	R18,0xF
    001E9 6320      ORI	R18,0x30
    001EA E001      LDI	R16,1
    001EB 940E 04BE CALL	_lcd_write_char_con
(0142) 	}
(0143) 	
(0144) 	lcd_write_char(0x01,1,':');
    001ED E38A      LDI	R24,0x3A
    001EE 8388      ST	Y,R24
    001EF E021      LDI	R18,1
    001F0 E001      LDI	R16,1
    001F1 940E 04F0 CALL	_lcd_write_char
(0145) 	
(0146) 	lcd_write_char_con(1, 0x30|Read1302(0x83)>>4);
    001F3 E803      LDI	R16,0x83
    001F4 DF59      RCALL	_Read1302
    001F5 2EA0      MOV	R10,R16
    001F6 2D2A      MOV	R18,R10
    001F7 9522      SWAP	R18
    001F8 702F      ANDI	R18,0xF
    001F9 6320      ORI	R18,0x30
    001FA E001      LDI	R16,1
    001FB 940E 04BE CALL	_lcd_write_char_con
(0147) 	lcd_write_char_con(1,0x30|(Read1302(0x83)&0x0F));
    001FD E803      LDI	R16,0x83
    001FE DF4F      RCALL	_Read1302
    001FF 2F40      MOV	R20,R16
    00200 2F24      MOV	R18,R20
    00201 702F      ANDI	R18,0xF
    00202 6320      ORI	R18,0x30
    00203 E001      LDI	R16,1
    00204 940E 04BE CALL	_lcd_write_char_con
(0148) 
(0149) 	lcd_write_char_con(1,':');
    00206 E32A      LDI	R18,0x3A
    00207 E001      LDI	R16,1
    00208 940E 04BE CALL	_lcd_write_char_con
(0150) 	
(0151) 	 lcd_write_char_con(1, 0x30|(Read1302(0x81)>>4));
    0020A E801      LDI	R16,0x81
    0020B DF42      RCALL	_Read1302
    0020C 2EA0      MOV	R10,R16
    0020D 2D2A      MOV	R18,R10
    0020E 9522      SWAP	R18
    0020F 702F      ANDI	R18,0xF
    00210 6320      ORI	R18,0x30
    00211 E001      LDI	R16,1
    00212 940E 04BE CALL	_lcd_write_char_con
(0152) 	lcd_write_char_con(1,0x30|(Read1302(0x81)&0x0F));
    00214 E801      LDI	R16,0x81
    00215 DF38      RCALL	_Read1302
    00216 2F40      MOV	R20,R16
    00217 2F24      MOV	R18,R20
    00218 702F      ANDI	R18,0xF
    00219 6320      ORI	R18,0x30
    0021A E001      LDI	R16,1
    0021B 940E 04BE CALL	_lcd_write_char_con
    0021D 9621      ADIW	R28,1
    0021E 9149      LD	R20,Y+
    0021F 90A9      LD	R10,Y+
    00220 9508      RET
(0153) }
(0154) 
(0155) uint getYear(void){
(0156)  return 1;
_getYear:
    00221 E001      LDI	R16,1
    00222 E010      LDI	R17,0
    00223 9508      RET
(0157) }
(0158) uint getMonth(void){
(0159)   return 1;
_getMonth:
    00224 E001      LDI	R16,1
    00225 E010      LDI	R17,0
    00226 9508      RET
(0160) }
(0161) uint getDay(void){
(0162)  return 1;
_getDay:
    00227 E001      LDI	R16,1
    00228 E010      LDI	R17,0
    00229 9508      RET
(0163) }
(0164) uint getWeek(void){
(0165)  return 1;
_getWeek:
    0022A E001      LDI	R16,1
    0022B E010      LDI	R17,0
    0022C 9508      RET
(0166) }
(0167) uint getHour(void){
(0168)  return 1;
_getHour:
    0022D E001      LDI	R16,1
    0022E E010      LDI	R17,0
    0022F 9508      RET
(0169) }
(0170) uint getMinute(void){
(0171)  return 1;
_getMinute:
    00230 E001      LDI	R16,1
    00231 E010      LDI	R17,0
    00232 9508      RET
(0172) }
(0173) uint getSecond(void){
(0174)  return 1;
_getSecond:
    00233 E001      LDI	R16,1
    00234 E010      LDI	R17,0
    00235 9508      RET
(0175) }
(0176) void setTime(uint year,uint month,uint day,uint week,uint hour,uint minute,uint second){
_setTime:
  second               --> Y,+12
  minute               --> Y,+10
  hour                 --> Y,+8
  week                 --> Y,+6
  day                  --> Y,+4
  month                --> Y,+2
  year                 --> Y,+0
    00236 9508      RET
_showTime_page:
  y                    --> R10
    00237 940E 15F0 CALL	push_xgset303C
    00239 0158      MOVW	R10,R16
(0177) 
(0178) }
(0179) //显示时间，年月日时分秒，用于page调用。没有改变AC，会接着写
(0180) void showTime_page(uint y){
(0181)    //PORTE=~Read1302(0x81);
(0182)    //年
(0183)     lcd_write_str_con(y, "20");
    0023A E020      LDI	R18,0
    0023B E031      LDI	R19,1
    0023C 2D0A      MOV	R16,R10
    0023D 940E 0560 CALL	_lcd_write_str_con
(0184)     lcd_write_char_con(y, 0x30|((Read1302(0x8D)>>4)&0x0F));
    0023F E80D      LDI	R16,0x8D
    00240 DF0D      RCALL	_Read1302
    00241 2F20      MOV	R18,R16
    00242 9522      SWAP	R18
    00243 702F      ANDI	R18,0xF
    00244 702F      ANDI	R18,0xF
    00245 6320      ORI	R18,0x30
    00246 2D0A      MOV	R16,R10
    00247 940E 04BE CALL	_lcd_write_char_con
(0185)     lcd_write_char_con(y,0x30|(Read1302(0x8D)&0x0F)); 
    00249 E80D      LDI	R16,0x8D
    0024A DF03      RCALL	_Read1302
    0024B 2F20      MOV	R18,R16
    0024C 702F      ANDI	R18,0xF
    0024D 6320      ORI	R18,0x30
    0024E 2D0A      MOV	R16,R10
    0024F 940E 04BE CALL	_lcd_write_char_con
(0186) 	lcd_write_char_con(y,'-');
    00251 E22D      LDI	R18,0x2D
    00252 2D0A      MOV	R16,R10
    00253 940E 04BE CALL	_lcd_write_char_con
(0187) 	 //月
(0188) 	 lcd_write_char_con(y, 0x30|((Read1302(0x89)>>4)&0x01));
    00255 E809      LDI	R16,0x89
    00256 DEF7      RCALL	_Read1302
    00257 2EC0      MOV	R12,R16
    00258 2D2C      MOV	R18,R12
    00259 9522      SWAP	R18
    0025A 702F      ANDI	R18,0xF
    0025B 7021      ANDI	R18,1
    0025C 6320      ORI	R18,0x30
    0025D 2D0A      MOV	R16,R10
    0025E 940E 04BE CALL	_lcd_write_char_con
(0189)      lcd_write_char_con(y,0x30|(Read1302(0x89)&0x0F)); 
    00260 E809      LDI	R16,0x89
    00261 DEEC      RCALL	_Read1302
    00262 2F40      MOV	R20,R16
    00263 2F24      MOV	R18,R20
    00264 702F      ANDI	R18,0xF
    00265 6320      ORI	R18,0x30
    00266 2D0A      MOV	R16,R10
    00267 940E 04BE CALL	_lcd_write_char_con
(0190) 	 lcd_write_char_con(y,'-');
    00269 E22D      LDI	R18,0x2D
    0026A 2D0A      MOV	R16,R10
    0026B 940E 04BE CALL	_lcd_write_char_con
(0191) 	 //日
(0192) 	 lcd_write_char_con(y, 0x30|((Read1302(0x87)>>4)&0x03));
    0026D E807      LDI	R16,0x87
    0026E DEDF      RCALL	_Read1302
    0026F 2EC0      MOV	R12,R16
    00270 2D2C      MOV	R18,R12
    00271 9522      SWAP	R18
    00272 702F      ANDI	R18,0xF
    00273 7023      ANDI	R18,3
    00274 6320      ORI	R18,0x30
    00275 2D0A      MOV	R16,R10
    00276 940E 04BE CALL	_lcd_write_char_con
(0193)      lcd_write_char_con(y,0x30|(Read1302(0x87)&0x0F)); 
    00278 E807      LDI	R16,0x87
    00279 DED4      RCALL	_Read1302
    0027A 2F40      MOV	R20,R16
    0027B 2F24      MOV	R18,R20
    0027C 702F      ANDI	R18,0xF
    0027D 6320      ORI	R18,0x30
    0027E 2D0A      MOV	R16,R10
    0027F 940E 04BE CALL	_lcd_write_char_con
(0194) 	 lcd_write_char_con(y,' ');
    00281 E220      LDI	R18,0x20
    00282 2D0A      MOV	R16,R10
    00283 940E 04BE CALL	_lcd_write_char_con
(0195) 	//时
(0196) 	 lcd_write_char_con(y, 0x30|((Read1302(0x85)>>4)&0x03));
    00285 E805      LDI	R16,0x85
    00286 DEC7      RCALL	_Read1302
    00287 2EC0      MOV	R12,R16
    00288 2D2C      MOV	R18,R12
    00289 9522      SWAP	R18
    0028A 702F      ANDI	R18,0xF
    0028B 7023      ANDI	R18,3
    0028C 6320      ORI	R18,0x30
    0028D 2D0A      MOV	R16,R10
    0028E 940E 04BE CALL	_lcd_write_char_con
(0197) 	 lcd_write_char_con(y,0x30|(Read1302(0x85)&0x0F)); 
    00290 E805      LDI	R16,0x85
    00291 DEBC      RCALL	_Read1302
    00292 2F40      MOV	R20,R16
    00293 2F24      MOV	R18,R20
    00294 702F      ANDI	R18,0xF
    00295 6320      ORI	R18,0x30
    00296 2D0A      MOV	R16,R10
    00297 940E 04BE CALL	_lcd_write_char_con
(0198) 	 lcd_write_char_con(y,':');
    00299 E32A      LDI	R18,0x3A
    0029A 2D0A      MOV	R16,R10
    0029B 940E 04BE CALL	_lcd_write_char_con
(0199) 	//分
(0200) 	 lcd_write_char_con(y, 0x30|Read1302(0x83)>>4);
    0029D E803      LDI	R16,0x83
    0029E DEAF      RCALL	_Read1302
    0029F 2EC0      MOV	R12,R16
    002A0 2D2C      MOV	R18,R12
    002A1 9522      SWAP	R18
    002A2 702F      ANDI	R18,0xF
    002A3 6320      ORI	R18,0x30
    002A4 2D0A      MOV	R16,R10
    002A5 940E 04BE CALL	_lcd_write_char_con
(0201) 	 lcd_write_char_con(y,0x30|(Read1302(0x83)&0x0F));
    002A7 E803      LDI	R16,0x83
    002A8 DEA5      RCALL	_Read1302
    002A9 2F40      MOV	R20,R16
    002AA 2F24      MOV	R18,R20
    002AB 702F      ANDI	R18,0xF
    002AC 6320      ORI	R18,0x30
    002AD 2D0A      MOV	R16,R10
    002AE 940E 04BE CALL	_lcd_write_char_con
(0202) 	 lcd_write_char_con(y,':');
    002B0 E32A      LDI	R18,0x3A
    002B1 2D0A      MOV	R16,R10
    002B2 940E 04BE CALL	_lcd_write_char_con
(0203) 	//秒
(0204) 	 lcd_write_char_con(y, 0x30|(Read1302(0x81)>>4));
    002B4 E801      LDI	R16,0x81
    002B5 DE98      RCALL	_Read1302
    002B6 2EC0      MOV	R12,R16
    002B7 2D2C      MOV	R18,R12
    002B8 9522      SWAP	R18
    002B9 702F      ANDI	R18,0xF
    002BA 6320      ORI	R18,0x30
    002BB 2D0A      MOV	R16,R10
    002BC 940E 04BE CALL	_lcd_write_char_con
(0205) 	 lcd_write_char_con(y,0x30|(Read1302(0x81)&0x0F));
    002BE E801      LDI	R16,0x81
    002BF DE8E      RCALL	_Read1302
    002C0 2F40      MOV	R20,R16
    002C1 2F24      MOV	R18,R20
    002C2 702F      ANDI	R18,0xF
    002C3 6320      ORI	R18,0x30
    002C4 2D0A      MOV	R16,R10
    002C5 940E 04BE CALL	_lcd_write_char_con
    002C7 940C 15F7 JMP	pop_xgset303C
FILE: E:\ICCDemo\Temp_Control\temp_control\key.c
(0001) #include<iom128v.h>
(0002) #include "delay.h"
(0003) #include "lcd.h"
(0004) uchar key_value='n';
(0005) void KeyInit(void){
_KeyInit:
    002C9 9508      RET
_KeyScan:
    002CA 934A      ST	-Y,R20
    002CB 935A      ST	-Y,R21
(0006) }
(0007) uchar KeyScan(void){
(0008)   //初始化端口
(0009)    DDRC=0xE0;
    002CC EE80      LDI	R24,0xE0
    002CD BB84      OUT	0x14,R24
(0010)    DDRG|=0x10;
    002CE 9180 0064 LDS	R24,0x64
    002D0 6180      ORI	R24,0x10
    002D1 9380 0064 STS	0x64,R24
(0011)    
(0012)    //第一次扫描
(0013)    PORTC=0xDF;
    002D3 ED8F      LDI	R24,0xDF
    002D4 BB85      OUT	0x15,R24
(0014)    PORTG|=0x10;
    002D5 9180 0065 LDS	R24,0x65
    002D7 6180      ORI	R24,0x10
    002D8 9380 0065 STS	0x65,R24
(0015)    delay_us(1);
    002DA E001      LDI	R16,1
    002DB E010      LDI	R17,0
    002DC 940E 00FD CALL	_delay_us
(0016)    switch(PINC)
    002DE B343      IN	R20,0x13
    002DF 2755      CLR	R21
    002E0 3C4F      CPI	R20,0xCF
    002E1 E0E0      LDI	R30,0
    002E2 075E      CPC	R21,R30
    002E3 F0E9      BEQ	0x0301
    002E4 3C4F      CPI	R20,0xCF
    002E5 E0E0      LDI	R30,0
    002E6 075E      CPC	R21,R30
    002E7 F0DC      BLT	0x0303
    002E8 3D47      CPI	R20,0xD7
    002E9 E0E0      LDI	R30,0
    002EA 075E      CPC	R21,R30
    002EB F099      BEQ	0x02FF
    002EC 3D4B      CPI	R20,0xDB
    002ED E0E0      LDI	R30,0
    002EE 075E      CPC	R21,R30
    002EF F069      BEQ	0x02FD
    002F0 3D4D      CPI	R20,0xDD
    002F1 E0E0      LDI	R30,0
    002F2 075E      CPC	R21,R30
    002F3 F039      BEQ	0x02FB
    002F4 3D4E      CPI	R20,0xDE
    002F5 E0E0      LDI	R30,0
    002F6 075E      CPC	R21,R30
    002F7 F009      BEQ	0x02F9
    002F8 C00A      RJMP	0x0303
(0017)    {
(0018)    		case 0xDE:return  'e';//'esc';
    002F9 E605      LDI	R16,0x65
    002FA C099      RJMP	0x0394
(0019) 		case 0xdd:return  'a';//'alm';
    002FB E601      LDI	R16,0x61
    002FC C097      RJMP	0x0394
(0020) 		case 0xdb:return  'd';//'down';  
    002FD E604      LDI	R16,0x64
    002FE C095      RJMP	0x0394
(0021) 		case 0xd7:return  'u';//'up';
    002FF E705      LDI	R16,0x75
    00300 C093      RJMP	0x0394
(0022) 		case 0xcf:return  'l';//'left';
    00301 E60C      LDI	R16,0x6C
    00302 C091      RJMP	0x0394
(0023) 		default:break;	   
(0024)    } 
(0025)     //第二次扫描
(0026)    PORTC=0xBF;
    00303 EB8F      LDI	R24,0xBF
    00304 BB85      OUT	0x15,R24
(0027)    PORTG|=0x10;
    00305 9180 0065 LDS	R24,0x65
    00307 6180      ORI	R24,0x10
    00308 9380 0065 STS	0x65,R24
(0028)    delay_us(1);
    0030A E001      LDI	R16,1
    0030B E010      LDI	R17,0
    0030C 940E 00FD CALL	_delay_us
(0029)    switch(PINC)
    0030E B343      IN	R20,0x13
    0030F 2755      CLR	R21
    00310 3A4F      CPI	R20,0xAF
    00311 E0E0      LDI	R30,0
    00312 075E      CPC	R21,R30
    00313 F0E9      BEQ	0x0331
    00314 3A4F      CPI	R20,0xAF
    00315 E0E0      LDI	R30,0
    00316 075E      CPC	R21,R30
    00317 F0DC      BLT	0x0333
    00318 3B47      CPI	R20,0xB7
    00319 E0E0      LDI	R30,0
    0031A 075E      CPC	R21,R30
    0031B F099      BEQ	0x032F
    0031C 3B4B      CPI	R20,0xBB
    0031D E0E0      LDI	R30,0
    0031E 075E      CPC	R21,R30
    0031F F069      BEQ	0x032D
    00320 3B4D      CPI	R20,0xBD
    00321 E0E0      LDI	R30,0
    00322 075E      CPC	R21,R30
    00323 F039      BEQ	0x032B
    00324 3B4E      CPI	R20,0xBE
    00325 E0E0      LDI	R30,0
    00326 075E      CPC	R21,R30
    00327 F009      BEQ	0x0329
    00328 C00A      RJMP	0x0333
(0030)    {
(0031)    		case 0xbE:return 's';//'set';
    00329 E703      LDI	R16,0x73
    0032A C069      RJMP	0x0394
(0032) 		case 0xbd:return 'r';//'right';
    0032B E702      LDI	R16,0x72
    0032C C067      RJMP	0x0394
(0033) 		case 0xbb:return 't';//'ent';  
    0032D E704      LDI	R16,0x74
    0032E C065      RJMP	0x0394
(0034) 		case 0xb7:return 'c';//'clr';
    0032F E603      LDI	R16,0x63
    00330 C063      RJMP	0x0394
(0035) 		case 0xaf:return '+';//'+/-';
    00331 E20B      LDI	R16,0x2B
    00332 C061      RJMP	0x0394
(0036) 		default:break;	   
(0037)    } 
(0038)     //第三次扫描
(0039)    PORTC=0x7F;
    00333 E78F      LDI	R24,0x7F
    00334 BB85      OUT	0x15,R24
(0040)    PORTG|=0x10;
    00335 9180 0065 LDS	R24,0x65
    00337 6180      ORI	R24,0x10
    00338 9380 0065 STS	0x65,R24
(0041)    delay_us(1);
    0033A E001      LDI	R16,1
    0033B E010      LDI	R17,0
    0033C 940E 00FD CALL	_delay_us
(0042)    switch(PINC)
    0033E B343      IN	R20,0x13
    0033F 2755      CLR	R21
    00340 364F      CPI	R20,0x6F
    00341 E0E0      LDI	R30,0
    00342 075E      CPC	R21,R30
    00343 F0E9      BEQ	0x0361
    00344 364F      CPI	R20,0x6F
    00345 E0E0      LDI	R30,0
    00346 075E      CPC	R21,R30
    00347 F0DC      BLT	0x0363
    00348 3747      CPI	R20,0x77
    00349 E0E0      LDI	R30,0
    0034A 075E      CPC	R21,R30
    0034B F099      BEQ	0x035F
    0034C 374B      CPI	R20,0x7B
    0034D E0E0      LDI	R30,0
    0034E 075E      CPC	R21,R30
    0034F F069      BEQ	0x035D
    00350 374D      CPI	R20,0x7D
    00351 E0E0      LDI	R30,0
    00352 075E      CPC	R21,R30
    00353 F039      BEQ	0x035B
    00354 374E      CPI	R20,0x7E
    00355 E0E0      LDI	R30,0
    00356 075E      CPC	R21,R30
    00357 F009      BEQ	0x0359
    00358 C00A      RJMP	0x0363
(0043)    {
(0044)    		case 0x7E:return '0';
    00359 E300      LDI	R16,0x30
    0035A C039      RJMP	0x0394
(0045) 		case 0x7d:return '3';
    0035B E303      LDI	R16,0x33
    0035C C037      RJMP	0x0394
(0046) 		case 0x7b:return '2';  
    0035D E302      LDI	R16,0x32
    0035E C035      RJMP	0x0394
(0047) 		case 0x77:return '1';
    0035F E301      LDI	R16,0x31
    00360 C033      RJMP	0x0394
(0048) 		case 0x6f:return '6';
    00361 E306      LDI	R16,0x36
    00362 C031      RJMP	0x0394
(0049) 		default:break;	   
(0050)    } 
(0051)       //第四次扫描
(0052)    PORTC=0xFF;
    00363 EF8F      LDI	R24,0xFF
    00364 BB85      OUT	0x15,R24
(0053)    PORTG&=0x0F;
    00365 9180 0065 LDS	R24,0x65
    00367 708F      ANDI	R24,0xF
    00368 9380 0065 STS	0x65,R24
(0054)    delay_us(1);
    0036A E001      LDI	R16,1
    0036B E010      LDI	R17,0
    0036C 940E 00FD CALL	_delay_us
(0055)    switch(PINC)
    0036E B343      IN	R20,0x13
    0036F 2755      CLR	R21
    00370 3E4F      CPI	R20,0xEF
    00371 E0E0      LDI	R30,0
    00372 075E      CPC	R21,R30
    00373 F0E9      BEQ	0x0391
    00374 3E4F      CPI	R20,0xEF
    00375 E0E0      LDI	R30,0
    00376 075E      CPC	R21,R30
    00377 F0DC      BLT	0x0393
    00378 3F47      CPI	R20,0xF7
    00379 E0E0      LDI	R30,0
    0037A 075E      CPC	R21,R30
    0037B F099      BEQ	0x038F
    0037C 3F4B      CPI	R20,0xFB
    0037D E0E0      LDI	R30,0
    0037E 075E      CPC	R21,R30
    0037F F069      BEQ	0x038D
    00380 3F4D      CPI	R20,0xFD
    00381 E0E0      LDI	R30,0
    00382 075E      CPC	R21,R30
    00383 F039      BEQ	0x038B
    00384 3F4E      CPI	R20,0xFE
    00385 E0E0      LDI	R30,0
    00386 075E      CPC	R21,R30
    00387 F009      BEQ	0x0389
    00388 C00A      RJMP	0x0393
(0056)    {
(0057)    		case 0xFE:return '7';
    00389 E307      LDI	R16,0x37
    0038A C009      RJMP	0x0394
(0058) 		case 0xFd:return '8';
    0038B E308      LDI	R16,0x38
    0038C C007      RJMP	0x0394
(0059) 		case 0xFb:return '9';  
    0038D E309      LDI	R16,0x39
    0038E C005      RJMP	0x0394
(0060) 		case 0xF7:return '4';
    0038F E304      LDI	R16,0x34
    00390 C003      RJMP	0x0394
(0061) 		case 0xEf:return '5';
    00391 E305      LDI	R16,0x35
    00392 C001      RJMP	0x0394
(0062) 		default:break;	   
(0063)    }
(0064)  return 'n';
    00393 E60E      LDI	R16,0x6E
    00394 9159      LD	R21,Y+
    00395 9149      LD	R20,Y+
    00396 9508      RET
_KeyScan_once:
  keyValue2            --> R10
  keyValue             --> R20
    00397 92AA      ST	-Y,R10
    00398 934A      ST	-Y,R20
(0065)    
(0066) }
(0067) //********************************
(0068) //		加上延时抖动的读取，一次读取一个
(0069) //********************************
(0070) uchar KeyScan_once(void){
(0071) 	  uchar keyValue,keyValue2;
(0072) 	  keyValue=KeyScan();
    00399 DF30      RCALL	_KeyScan
    0039A 2F40      MOV	R20,R16
(0073) 	  delay_ms(2);
    0039B E002      LDI	R16,2
    0039C E010      LDI	R17,0
    0039D 940E 0107 CALL	_delay_ms
(0074) 	  keyValue2=KeyScan();
    0039F DF2A      RCALL	_KeyScan
    003A0 2EA0      MOV	R10,R16
(0075) 	 if(keyValue==keyValue2 && keyValue!='n'){//两次扫描，消除抖动
    003A1 1740      CP	R20,R16
    003A2 F461      BNE	0x03AF
    003A3 364E      CPI	R20,0x6E
    003A4 F051      BEQ	0x03AF
(0076) 	 	if(key_value==keyValue){//如果还是上一次保存的值则代表一直按着，返回‘n’
    003A5 9020 0103 LDS	R2,key_value
    003A7 1624      CP	R2,R20
    003A8 F411      BNE	0x03AB
(0077) 		    return 'n';  
    003A9 E60E      LDI	R16,0x6E
    003AA C008      RJMP	0x03B3
(0078) 	    }else{                  //松开后第一次按下，返回该键的值
(0079) 		 key_value=keyValue;
    003AB 9340 0103 STS	key_value,R20
(0080) 		  return keyValue;
    003AD 2F04      MOV	R16,R20
    003AE C004      RJMP	0x03B3
(0081) 		}
(0082) 	 }else{                     //因为读取键盘的值会多次刷新，所以在松开按键时key_value重置
(0083) 	   key_value='n';
    003AF E68E      LDI	R24,0x6E
    003B0 9380 0103 STS	key_value,R24
(0084) 	   return 'n';
    003B2 E60E      LDI	R16,0x6E
    003B3 9149      LD	R20,Y+
    003B4 90A9      LD	R10,Y+
    003B5 9508      RET
_lcd_bz_1:
  result               --> R20
    003B6 934A      ST	-Y,R20
    003B7 935A      ST	-Y,R21
FILE: E:\ICCDemo\Temp_Control\temp_control\lcd.c
(0001) #include<iom128v.h>
(0002) #include "lcd.h"
(0003) #include "delay.h" 
(0004) #define rs_l PORTG&=~(1<<PG1)
(0005) #define rs_h PORTG|=1<<PG1
(0006) #define rw_l PORTG&=~(1<<PG0)
(0007) #define rw_h PORTG|=1<<PG0
(0008) #define ep1_l PORTG&=~(1<<PG3)
(0009) #define ep1_h PORTG|=1<<PG3
(0010) #define ep2_l PORTF&=~(1<<PF0)
(0011) #define ep2_h PORTF|=1<<PF0
(0012) //***********************************
(0013) //上半屏幕
(0014) //**********************************
(0015) /*
(0016)  读忙程序。命令后，读入BF
(0017) */
(0018) uint lcd_bz_1(void){
(0019) 	uint result;
(0020) 	DDRA=0x00;
    003B8 2422      CLR	R2
    003B9 BA2A      OUT	0x1A,R2
(0021) 	rs_l;
    003BA 9180 0065 LDS	R24,0x65
    003BC 7F8D      ANDI	R24,0xFD
    003BD 9380 0065 STS	0x65,R24
(0022) 	rw_h;
    003BF 9180 0065 LDS	R24,0x65
    003C1 6081      ORI	R24,1
    003C2 9380 0065 STS	0x65,R24
(0023) 	ep1_h;
    003C4 9180 0065 LDS	R24,0x65
    003C6 6088      ORI	R24,0x8
    003C7 9380 0065 STS	0x65,R24
(0024) 	delay_ms(1);
    003C9 E001      LDI	R16,1
    003CA E010      LDI	R17,0
    003CB 940E 0107 CALL	_delay_ms
(0025) 	result=PINA&(1<<PINA7);
    003CD B349      IN	R20,0x19
    003CE 2755      CLR	R21
    003CF 7840      ANDI	R20,0x80
    003D0 7050      ANDI	R21,0
(0026) 	DDRA=0xFF;
    003D1 EF8F      LDI	R24,0xFF
    003D2 BB8A      OUT	0x1A,R24
(0027) 	ep1_l;
    003D3 9180 0065 LDS	R24,0x65
    003D5 7F87      ANDI	R24,0xF7
    003D6 9380 0065 STS	0x65,R24
(0028) 	return result;
    003D8 018A      MOVW	R16,R20
    003D9 9159      LD	R21,Y+
    003DA 9149      LD	R20,Y+
    003DB 9508      RET
_lcd_wcmd_1:
  cmd                  --> R10
    003DC 92AA      ST	-Y,R10
    003DD 2EA0      MOV	R10,R16
(0029) }
(0030) void lcd_wcmd_1(uchar cmd){
(0031) 	 while(lcd_bz_1());
    003DE DFD7      RCALL	_lcd_bz_1
    003DF 3000      CPI	R16,0
    003E0 0701      CPC	R16,R17
    003E1 F7E1      BNE	0x03DE
(0032) 	 rs_l;
    003E2 9180 0065 LDS	R24,0x65
    003E4 7F8D      ANDI	R24,0xFD
    003E5 9380 0065 STS	0x65,R24
(0033) 	 rw_l;
    003E7 9180 0065 LDS	R24,0x65
    003E9 7F8E      ANDI	R24,0xFE
    003EA 9380 0065 STS	0x65,R24
(0034) 	 ep1_l;
    003EC 9180 0065 LDS	R24,0x65
    003EE 7F87      ANDI	R24,0xF7
    003EF 9380 0065 STS	0x65,R24
(0035) 	 delay_ms(1);
    003F1 E001      LDI	R16,1
    003F2 E010      LDI	R17,0
    003F3 940E 0107 CALL	_delay_ms
(0036) 	 PORTA=cmd;
    003F5 BAAB      OUT	0x1B,R10
(0037) 	 delay_ms(2);
    003F6 E002      LDI	R16,2
    003F7 E010      LDI	R17,0
    003F8 940E 0107 CALL	_delay_ms
(0038) 	 ep1_h;
    003FA 9180 0065 LDS	R24,0x65
    003FC 6088      ORI	R24,0x8
    003FD 9380 0065 STS	0x65,R24
(0039) 	 delay_ms(1);
    003FF E001      LDI	R16,1
    00400 E010      LDI	R17,0
    00401 940E 0107 CALL	_delay_ms
(0040) 	 ep1_l;
    00403 9180 0065 LDS	R24,0x65
    00405 7F87      ANDI	R24,0xF7
    00406 9380 0065 STS	0x65,R24
(0041) 	 return;
    00408 90A9      LD	R10,Y+
    00409 9508      RET
_lcd_wdat_1:
  dat                  --> R10
    0040A 92AA      ST	-Y,R10
    0040B 2EA0      MOV	R10,R16
(0042) }
(0043) /*
(0044) 写输出数据,char
(0045) */
(0046) void lcd_wdat_1(uchar dat){
(0047) 	 while(lcd_bz_1());
    0040C DFA9      RCALL	_lcd_bz_1
    0040D 3000      CPI	R16,0
    0040E 0701      CPC	R16,R17
    0040F F7E1      BNE	0x040C
(0048) 	 rs_h;
    00410 9180 0065 LDS	R24,0x65
    00412 6082      ORI	R24,2
    00413 9380 0065 STS	0x65,R24
(0049) 	 rw_l;
    00415 9180 0065 LDS	R24,0x65
    00417 7F8E      ANDI	R24,0xFE
    00418 9380 0065 STS	0x65,R24
(0050) 	 ep1_l;
    0041A 9180 0065 LDS	R24,0x65
    0041C 7F87      ANDI	R24,0xF7
    0041D 9380 0065 STS	0x65,R24
(0051) 	 PORTA=dat;
    0041F BAAB      OUT	0x1B,R10
(0052) 	 delay_ms(2);
    00420 E002      LDI	R16,2
    00421 E010      LDI	R17,0
    00422 940E 0107 CALL	_delay_ms
(0053) 	 ep1_h;
    00424 9180 0065 LDS	R24,0x65
    00426 6088      ORI	R24,0x8
    00427 9380 0065 STS	0x65,R24
(0054) 	 delay_ms(2);
    00429 E002      LDI	R16,2
    0042A E010      LDI	R17,0
    0042B 940E 0107 CALL	_delay_ms
(0055) 	 ep1_l;
    0042D 9180 0065 LDS	R24,0x65
    0042F 7F87      ANDI	R24,0xF7
    00430 9380 0065 STS	0x65,R24
    00432 90A9      LD	R10,Y+
    00433 9508      RET
(0056) }
(0057) 
(0058) /*清显示*/
(0059) void lcd_clear_1(void) 
(0060) {
(0061) 	lcd_wcmd_1(0x01);
_lcd_clear_1:
    00434 E001      LDI	R16,1
    00435 DFA6      RCALL	_lcd_wcmd_1
(0062) 	delay_ms(1);
    00436 E001      LDI	R16,1
    00437 E010      LDI	R17,0
    00438 940C 0107 JMP	_delay_ms
_lcd_bz_2:
  result               --> R20
    0043A 934A      ST	-Y,R20
    0043B 935A      ST	-Y,R21
(0063) }
(0064) //***********************************
(0065) //    下半屏幕
(0066) //***********************************
(0067) uint lcd_bz_2(void){
(0068) 	uint result;
(0069) 	DDRA=0x00;
    0043C 2422      CLR	R2
    0043D BA2A      OUT	0x1A,R2
(0070) 	rs_l;
    0043E 9180 0065 LDS	R24,0x65
    00440 7F8D      ANDI	R24,0xFD
    00441 9380 0065 STS	0x65,R24
(0071) 	rw_h;
    00443 9180 0065 LDS	R24,0x65
    00445 6081      ORI	R24,1
    00446 9380 0065 STS	0x65,R24
(0072) 	ep2_h;
    00448 9180 0062 LDS	R24,0x62
    0044A 6081      ORI	R24,1
    0044B 9380 0062 STS	0x62,R24
(0073) 	delay_ms(1);
    0044D E001      LDI	R16,1
    0044E E010      LDI	R17,0
    0044F 940E 0107 CALL	_delay_ms
(0074) 	result=PINA&(1<<PINA7);
    00451 B349      IN	R20,0x19
    00452 2755      CLR	R21
    00453 7840      ANDI	R20,0x80
    00454 7050      ANDI	R21,0
(0075) 	DDRA=0xFF;
    00455 EF8F      LDI	R24,0xFF
    00456 BB8A      OUT	0x1A,R24
(0076) 	ep2_l;
    00457 9180 0062 LDS	R24,0x62
    00459 7F8E      ANDI	R24,0xFE
    0045A 9380 0062 STS	0x62,R24
(0077) 	return result;
    0045C 018A      MOVW	R16,R20
    0045D 9159      LD	R21,Y+
    0045E 9149      LD	R20,Y+
    0045F 9508      RET
_lcd_wcmd_2:
  cmd                  --> R10
    00460 92AA      ST	-Y,R10
    00461 2EA0      MOV	R10,R16
(0078) }
(0079) void lcd_wcmd_2(uchar cmd){
(0080) 	 while(lcd_bz_2());
    00462 DFD7      RCALL	_lcd_bz_2
    00463 3000      CPI	R16,0
    00464 0701      CPC	R16,R17
    00465 F7E1      BNE	0x0462
(0081) 	 rs_l;
    00466 9180 0065 LDS	R24,0x65
    00468 7F8D      ANDI	R24,0xFD
    00469 9380 0065 STS	0x65,R24
(0082) 	 rw_l;
    0046B 9180 0065 LDS	R24,0x65
    0046D 7F8E      ANDI	R24,0xFE
    0046E 9380 0065 STS	0x65,R24
(0083) 	 ep2_l;
    00470 9180 0062 LDS	R24,0x62
    00472 7F8E      ANDI	R24,0xFE
    00473 9380 0062 STS	0x62,R24
(0084) 	 delay_ms(1);
    00475 E001      LDI	R16,1
    00476 E010      LDI	R17,0
    00477 940E 0107 CALL	_delay_ms
(0085) 	 PORTA=cmd;
    00479 BAAB      OUT	0x1B,R10
(0086) 	 delay_ms(2);
    0047A E002      LDI	R16,2
    0047B E010      LDI	R17,0
    0047C 940E 0107 CALL	_delay_ms
(0087) 	 ep2_h;
    0047E 9180 0062 LDS	R24,0x62
    00480 6081      ORI	R24,1
    00481 9380 0062 STS	0x62,R24
(0088) 	 delay_ms(1);
    00483 E001      LDI	R16,1
    00484 E010      LDI	R17,0
    00485 940E 0107 CALL	_delay_ms
(0089) 	 ep2_l;
    00487 9180 0062 LDS	R24,0x62
    00489 7F8E      ANDI	R24,0xFE
    0048A 9380 0062 STS	0x62,R24
    0048C 90A9      LD	R10,Y+
    0048D 9508      RET
_lcd_wdat_2:
  dat                  --> R10
    0048E 92AA      ST	-Y,R10
    0048F 2EA0      MOV	R10,R16
(0090) }
(0091) //  写输出数据,char
(0092) void lcd_wdat_2(uchar dat){
(0093) 	 while(lcd_bz_2());
    00490 DFA9      RCALL	_lcd_bz_2
    00491 3000      CPI	R16,0
    00492 0701      CPC	R16,R17
    00493 F7E1      BNE	0x0490
(0094) 	 rs_h;
    00494 9180 0065 LDS	R24,0x65
    00496 6082      ORI	R24,2
    00497 9380 0065 STS	0x65,R24
(0095) 	 rw_l;
    00499 9180 0065 LDS	R24,0x65
    0049B 7F8E      ANDI	R24,0xFE
    0049C 9380 0065 STS	0x65,R24
(0096) 	 ep2_l;
    0049E 9180 0062 LDS	R24,0x62
    004A0 7F8E      ANDI	R24,0xFE
    004A1 9380 0062 STS	0x62,R24
(0097) 	 PORTA=dat;
    004A3 BAAB      OUT	0x1B,R10
(0098) 	 delay_ms(2);
    004A4 E002      LDI	R16,2
    004A5 E010      LDI	R17,0
    004A6 940E 0107 CALL	_delay_ms
(0099) 	 ep2_h;
    004A8 9180 0062 LDS	R24,0x62
    004AA 6081      ORI	R24,1
    004AB 9380 0062 STS	0x62,R24
(0100) 	 delay_ms(2);
    004AD E002      LDI	R16,2
    004AE E010      LDI	R17,0
    004AF 940E 0107 CALL	_delay_ms
(0101) 	 ep2_l;
    004B1 9180 0062 LDS	R24,0x62
    004B3 7F8E      ANDI	R24,0xFE
    004B4 9380 0062 STS	0x62,R24
    004B6 90A9      LD	R10,Y+
    004B7 9508      RET
(0102) }
(0103) /*清显示*/
(0104) void lcd_clear_2(void) 
(0105) {
(0106) 	
(0107) 	lcd_wcmd_2(0x01);
_lcd_clear_2:
    004B8 E001      LDI	R16,1
    004B9 DFA6      RCALL	_lcd_wcmd_2
(0108) 
(0109) 	delay_ms(1);
    004BA E001      LDI	R16,1
    004BB E010      LDI	R17,0
    004BC 940C 0107 JMP	_delay_ms
_lcd_write_char_con:
  data                 --> R10
  y                    --> R20
    004BE 92AA      ST	-Y,R10
    004BF 934A      ST	-Y,R20
    004C0 2EA2      MOV	R10,R18
    004C1 2F40      MOV	R20,R16
(0110) 
(0111) }
(0112) 
(0113) //*************************************************
(0114) //					写字符
(0115) //***************************************************
(0116) /*
(0117)   附带y。调用 lcd_wdat（）方法。传入时转换为char。直接连续写入使用
(0118) */
(0119) void lcd_write_char_con(unsigned char y,unsigned char data) 
(0120) {
(0121) 	
(0122)     if (y == 0 || y==1) 
    004C2 2344      TST	R20
    004C3 F011      BEQ	0x04C6
    004C4 3041      CPI	R20,1
    004C5 F419      BNE	0x04C9
(0123)     {
(0124)     	
(0125) 		 lcd_wdat_1( data);
    004C6 2D0A      MOV	R16,R10
    004C7 DF42      RCALL	_lcd_wdat_1
(0126)     }else  if(y==2 || y==3 )
    004C8 C006      RJMP	0x04CF
    004C9 3042      CPI	R20,2
    004CA F011      BEQ	0x04CD
    004CB 3043      CPI	R20,3
    004CC F411      BNE	0x04CF
(0127)     {
(0128)     	
(0129) 		 lcd_wdat_2( data);
    004CD 2D0A      MOV	R16,R10
    004CE DFBF      RCALL	_lcd_wdat_2
(0130)     }
(0131)    return; 
    004CF 9149      LD	R20,Y+
    004D0 90A9      LD	R10,Y+
    004D1 9508      RET
_lcd_write_pos:
  y                    --> R22
  x                    --> R20
    004D2 934A      ST	-Y,R20
    004D3 936A      ST	-Y,R22
    004D4 2F62      MOV	R22,R18
    004D5 2F40      MOV	R20,R16
(0132) }
(0133) /*
(0134)   附带x,y。写光标位置
(0135) */
(0136) void lcd_write_pos(unsigned char x,unsigned char y) 
(0137) {
(0138) 	
(0139)     if (y == 0) 
    004D6 2366      TST	R22
    004D7 F421      BNE	0x04DC
(0140)     {
(0141)     	lcd_wcmd_1(0x80 + x);
    004D8 2F04      MOV	R16,R20
    004D9 5800      SUBI	R16,0x80
    004DA DF01      RCALL	_lcd_wcmd_1
(0142)     }
    004DB C011      RJMP	0x04ED
(0143)     else  if(y==1)
    004DC 3061      CPI	R22,1
    004DD F421      BNE	0x04E2
(0144)     {
(0145)     	lcd_wcmd_1(0x90 + x);
    004DE 2F04      MOV	R16,R20
    004DF 5700      SUBI	R16,0x70
    004E0 DEFB      RCALL	_lcd_wcmd_1
(0146)     }else  if(y==2)
    004E1 C00B      RJMP	0x04ED
    004E2 3062      CPI	R22,2
    004E3 F421      BNE	0x04E8
(0147)     {
(0148)     	lcd_wcmd_2(0x80 + x);
    004E4 2F04      MOV	R16,R20
    004E5 5800      SUBI	R16,0x80
    004E6 DF79      RCALL	_lcd_wcmd_2
(0149)     }else  if(y==3)
    004E7 C005      RJMP	0x04ED
    004E8 3063      CPI	R22,3
    004E9 F419      BNE	0x04ED
(0150)     {
(0151)     	lcd_wcmd_2(0x90 + x);
    004EA 2F04      MOV	R16,R20
    004EB 5700      SUBI	R16,0x70
    004EC DF73      RCALL	_lcd_wcmd_2
(0152)     }
(0153)    return; 
    004ED 9169      LD	R22,Y+
    004EE 9149      LD	R20,Y+
    004EF 9508      RET
_lcd_write_char:
  data                 --> R10
  y                    --> R22
  x                    --> R20
    004F0 940E 15E2 CALL	push_xgsetF00C
    004F2 2F62      MOV	R22,R18
    004F3 2F40      MOV	R20,R16
    004F4 80AE      LDD	R10,Y+6
(0154) }
(0155) /*
(0156)   附带x,y。调用 lcd_wdat（）方法。传入时转换为char
(0157) */
(0158) void lcd_write_char(unsigned char x,unsigned char y,unsigned char data) 
(0159) {
(0160) 	
(0161)     if (y == 0) 
    004F5 2366      TST	R22
    004F6 F431      BNE	0x04FD
(0162)     {
(0163)     	lcd_wcmd_1(0x80 + x);
    004F7 2F04      MOV	R16,R20
    004F8 5800      SUBI	R16,0x80
    004F9 DEE2      RCALL	_lcd_wcmd_1
(0164) 		 lcd_wdat_1( data);
    004FA 2D0A      MOV	R16,R10
    004FB DF0E      RCALL	_lcd_wdat_1
(0165)     }
    004FC C017      RJMP	0x0514
(0166)     else  if(y==1)
    004FD 3061      CPI	R22,1
    004FE F431      BNE	0x0505
(0167)     {
(0168)     	lcd_wcmd_1(0x90 + x);
    004FF 2F04      MOV	R16,R20
    00500 5700      SUBI	R16,0x70
    00501 DEDA      RCALL	_lcd_wcmd_1
(0169) 		 lcd_wdat_1( data);
    00502 2D0A      MOV	R16,R10
    00503 DF06      RCALL	_lcd_wdat_1
(0170)     }else  if(y==2)
    00504 C00F      RJMP	0x0514
    00505 3062      CPI	R22,2
    00506 F431      BNE	0x050D
(0171)     {
(0172)     	lcd_wcmd_2(0x80 + x);
    00507 2F04      MOV	R16,R20
    00508 5800      SUBI	R16,0x80
    00509 DF56      RCALL	_lcd_wcmd_2
(0173) 		 lcd_wdat_2( data);
    0050A 2D0A      MOV	R16,R10
    0050B DF82      RCALL	_lcd_wdat_2
(0174)     }else  if(y==3)
    0050C C007      RJMP	0x0514
    0050D 3063      CPI	R22,3
    0050E F429      BNE	0x0514
(0175)     {
(0176)     	lcd_wcmd_2(0x90 + x);
    0050F 2F04      MOV	R16,R20
    00510 5700      SUBI	R16,0x70
    00511 DF4E      RCALL	_lcd_wcmd_2
(0177) 		 lcd_wdat_2( data);
    00512 2D0A      MOV	R16,R10
    00513 DF7A      RCALL	_lcd_wdat_2
(0178)     }
(0179)    return; 
    00514 940C 15E9 JMP	pop_xgsetF00C
_lcd_write_str:
  s                    --> R20
  y                    --> R10
  x                    --> R22
    00516 940E 15E2 CALL	push_xgsetF00C
    00518 2EA2      MOV	R10,R18
    00519 2F60      MOV	R22,R16
    0051A 814E      LDD	R20,Y+6
    0051B 815F      LDD	R21,Y+7
(0180) }
(0181) /*
(0182)   附带x,y。调用 lcd_wdat（）方法，会通过指针遍历字符串。不太好，还是自己循环遍历
(0183) */
(0184) void lcd_write_str(unsigned char x,unsigned char y,unsigned char *s) 
(0185) {
(0186) 	
(0187)     if (y == 0) 
    0051C 20AA      TST	R10
    0051D F471      BNE	0x052C
(0188)     {
(0189)     	lcd_wcmd_1(0x80 + x);
    0051E 2F06      MOV	R16,R22
    0051F 5800      SUBI	R16,0x80
    00520 DEBB      RCALL	_lcd_wcmd_1
    00521 C005      RJMP	0x0527
(0190) 		 while (*s) 
(0191)        {
(0192)     	lcd_wdat_1( *s);
    00522 01FA      MOVW	R30,R20
    00523 8100      LD	R16,Z
    00524 DEE5      RCALL	_lcd_wdat_1
(0193)     	s ++;
    00525 5F4F      SUBI	R20,0xFF
    00526 4F5F      SBCI	R21,0xFF
    00527 01FA      MOVW	R30,R20
    00528 8020      LD	R2,Z
    00529 2022      TST	R2
    0052A F7B9      BNE	0x0522
(0194)         }
(0195)     }
    0052B C032      RJMP	0x055E
(0196)     else  if(y==1)
    0052C 2D8A      MOV	R24,R10
    0052D 3081      CPI	R24,1
    0052E F471      BNE	0x053D
(0197)     {
(0198)     	lcd_wcmd_1(0x90 + x);
    0052F 2F06      MOV	R16,R22
    00530 5700      SUBI	R16,0x70
    00531 DEAA      RCALL	_lcd_wcmd_1
    00532 C005      RJMP	0x0538
(0199) 		 while (*s) 
(0200)         {
(0201)     	lcd_wdat_1( *s);
    00533 01FA      MOVW	R30,R20
    00534 8100      LD	R16,Z
    00535 DED4      RCALL	_lcd_wdat_1
(0202)     	s ++;
    00536 5F4F      SUBI	R20,0xFF
    00537 4F5F      SBCI	R21,0xFF
    00538 01FA      MOVW	R30,R20
    00539 8020      LD	R2,Z
    0053A 2022      TST	R2
    0053B F7B9      BNE	0x0533
(0203)        }
(0204)     }else  if(y==2)
    0053C C021      RJMP	0x055E
    0053D 2D8A      MOV	R24,R10
    0053E 3082      CPI	R24,2
    0053F F471      BNE	0x054E
(0205)     {
(0206)     	lcd_wcmd_2(0x80 + x);
    00540 2F06      MOV	R16,R22
    00541 5800      SUBI	R16,0x80
    00542 DF1D      RCALL	_lcd_wcmd_2
    00543 C005      RJMP	0x0549
(0207) 		  while (*s) 
(0208)        {
(0209)     	lcd_wdat_2( *s);
    00544 01FA      MOVW	R30,R20
    00545 8100      LD	R16,Z
    00546 DF47      RCALL	_lcd_wdat_2
(0210)     	s ++;
    00547 5F4F      SUBI	R20,0xFF
    00548 4F5F      SBCI	R21,0xFF
    00549 01FA      MOVW	R30,R20
    0054A 8020      LD	R2,Z
    0054B 2022      TST	R2
    0054C F7B9      BNE	0x0544
(0211)        }
(0212)     }else  if(y==3)
    0054D C010      RJMP	0x055E
    0054E 2D8A      MOV	R24,R10
    0054F 3083      CPI	R24,3
    00550 F469      BNE	0x055E
(0213)     {
(0214)     	lcd_wcmd_2(0x90 + x);
    00551 2F06      MOV	R16,R22
    00552 5700      SUBI	R16,0x70
    00553 DF0C      RCALL	_lcd_wcmd_2
    00554 C005      RJMP	0x055A
(0215) 		  while (*s) 
(0216)        {
(0217)     	lcd_wdat_2( *s);
    00555 01FA      MOVW	R30,R20
    00556 8100      LD	R16,Z
    00557 DF36      RCALL	_lcd_wdat_2
(0218)     	s ++;
    00558 5F4F      SUBI	R20,0xFF
    00559 4F5F      SBCI	R21,0xFF
    0055A 01FA      MOVW	R30,R20
    0055B 8020      LD	R2,Z
    0055C 2022      TST	R2
    0055D F7B9      BNE	0x0555
(0219)        }
(0220)     }
    0055E 940C 15E9 JMP	pop_xgsetF00C
_lcd_write_str_con:
  s                    --> R20
  y                    --> R22
    00560 940E 15D8 CALL	push_xgsetF000
    00562 01A9      MOVW	R20,R18
    00563 2F60      MOV	R22,R16
(0221)    
(0222) }
(0223) /*
(0224)   附带x,y。调用 lcd_wdat（）方法，会通过指针遍历字符串。不太好，还是自己循环遍历
(0225) */
(0226) void lcd_write_str_con(unsigned char y,unsigned char *s) 
(0227) {
(0228) 	
(0229)     if (y == 0 || y==1) 
    00564 2366      TST	R22
    00565 F011      BEQ	0x0568
    00566 3061      CPI	R22,1
    00567 F459      BNE	0x0573
(0230)     {
    00568 C005      RJMP	0x056E
(0231)     	
(0232) 		 while (*s) 
(0233)        {
(0234)     	lcd_wdat_1( *s);
    00569 01FA      MOVW	R30,R20
    0056A 8100      LD	R16,Z
    0056B DE9E      RCALL	_lcd_wdat_1
(0235)     	s ++;
    0056C 5F4F      SUBI	R20,0xFF
    0056D 4F5F      SBCI	R21,0xFF
    0056E 01FA      MOVW	R30,R20
    0056F 8020      LD	R2,Z
    00570 2022      TST	R2
    00571 F7B9      BNE	0x0569
(0236)         }
(0237)     }
    00572 C00E      RJMP	0x0581
(0238)     else  if(y==2 || y==3)
    00573 3062      CPI	R22,2
    00574 F011      BEQ	0x0577
    00575 3063      CPI	R22,3
    00576 F451      BNE	0x0581
(0239)     {
    00577 C005      RJMP	0x057D
(0240)     	
(0241) 		  while (*s) 
(0242)        {
(0243)     	lcd_wdat_2( *s);
    00578 01FA      MOVW	R30,R20
    00579 8100      LD	R16,Z
    0057A DF13      RCALL	_lcd_wdat_2
(0244)     	s ++;
    0057B 5F4F      SUBI	R20,0xFF
    0057C 4F5F      SBCI	R21,0xFF
    0057D 01FA      MOVW	R30,R20
    0057E 8020      LD	R2,Z
    0057F 2022      TST	R2
    00580 F7B9      BNE	0x0578
(0245)        }
(0246)     }
    00581 940C 15DD JMP	pop_xgsetF000
_read_ac_1:
  result               --> R20
    00583 934A      ST	-Y,R20
    00584 935A      ST	-Y,R21
(0247)    
(0248) }
(0249) //****************************
(0250) //  读出数据,.不知道有没有用，先放在这
(0251) //****************************
(0252) /**
(0253)  读程序。命令后，读AC地址
(0254) */
(0255) uchar read_ac_1(void){
(0256) 	uint result;
(0257) 	DDRA=0x00;
    00585 2422      CLR	R2
    00586 BA2A      OUT	0x1A,R2
(0258) 	rs_l;
    00587 9180 0065 LDS	R24,0x65
    00589 7F8D      ANDI	R24,0xFD
    0058A 9380 0065 STS	0x65,R24
(0259) 	rw_h;
    0058C 9180 0065 LDS	R24,0x65
    0058E 6081      ORI	R24,1
    0058F 9380 0065 STS	0x65,R24
(0260) 	ep1_h;
    00591 9180 0065 LDS	R24,0x65
    00593 6088      ORI	R24,0x8
    00594 9380 0065 STS	0x65,R24
(0261) 	delay_ms(1);
    00596 E001      LDI	R16,1
    00597 E010      LDI	R17,0
    00598 940E 0107 CALL	_delay_ms
(0262) 	result=PINA&(~(1<<PINA7));
    0059A B349      IN	R20,0x19
    0059B 2755      CLR	R21
    0059C 774F      ANDI	R20,0x7F
(0263) 	DDRA=0xFF;
    0059D EF8F      LDI	R24,0xFF
    0059E BB8A      OUT	0x1A,R24
(0264) 	ep1_l;
    0059F 9180 0065 LDS	R24,0x65
    005A1 7F87      ANDI	R24,0xF7
    005A2 9380 0065 STS	0x65,R24
(0265) 	return result;
    005A4 2F04      MOV	R16,R20
    005A5 9159      LD	R21,Y+
    005A6 9149      LD	R20,Y+
    005A7 9508      RET
_read_ac_2:
  result               --> R20
    005A8 934A      ST	-Y,R20
    005A9 935A      ST	-Y,R21
(0266) }
(0267) uchar read_ac_2(void){
(0268) 	uint result;
(0269) 	DDRA=0x00;
    005AA 2422      CLR	R2
    005AB BA2A      OUT	0x1A,R2
(0270) 	rs_l;
    005AC 9180 0065 LDS	R24,0x65
    005AE 7F8D      ANDI	R24,0xFD
    005AF 9380 0065 STS	0x65,R24
(0271) 	rw_h;
    005B1 9180 0065 LDS	R24,0x65
    005B3 6081      ORI	R24,1
    005B4 9380 0065 STS	0x65,R24
(0272) 	ep2_h;
    005B6 9180 0062 LDS	R24,0x62
    005B8 6081      ORI	R24,1
    005B9 9380 0062 STS	0x62,R24
(0273) 	delay_ms(1);
    005BB E001      LDI	R16,1
    005BC E010      LDI	R17,0
    005BD 940E 0107 CALL	_delay_ms
(0274) 	result=PINA&(~(1<<PINA7));
    005BF B349      IN	R20,0x19
    005C0 2755      CLR	R21
    005C1 774F      ANDI	R20,0x7F
(0275) 	DDRA=0xFF;
    005C2 EF8F      LDI	R24,0xFF
    005C3 BB8A      OUT	0x1A,R24
(0276) 	ep2_l;
    005C4 9180 0062 LDS	R24,0x62
    005C6 7F8E      ANDI	R24,0xFE
    005C7 9380 0062 STS	0x62,R24
(0277) 	return result;
    005C9 2F04      MOV	R16,R20
    005CA 9159      LD	R21,Y+
    005CB 9149      LD	R20,Y+
    005CC 9508      RET
(0278) }
(0279) 
(0280) void lcd_clear(void){
(0281)    lcd_clear_1();
_lcd_clear:
    005CD DE66      RCALL	_lcd_clear_1
(0282)     lcd_clear_2();
    005CE CEE9      RJMP	_lcd_clear_2
_date_cmd_1:
  result               --> R10
    005CF 92AA      ST	-Y,R10
    005D0 92BA      ST	-Y,R11
(0283) }
(0284) /*
(0285)  读数据程序。命令后，读入。使用read_data函数会是设定的值，再吃调用本函数会使ac
(0286)  移动一次，8读取位的数据
(0287) */
(0288) uchar date_cmd_1(void){
(0289) 	uint result;
(0290) 	DDRA=0x00;
    005D1 2422      CLR	R2
    005D2 BA2A      OUT	0x1A,R2
(0291) 	rs_h;
    005D3 9180 0065 LDS	R24,0x65
    005D5 6082      ORI	R24,2
    005D6 9380 0065 STS	0x65,R24
(0292) 	rw_h;
    005D8 9180 0065 LDS	R24,0x65
    005DA 6081      ORI	R24,1
    005DB 9380 0065 STS	0x65,R24
(0293) 	ep1_h;
    005DD 9180 0065 LDS	R24,0x65
    005DF 6088      ORI	R24,0x8
    005E0 9380 0065 STS	0x65,R24
(0294) 	delay_ms(1);
    005E2 E001      LDI	R16,1
    005E3 E010      LDI	R17,0
    005E4 940E 0107 CALL	_delay_ms
(0295) 	result=PINA;
    005E6 B2A9      IN	R10,0x19
    005E7 24BB      CLR	R11
(0296) 	DDRA=0xFF;
    005E8 EF8F      LDI	R24,0xFF
    005E9 BB8A      OUT	0x1A,R24
(0297) 	ep1_l;
    005EA 9180 0065 LDS	R24,0x65
    005EC 7F87      ANDI	R24,0xF7
    005ED 9380 0065 STS	0x65,R24
(0298) 	return result;
    005EF 2D0A      MOV	R16,R10
    005F0 90B9      LD	R11,Y+
    005F1 90A9      LD	R10,Y+
    005F2 9508      RET
_date_cmd_2:
  result               --> R10
    005F3 92AA      ST	-Y,R10
    005F4 92BA      ST	-Y,R11
(0299) }
(0300) uchar date_cmd_2(void){
(0301) 	uint result;
(0302) 	DDRA=0x00;
    005F5 2422      CLR	R2
    005F6 BA2A      OUT	0x1A,R2
(0303) 	rs_h;
    005F7 9180 0065 LDS	R24,0x65
    005F9 6082      ORI	R24,2
    005FA 9380 0065 STS	0x65,R24
(0304) 	rw_h;
    005FC 9180 0065 LDS	R24,0x65
    005FE 6081      ORI	R24,1
    005FF 9380 0065 STS	0x65,R24
(0305) 	ep2_h;
    00601 9180 0062 LDS	R24,0x62
    00603 6081      ORI	R24,1
    00604 9380 0062 STS	0x62,R24
(0306) 	delay_ms(1);
    00606 E001      LDI	R16,1
    00607 E010      LDI	R17,0
    00608 940E 0107 CALL	_delay_ms
(0307) 	result=PINA;
    0060A B2A9      IN	R10,0x19
    0060B 24BB      CLR	R11
(0308) 	DDRA=0xFF;
    0060C EF8F      LDI	R24,0xFF
    0060D BB8A      OUT	0x1A,R24
(0309) 	ep2_l;
    0060E 9180 0062 LDS	R24,0x62
    00610 7F8E      ANDI	R24,0xFE
    00611 9380 0062 STS	0x62,R24
(0310) 	return result;
    00613 2D0A      MOV	R16,R10
    00614 90B9      LD	R11,Y+
    00615 90A9      LD	R10,Y+
    00616 9508      RET
_read_data_xy:
  y                    --> R22
  x                    --> R20
    00617 940E 15E2 CALL	push_xgsetF00C
    00619 2F62      MOV	R22,R18
    0061A 2F40      MOV	R20,R16
(0311) }
(0312) //**************************
(0313) //读取函数，注意会ac位置
(0314) //**************************
(0315) uchar read_data_xy(unsigned char x,unsigned char y){
(0316) 	if (y == 0) {
    0061B 2366      TST	R22
    0061C F449      BNE	0x0626
(0317)     	lcd_wcmd_1(0x80 + x);
    0061D 2F04      MOV	R16,R20
    0061E 5800      SUBI	R16,0x80
    0061F DDBC      RCALL	_lcd_wcmd_1
(0318) 		delay_us(10);
    00620 E00A      LDI	R16,0xA
    00621 E010      LDI	R17,0
    00622 940E 00FD CALL	_delay_us
(0319) 		return date_cmd_1();
    00624 DFAA      RCALL	_date_cmd_1
    00625 C024      RJMP	0x064A
(0320) 		
(0321)     }else  if(y==1){
    00626 3061      CPI	R22,1
    00627 F449      BNE	0x0631
(0322)     	lcd_wcmd_1(0x90 + x);
    00628 2F04      MOV	R16,R20
    00629 5700      SUBI	R16,0x70
    0062A DDB1      RCALL	_lcd_wcmd_1
(0323) 		delay_us(10);
    0062B E00A      LDI	R16,0xA
    0062C E010      LDI	R17,0
    0062D 940E 00FD CALL	_delay_us
(0324) 		return date_cmd_1();
    0062F DF9F      RCALL	_date_cmd_1
    00630 C019      RJMP	0x064A
(0325)     }else  if(y==2){
    00631 3062      CPI	R22,2
    00632 F451      BNE	0x063D
(0326)     	lcd_wcmd_2(0x80 + x);
    00633 2F04      MOV	R16,R20
    00634 5800      SUBI	R16,0x80
    00635 DE2A      RCALL	_lcd_wcmd_2
(0327) 		delay_us(10);
    00636 E00A      LDI	R16,0xA
    00637 E010      LDI	R17,0
    00638 940E 00FD CALL	_delay_us
(0328) 		return date_cmd_2();
    0063A DFB8      RCALL	_date_cmd_2
    0063B 2EA0      MOV	R10,R16
    0063C C00D      RJMP	0x064A
(0329)     }else  if(y==3){
    0063D 3063      CPI	R22,3
    0063E F451      BNE	0x0649
(0330)     	lcd_wcmd_2(0x90 + x);
    0063F 2F04      MOV	R16,R20
    00640 5700      SUBI	R16,0x70
    00641 DE1E      RCALL	_lcd_wcmd_2
(0331) 		delay_us(10);
    00642 E00A      LDI	R16,0xA
    00643 E010      LDI	R17,0
    00644 940E 00FD CALL	_delay_us
(0332) 		return date_cmd_2();
    00646 DFAC      RCALL	_date_cmd_2
    00647 2EA0      MOV	R10,R16
    00648 C001      RJMP	0x064A
(0333)     }
(0334) 	
(0335) 	return 0x00;
    00649 2700      CLR	R16
    0064A 940C 15E9 JMP	pop_xgsetF00C
_read_data_1:
  addr                 --> R10
    0064C 92AA      ST	-Y,R10
    0064D 2EA0      MOV	R10,R16
(0336) }
(0337) uchar read_data_1(unsigned char addr){
(0338) 	
(0339)     	lcd_wcmd_1(addr);
    0064E 2D0A      MOV	R16,R10
    0064F DD8C      RCALL	_lcd_wcmd_1
(0340)     	return date_cmd_1();
    00650 DF7E      RCALL	_date_cmd_1
    00651 90A9      LD	R10,Y+
    00652 9508      RET
_read_data_2:
  addr                 --> R10
    00653 92AA      ST	-Y,R10
    00654 2EA0      MOV	R10,R16
(0341) }
(0342) uchar read_data_2(unsigned char addr){
(0343)     	lcd_wcmd_1(addr);
    00655 2D0A      MOV	R16,R10
    00656 DD85      RCALL	_lcd_wcmd_1
(0344) 		return date_cmd_2();
    00657 DF9B      RCALL	_date_cmd_2
    00658 90A9      LD	R10,Y+
    00659 9508      RET
(0345) }
(0346) 
(0347) 
(0348) /*初始化功能*/
(0349) void lcd_init(void){
(0350) 	 //初始化端口功能
(0351) 	 DDRA |=0xFF;
_lcd_init:
    0065A B38A      IN	R24,0x1A
    0065B 6F8F      ORI	R24,0xFF
    0065C BB8A      OUT	0x1A,R24
(0352) 	 PORTA=0xFF;
    0065D EF8F      LDI	R24,0xFF
    0065E BB8B      OUT	0x1B,R24
(0353) 	 DDRG |=0x0F;
    0065F 9180 0064 LDS	R24,0x64
    00661 608F      ORI	R24,0xF
    00662 9380 0064 STS	0x64,R24
(0354) 	 PORTG|=0x0F;
    00664 9180 0065 LDS	R24,0x65
    00666 608F      ORI	R24,0xF
    00667 9380 0065 STS	0x65,R24
(0355) 	 DDRF|=0x01;
    00669 9180 0061 LDS	R24,0x61
    0066B 6081      ORI	R24,1
    0066C 9380 0061 STS	0x61,R24
(0356) 	 PORTF|=0x01;
    0066E 9180 0062 LDS	R24,0x62
    00670 6081      ORI	R24,1
    00671 9380 0062 STS	0x62,R24
(0357) 	 //lcd_wcmd(0x38);//初始化功能,8位，基本指令
(0358) 	 lcd_wcmd_1(0x30);//初始化功能,8位，基本指令
    00673 E300      LDI	R16,0x30
    00674 DD67      RCALL	_lcd_wcmd_1
(0359) 	 delay_us(1);
    00675 E001      LDI	R16,1
    00676 E010      LDI	R17,0
    00677 940E 00FD CALL	_delay_us
(0360) 	  lcd_wcmd_1(0x08);//关显示
    00679 E008      LDI	R16,0x8
    0067A DD61      RCALL	_lcd_wcmd_1
(0361) 	 delay_us(1);
    0067B E001      LDI	R16,1
    0067C E010      LDI	R17,0
    0067D 940E 00FD CALL	_delay_us
(0362) 	  lcd_wcmd_1(0x01);//清显示
    0067F E001      LDI	R16,1
    00680 DD5B      RCALL	_lcd_wcmd_1
(0363) 	 delay_us(1);
    00681 E001      LDI	R16,1
    00682 E010      LDI	R17,0
    00683 940E 00FD CALL	_delay_us
(0364) 	  lcd_wcmd_1(0x06);//输入模式，右移
    00685 E006      LDI	R16,6
    00686 DD55      RCALL	_lcd_wcmd_1
(0365) 	  delay_us(1);
    00687 E001      LDI	R16,1
    00688 E010      LDI	R17,0
    00689 940E 00FD CALL	_delay_us
(0366) 	  lcd_wcmd_1(0x0c);//初始化光标,开显示
    0068B E00C      LDI	R16,0xC
    0068C DD4F      RCALL	_lcd_wcmd_1
(0367) 	
(0368) 	 delay_us(1);
    0068D E001      LDI	R16,1
    0068E E010      LDI	R17,0
    0068F 940E 00FD CALL	_delay_us
(0369) 	  lcd_wcmd_2(0x30);//初始化功能,8位，基本指令
    00691 E300      LDI	R16,0x30
    00692 DDCD      RCALL	_lcd_wcmd_2
(0370) 	 delay_us(1);
    00693 E001      LDI	R16,1
    00694 E010      LDI	R17,0
    00695 940E 00FD CALL	_delay_us
(0371) 	 lcd_wcmd_2(0x08);//关显示
    00697 E008      LDI	R16,0x8
    00698 DDC7      RCALL	_lcd_wcmd_2
(0372) 	 delay_us(1);
    00699 E001      LDI	R16,1
    0069A E010      LDI	R17,0
    0069B 940E 00FD CALL	_delay_us
(0373) 	 lcd_wcmd_2(0x01);//清显示
    0069D E001      LDI	R16,1
    0069E DDC1      RCALL	_lcd_wcmd_2
(0374) 	 delay_us(1);
    0069F E001      LDI	R16,1
    006A0 E010      LDI	R17,0
    006A1 940E 00FD CALL	_delay_us
(0375) 	 lcd_wcmd_2(0x06);//输入模式，右移
    006A3 E006      LDI	R16,6
    006A4 DDBB      RCALL	_lcd_wcmd_2
(0376) 	  delay_us(1);
    006A5 E001      LDI	R16,1
    006A6 E010      LDI	R17,0
    006A7 940E 00FD CALL	_delay_us
(0377) 	 lcd_wcmd_2(0x0c);//初始化光标,开显示
    006A9 E00C      LDI	R16,0xC
    006AA CDB5      RJMP	_lcd_wcmd_2
_cur_set:
  type                 --> R20
    006AB 934A      ST	-Y,R20
    006AC 935A      ST	-Y,R21
    006AD 01A8      MOVW	R20,R16
(0378) }
(0379) //************
(0380) // 光标显示操作,默认初始化都是关闭。上半屏 0:关闭,1：开游标,2：游标反白,3：开游标、反白
(0381) // 下半屏  4:关闭,5：开游标,6：游标反白,7：开游标、反白
(0382) //************
(0383) void cur_set(uint type){
(0384) 	 if(type==0){
    006AE 3040      CPI	R20,0
    006AF 0745      CPC	R20,R21
    006B0 F419      BNE	0x06B4
(0385) 	 	lcd_wcmd_1(0x0c);	 
    006B1 E00C      LDI	R16,0xC
    006B2 DD29      RCALL	_lcd_wcmd_1
(0386) 	 }else if(type==1){
    006B3 C030      RJMP	0x06E4
    006B4 3041      CPI	R20,1
    006B5 E0E0      LDI	R30,0
    006B6 075E      CPC	R21,R30
    006B7 F419      BNE	0x06BB
(0387) 	     lcd_wcmd_1(0x0e);
    006B8 E00E      LDI	R16,0xE
    006B9 DD22      RCALL	_lcd_wcmd_1
(0388) 	 }else if(type==2){
    006BA C029      RJMP	0x06E4
    006BB 3042      CPI	R20,2
    006BC E0E0      LDI	R30,0
    006BD 075E      CPC	R21,R30
    006BE F419      BNE	0x06C2
(0389) 	    lcd_wcmd_1(0x0d);
    006BF E00D      LDI	R16,0xD
    006C0 DD1B      RCALL	_lcd_wcmd_1
(0390) 	 }else if(type==3){
    006C1 C022      RJMP	0x06E4
    006C2 3043      CPI	R20,3
    006C3 E0E0      LDI	R30,0
    006C4 075E      CPC	R21,R30
    006C5 F419      BNE	0x06C9
(0391) 	    lcd_wcmd_1(0x0f);
    006C6 E00F      LDI	R16,0xF
    006C7 DD14      RCALL	_lcd_wcmd_1
(0392) 	 }else if(type==4){
    006C8 C01B      RJMP	0x06E4
    006C9 3044      CPI	R20,4
    006CA E0E0      LDI	R30,0
    006CB 075E      CPC	R21,R30
    006CC F419      BNE	0x06D0
(0393) 	    lcd_wcmd_2(0x0c);
    006CD E00C      LDI	R16,0xC
    006CE DD91      RCALL	_lcd_wcmd_2
(0394) 	 }else if(type==5){
    006CF C014      RJMP	0x06E4
    006D0 3045      CPI	R20,5
    006D1 E0E0      LDI	R30,0
    006D2 075E      CPC	R21,R30
    006D3 F419      BNE	0x06D7
(0395) 	    lcd_wcmd_2(0x0e);
    006D4 E00E      LDI	R16,0xE
    006D5 DD8A      RCALL	_lcd_wcmd_2
(0396) 	 }else if(type==6){
    006D6 C00D      RJMP	0x06E4
    006D7 3046      CPI	R20,6
    006D8 E0E0      LDI	R30,0
    006D9 075E      CPC	R21,R30
    006DA F419      BNE	0x06DE
(0397) 	    lcd_wcmd_2(0x0d);
    006DB E00D      LDI	R16,0xD
    006DC DD83      RCALL	_lcd_wcmd_2
(0398) 	 }else if(type==7){
    006DD C006      RJMP	0x06E4
    006DE 3047      CPI	R20,7
    006DF E0E0      LDI	R30,0
    006E0 075E      CPC	R21,R30
    006E1 F411      BNE	0x06E4
(0399) 	    lcd_wcmd_2(0x0f);
    006E2 E00F      LDI	R16,0xF
    006E3 DD7C      RCALL	_lcd_wcmd_2
(0400) 	 }
    006E4 9159      LD	R21,Y+
    006E5 9149      LD	R20,Y+
    006E6 9508      RET
(0401) }
(0402) //***************************************************
(0403) //   反白相关
(0404) //***************************************************
(0405) /********************************************************************  
(0406)     函 数 名：Set_Draw(  
(0407)     入口参数：无  
(0408)     出口参数：无  
(0409)     修改日期：  
(0410)     函数作用：  
(0411)     说    明：  
(0412)     ********************************************************************/   
(0413)     void Set_Draw(void)   
(0414)     {   
(0415)         //W_1byte(0,0,0x01);            //清屏   
(0416)         delay_ms(2);                  //延时   
_Set_Draw:
    006E7 E002      LDI	R16,2
    006E8 E010      LDI	R17,0
    006E9 940E 0107 CALL	_delay_ms
(0417)         //W_1byte(0,0,0x34);            //8BIT控制界面，扩充指令集,，绘图显示OFF   
(0418)         lcd_wcmd_1(0x36); 
    006EB E306      LDI	R16,0x36
    006EC DCEF      RCALL	_lcd_wcmd_1
(0419) 		lcd_wcmd_2(0x36);   
    006ED E306      LDI	R16,0x36
    006EE DD71      RCALL	_lcd_wcmd_2
(0420)         delay_ms(2);                  //延时   
    006EF E002      LDI	R16,2
    006F0 E010      LDI	R17,0
    006F1 940C 0107 JMP	_delay_ms
(0421)     }
(0422) 	void Set_UNDraw(void)   
(0423)     {   
(0424)         //W_1byte(0,0,0x01);            //清屏   
(0425)         delay_ms(2);                  //延时   
_Set_UNDraw:
    006F3 E002      LDI	R16,2
    006F4 E010      LDI	R17,0
    006F5 940E 0107 CALL	_delay_ms
(0426)         //W_1byte(0,0,0x34);            //8BIT控制界面，扩充指令集,，绘图显示OFF   
(0427)         lcd_wcmd_1(0x30); 
    006F7 E300      LDI	R16,0x30
    006F8 DCE3      RCALL	_lcd_wcmd_1
(0428) 		lcd_wcmd_2(0x30);   
    006F9 E300      LDI	R16,0x30
    006FA DD65      RCALL	_lcd_wcmd_2
(0429)         delay_ms(2);                  //延时   
    006FB E002      LDI	R16,2
    006FC E010      LDI	R17,0
    006FD 940C 0107 JMP	_delay_ms
_Set_White_off:
  clr_y                --> R14
  clr_x                --> R10
  white_y              --> R20
  white_x              --> Y,+0
  i                    --> R10
  white_end_x          --> R12
  j                    --> R14
  end_x                --> R10
  y                    --> R22
  x                    --> Y,+11
    006FF 940E 15A3 CALL	push_arg4
    00701 940E 15C3 CALL	push_xgsetF0FC
    00703 2F62      MOV	R22,R18
    00704 9721      SBIW	R28,1
    00705 84AF      LDD	R10,Y+15
(0430)     }
(0431) /**************************************************  
(0432)     uchar x,起始位置
(0433) 	uchar y,对应y
(0434) 	uchar end_x, 反白结束位置
(0435) 	uchar clear 0：反白，1：不反白
(0436)  **************************************************/   
(0437)     void Set_White_off(uchar x,uchar y,uchar end_x)   
(0438)     {   
(0439)         uchar i, j, white_x, white_y,white_end_x,clr_x,clr_y;       //   
(0440)         white_end_x = (end_x-x+1);   
    00706 2D8A      MOV	R24,R10
    00707 840B      LDD	R0,Y+11
    00708 1980      SUB	R24,R0
    00709 5F8F      SUBI	R24,0xFF
    0070A 2EC8      MOV	R12,R24
(0441)         white_end_x <<= 1;   //16*16，一次写8个，所以乘2
    0070B 0CCC      LSL	R12
(0442) 		Set_Draw(); //开画图
    0070C DFDA      RCALL	_Set_Draw
(0443) 		delay_us(1); 
    0070D E001      LDI	R16,1
    0070E E010      LDI	R17,0
    0070F 940E 00FD CALL	_delay_us
(0444)         if(y==0)   
    00711 2366      TST	R22
    00712 F449      BNE	0x071C
(0445)         {   
(0446)             white_x = (0x80+x-1);   
    00713 858B      LDD	R24,Y+11
    00714 5880      SUBI	R24,0x80
    00715 5081      SUBI	R24,1
    00716 8388      ST	Y,R24
(0447)             white_y = 0x80;   
    00717 E840      LDI	R20,0x80
(0448)             clr_x = 0x80;   
    00718 E880      LDI	R24,0x80
    00719 2EA8      MOV	R10,R24
(0449)             clr_y = 0x80;   
    0071A 2EE8      MOV	R14,R24
(0450)         }   
    0071B C022      RJMP	0x073E
(0451)         else if(y==1)   
    0071C 3061      CPI	R22,1
    0071D F451      BNE	0x0728
(0452)         {   
(0453)             white_x = (0x80+x-1);   
    0071E 858B      LDD	R24,Y+11
    0071F 5880      SUBI	R24,0x80
    00720 5081      SUBI	R24,1
    00721 8388      ST	Y,R24
(0454)             white_y = 0x90;   
    00722 E940      LDI	R20,0x90
(0455)             clr_x = 0x80;   
    00723 E880      LDI	R24,0x80
    00724 2EA8      MOV	R10,R24
(0456)             clr_y = 0x90;   
    00725 E980      LDI	R24,0x90
    00726 2EE8      MOV	R14,R24
(0457)         }   
    00727 C016      RJMP	0x073E
(0458)         else if(y==2)   
    00728 3062      CPI	R22,2
    00729 F449      BNE	0x0733
(0459)         {   
(0460)             white_x = (0x80+x-1);   
    0072A 858B      LDD	R24,Y+11
    0072B 5880      SUBI	R24,0x80
    0072C 5081      SUBI	R24,1
    0072D 8388      ST	Y,R24
(0461)             white_y = 0x80;   
    0072E E840      LDI	R20,0x80
(0462)             clr_x = 0x80;   
    0072F E880      LDI	R24,0x80
    00730 2EA8      MOV	R10,R24
(0463)             clr_y = 0x80;   
    00731 2EE8      MOV	R14,R24
(0464)         }   
    00732 C00B      RJMP	0x073E
(0465)         else if(y==3)   
    00733 3063      CPI	R22,3
    00734 F449      BNE	0x073E
(0466)         {   
(0467)             white_x = (0x80+x-1);   
    00735 858B      LDD	R24,Y+11
    00736 5880      SUBI	R24,0x80
    00737 5081      SUBI	R24,1
    00738 8388      ST	Y,R24
(0468)             white_y = 0x90;   
    00739 E940      LDI	R20,0x90
(0469)             clr_x = 0x80;   
    0073A E880      LDI	R24,0x80
    0073B 2EA8      MOV	R10,R24
(0470)             clr_y = 0x90;   
    0073C E980      LDI	R24,0x90
    0073D 2EE8      MOV	R14,R24
(0471)         }   
(0472)         delay_us(1); 
    0073E E001      LDI	R16,1
    0073F E010      LDI	R17,0
    00740 940E 00FD CALL	_delay_us
(0473) 		if(y==0 || y==1){    
    00742 2366      TST	R22
    00743 F011      BEQ	0x0746
    00744 3061      CPI	R22,1
    00745 F4A1      BNE	0x075A
(0474)           for(i=0;i<16;i++ )               //16行，因为是16*16汉字   
    00746 24AA      CLR	R10
    00747 C00E      RJMP	0x0756
(0475)           {   
(0476)              lcd_wcmd_1(white_y++);     //设置绘图区的Y地址坐标0   
    00748 2E24      MOV	R2,R20
    00749 5F4F      SUBI	R20,0xFF
    0074A 2D02      MOV	R16,R2
    0074B DC90      RCALL	_lcd_wcmd_1
(0477)              lcd_wcmd_1(white_x);       //设置绘图区的X地址坐标0   
    0074C 8108      LD	R16,Y
    0074D DC8E      RCALL	_lcd_wcmd_1
(0478)              for(j=0;j<white_end_x;j++)   //   
    0074E 24EE      CLR	R14
    0074F C003      RJMP	0x0753
(0479)              {     
(0480)                lcd_wdat_1(0x00); //取消这一行的8个点的反白，液晶地址自动加   
    00750 2700      CLR	R16
    00751 DCB8      RCALL	_lcd_wdat_1
    00752 94E3      INC	R14
    00753 14EC      CP	R14,R12
    00754 F3D8      BCS	0x0750
    00755 94A3      INC	R10
    00756 2D8A      MOV	R24,R10
    00757 3180      CPI	R24,0x10
    00758 F378      BCS	0x0748
(0481)              }   
(0482)           }
(0483) 		}else if(y==2 || y==3){
    00759 C017      RJMP	0x0771
    0075A 3062      CPI	R22,2
    0075B F011      BEQ	0x075E
    0075C 3063      CPI	R22,3
    0075D F499      BNE	0x0771
(0484) 		    for(i=0;i<16;i++ )               //16行，因为是16*16汉字   
    0075E 24AA      CLR	R10
    0075F C00E      RJMP	0x076E
(0485)           {   
(0486)              lcd_wcmd_2(white_y++);     //设置绘图区的Y地址坐标0   
    00760 2E24      MOV	R2,R20
    00761 5F4F      SUBI	R20,0xFF
    00762 2D02      MOV	R16,R2
    00763 DCFC      RCALL	_lcd_wcmd_2
(0487)              lcd_wcmd_2(white_x);       //设置绘图区的X地址坐标0   
    00764 8108      LD	R16,Y
    00765 DCFA      RCALL	_lcd_wcmd_2
(0488)              for(j=0;j<white_end_x;j++)   //   
    00766 24EE      CLR	R14
    00767 C003      RJMP	0x076B
(0489)              {     
(0490)                lcd_wdat_2(0x00); //取消这一行的8个点的反白，液晶地址自动加   
    00768 2700      CLR	R16
    00769 DD24      RCALL	_lcd_wdat_2
    0076A 94E3      INC	R14
    0076B 14EC      CP	R14,R12
    0076C F3D8      BCS	0x0768
    0076D 94A3      INC	R10
    0076E 2D8A      MOV	R24,R10
    0076F 3180      CPI	R24,0x10
    00770 F378      BCS	0x0760
(0491)              }   
(0492)           }
(0493) 		}
(0494) 		  Set_UNDraw();//关画图  
    00771 DF81      RCALL	_Set_UNDraw
(0495) 		  delay_us(1);  
    00772 E001      LDI	R16,1
    00773 E010      LDI	R17,0
    00774 940E 00FD CALL	_delay_us
    00776 9621      ADIW	R28,1
    00777 940E 15B8 CALL	pop_xgsetF0FC
    00779 9624      ADIW	R28,4
    0077A 9508      RET
_Set_White:
  clr_y                --> R14
  clr_x                --> R10
  white_y              --> R20
  white_x              --> Y,+0
  i                    --> R10
  white_end_x          --> R12
  j                    --> R14
  end_x                --> R10
  y                    --> R22
  x                    --> Y,+11
    0077B 940E 15A3 CALL	push_arg4
    0077D 940E 15C3 CALL	push_xgsetF0FC
    0077F 2F62      MOV	R22,R18
    00780 9721      SBIW	R28,1
    00781 84AF      LDD	R10,Y+15
(0496)     } 
(0497) 	void Set_White(uchar x,uchar y,uchar end_x)   
(0498)     {   
(0499)         uchar i, j, white_x, white_y,white_end_x,clr_x,clr_y;       //   
(0500)         white_end_x = (end_x-x+1);   
    00782 2D8A      MOV	R24,R10
    00783 840B      LDD	R0,Y+11
    00784 1980      SUB	R24,R0
    00785 5F8F      SUBI	R24,0xFF
    00786 2EC8      MOV	R12,R24
(0501)         white_end_x <<= 1;   //16*16，一次写8个，所以乘2
    00787 0CCC      LSL	R12
(0502) 		Set_Draw(); //开画图
    00788 DF5E      RCALL	_Set_Draw
(0503) 		delay_us(1); 
    00789 E001      LDI	R16,1
    0078A E010      LDI	R17,0
    0078B 940E 00FD CALL	_delay_us
(0504)         if(y==0)   
    0078D 2366      TST	R22
    0078E F449      BNE	0x0798
(0505)         {   
(0506)             white_x = (0x80+x-1);   
    0078F 858B      LDD	R24,Y+11
    00790 5880      SUBI	R24,0x80
    00791 5081      SUBI	R24,1
    00792 8388      ST	Y,R24
(0507)             white_y = 0x80;   
    00793 E840      LDI	R20,0x80
(0508)             clr_x = 0x80;   
    00794 E880      LDI	R24,0x80
    00795 2EA8      MOV	R10,R24
(0509)             clr_y = 0x80;   
    00796 2EE8      MOV	R14,R24
(0510)         }   
    00797 C022      RJMP	0x07BA
(0511)         else if(y==1)   
    00798 3061      CPI	R22,1
    00799 F451      BNE	0x07A4
(0512)         {   
(0513)             white_x = (0x80+x-1);   
    0079A 858B      LDD	R24,Y+11
    0079B 5880      SUBI	R24,0x80
    0079C 5081      SUBI	R24,1
    0079D 8388      ST	Y,R24
(0514)             white_y = 0x90;   
    0079E E940      LDI	R20,0x90
(0515)             clr_x = 0x80;   
    0079F E880      LDI	R24,0x80
    007A0 2EA8      MOV	R10,R24
(0516)             clr_y = 0x90;   
    007A1 E980      LDI	R24,0x90
    007A2 2EE8      MOV	R14,R24
(0517)         }   
    007A3 C016      RJMP	0x07BA
(0518)         else if(y==2)   
    007A4 3062      CPI	R22,2
    007A5 F449      BNE	0x07AF
(0519)         {   
(0520)             white_x = (0x80+x-1);   
    007A6 858B      LDD	R24,Y+11
    007A7 5880      SUBI	R24,0x80
    007A8 5081      SUBI	R24,1
    007A9 8388      ST	Y,R24
(0521)             white_y = 0x80;   
    007AA E840      LDI	R20,0x80
(0522)             clr_x = 0x80;   
    007AB E880      LDI	R24,0x80
    007AC 2EA8      MOV	R10,R24
(0523)             clr_y = 0x80;   
    007AD 2EE8      MOV	R14,R24
(0524)         }   
    007AE C00B      RJMP	0x07BA
(0525)         else if(y==3)   
    007AF 3063      CPI	R22,3
    007B0 F449      BNE	0x07BA
(0526)         {   
(0527)             white_x = (0x80+x-1);   
    007B1 858B      LDD	R24,Y+11
    007B2 5880      SUBI	R24,0x80
    007B3 5081      SUBI	R24,1
    007B4 8388      ST	Y,R24
(0528)             white_y = 0x90;   
    007B5 E940      LDI	R20,0x90
(0529)             clr_x = 0x80;   
    007B6 E880      LDI	R24,0x80
    007B7 2EA8      MOV	R10,R24
(0530)             clr_y = 0x90;   
    007B8 E980      LDI	R24,0x90
    007B9 2EE8      MOV	R14,R24
(0531)         } 
(0532) 		if(y==0 || y==1){          
    007BA 2366      TST	R22
    007BB F011      BEQ	0x07BE
    007BC 3061      CPI	R22,1
    007BD F4A1      BNE	0x07D2
(0533)           for(i=0;i<16;i++ )               //16行，因为是16*16汉字   
    007BE 24AA      CLR	R10
    007BF C00E      RJMP	0x07CE
(0534)           {   
(0535)               lcd_wcmd_1(white_y++);     //设置绘图区的Y地址坐标0   
    007C0 2E24      MOV	R2,R20
    007C1 5F4F      SUBI	R20,0xFF
    007C2 2D02      MOV	R16,R2
    007C3 DC18      RCALL	_lcd_wcmd_1
(0536)               lcd_wcmd_1(white_x);       //设置绘图区的X地址坐标0   
    007C4 8108      LD	R16,Y
    007C5 DC16      RCALL	_lcd_wcmd_1
(0537)               for(j=0;j<white_end_x;j++)   //   
    007C6 24EE      CLR	R14
    007C7 C003      RJMP	0x07CB
(0538)               {    
(0539)                     lcd_wdat_1(0xff); //反白这一行的8个点，液晶地址自动加1     
    007C8 EF0F      LDI	R16,0xFF
    007C9 DC40      RCALL	_lcd_wdat_1
    007CA 94E3      INC	R14
    007CB 14EC      CP	R14,R12
    007CC F3D8      BCS	0x07C8
    007CD 94A3      INC	R10
    007CE 2D8A      MOV	R24,R10
    007CF 3180      CPI	R24,0x10
    007D0 F378      BCS	0x07C0
(0540)               }   
(0541)           }
(0542) 		}else if(y==2 || y==3){
    007D1 C017      RJMP	0x07E9
    007D2 3062      CPI	R22,2
    007D3 F011      BEQ	0x07D6
    007D4 3063      CPI	R22,3
    007D5 F499      BNE	0x07E9
(0543) 		   for(i=0;i<16;i++ )               //16行，因为是16*16汉字   
    007D6 24AA      CLR	R10
    007D7 C00E      RJMP	0x07E6
(0544)             {   
(0545)               lcd_wcmd_2(white_y++);     //设置绘图区的Y地址坐标0   
    007D8 2E24      MOV	R2,R20
    007D9 5F4F      SUBI	R20,0xFF
    007DA 2D02      MOV	R16,R2
    007DB DC84      RCALL	_lcd_wcmd_2
(0546)               lcd_wcmd_2(white_x);       //设置绘图区的X地址坐标0   
    007DC 8108      LD	R16,Y
    007DD DC82      RCALL	_lcd_wcmd_2
(0547)               for(j=0;j<white_end_x;j++)   //   
    007DE 24EE      CLR	R14
    007DF C003      RJMP	0x07E3
(0548)               {    
(0549)                     lcd_wdat_2(0xff); //反白这一行的8个点，液晶地址自动加1     
    007E0 EF0F      LDI	R16,0xFF
    007E1 DCAC      RCALL	_lcd_wdat_2
    007E2 94E3      INC	R14
    007E3 14EC      CP	R14,R12
    007E4 F3D8      BCS	0x07E0
    007E5 94A3      INC	R10
    007E6 2D8A      MOV	R24,R10
    007E7 3180      CPI	R24,0x10
    007E8 F378      BCS	0x07D8
(0550)               }   
(0551)             }
(0552) 		}
(0553) 		  Set_UNDraw();//关画图  
    007E9 DF09      RCALL	_Set_UNDraw
(0554) 		  delay_us(1);  
    007EA E001      LDI	R16,1
    007EB E010      LDI	R17,0
    007EC 940E 00FD CALL	_delay_us
    007EE 9621      ADIW	R28,1
    007EF 940E 15B8 CALL	pop_xgsetF0FC
    007F1 9624      ADIW	R28,4
    007F2 9508      RET
_Draw_Pic:
  temp_y               --> R20
  temp_x               --> R22
  i                    --> R10
  j                    --> R14
  Draw                 --> Y,+12
  y                    --> Y,+10
  x                    --> R12
    007F3 933A      ST	-Y,R19
    007F4 932A      ST	-Y,R18
    007F5 940E 15C3 CALL	push_xgsetF0FC
    007F7 2EC0      MOV	R12,R16
(0555)     } 
(0556) 	/********************************************************************  
(0557)     函 数 名：Draw_Pic  128*64  
(0558)     入口参数：x,y,*Draw  
(0559)     出口参数：无  
(0560)     建立日期：2007年8月26日  
(0561)     修改日期：  
(0562)     函数作用：  
(0563)     说    明：  
(0564)     ********************************************************************/   
(0565)     /*************************************************/   
(0566)        
(0567)     void Draw_Pic(uchar x, uchar y, const uchar *Draw)   
(0568)     {   
(0569)         uchar i, j, temp_x, temp_y;     //   
(0570) 		lcd_wcmd_1(0x34);
    007F8 E304      LDI	R16,0x34
    007F9 DBE2      RCALL	_lcd_wcmd_1
(0571) 		lcd_wcmd_2(0x34);
    007FA E304      LDI	R16,0x34
    007FB DC64      RCALL	_lcd_wcmd_2
(0572)         temp_x = x;                     //   
    007FC 2D6C      MOV	R22,R12
(0573)         temp_y = y;                     //   
    007FD 854A      LDD	R20,Y+10
(0574)         temp_x |= 0x80;                 //   
    007FE 6860      ORI	R22,0x80
(0575)         temp_y |= 0x80;                 //   
    007FF 6840      ORI	R20,0x80
(0576)         for(i=0;i<32;i++ )               //上半屏32行   
    00800 24AA      CLR	R10
    00801 C013      RJMP	0x0815
(0577)         {   
(0578)             lcd_wcmd_1(temp_y++);      //设置绘图区的Y地址坐标0   
    00802 2E24      MOV	R2,R20
    00803 5F4F      SUBI	R20,0xFF
    00804 2D02      MOV	R16,R2
    00805 DBD6      RCALL	_lcd_wcmd_1
(0579)             lcd_wcmd_1(temp_x);        //设置绘图区的X地址坐标0   
    00806 2F06      MOV	R16,R22
    00807 DBD4      RCALL	_lcd_wcmd_1
(0580)             for(j=0;j<24;j++)            //   
    00808 24EE      CLR	R14
    00809 C007      RJMP	0x0811
(0581)             {   
(0582)                  lcd_wdat_1(*Draw++);  //   
    0080A 85EC      LDD	R30,Y+12
    0080B 85FD      LDD	R31,Y+13
    0080C 9101      LD	R16,Z+
    0080D 87FD      STD	Y+13,R31
    0080E 87EC      STD	Y+12,R30
    0080F DBFA      RCALL	_lcd_wdat_1
    00810 94E3      INC	R14
    00811 2D8E      MOV	R24,R14
    00812 3188      CPI	R24,0x18
    00813 F3B0      BCS	0x080A
    00814 94A3      INC	R10
    00815 2D8A      MOV	R24,R10
    00816 3280      CPI	R24,0x20
    00817 F350      BCS	0x0802
(0583)             }   
(0584)         }   
(0585)            
(0586)         temp_x = x;                     //   
    00818 2D6C      MOV	R22,R12
(0587)         temp_y = y;                     //   
    00819 854A      LDD	R20,Y+10
(0588)         temp_x |= 0x80;                 //   
    0081A 6860      ORI	R22,0x80
(0589)         temp_y |= 0x80;                   //   
    0081B 6840      ORI	R20,0x80
(0590)         j = 0;                          //   
    0081C 24EE      CLR	R14
(0591)         for(;i<64;i++ )   
    0081D C013      RJMP	0x0831
(0592)         {   
(0593)             lcd_wcmd_2(temp_y++);      //设置绘图区的Y地址坐标   
    0081E 2E24      MOV	R2,R20
    0081F 5F4F      SUBI	R20,0xFF
    00820 2D02      MOV	R16,R2
    00821 DC3E      RCALL	_lcd_wcmd_2
(0594)             lcd_wcmd_2(temp_x);        //设置绘图区的X地址坐标   
    00822 2F06      MOV	R16,R22
    00823 DC3C      RCALL	_lcd_wcmd_2
(0595)             for(j=0;j<24;j++)   
    00824 24EE      CLR	R14
    00825 C007      RJMP	0x082D
(0596)             {   
(0597)                  lcd_wdat_2(*Draw++);  //   
    00826 85EC      LDD	R30,Y+12
    00827 85FD      LDD	R31,Y+13
    00828 9101      LD	R16,Z+
    00829 87FD      STD	Y+13,R31
    0082A 87EC      STD	Y+12,R30
    0082B DC62      RCALL	_lcd_wdat_2
    0082C 94E3      INC	R14
    0082D 2D8E      MOV	R24,R14
    0082E 3188      CPI	R24,0x18
    0082F F3B0      BCS	0x0826
    00830 94A3      INC	R10
    00831 2D8A      MOV	R24,R10
    00832 3480      CPI	R24,0x40
    00833 F350      BCS	0x081E
(0598)             }   
(0599)         }   
(0600)        lcd_wcmd_1(0x36);
    00834 E306      LDI	R16,0x36
    00835 DBA6      RCALL	_lcd_wcmd_1
(0601) 	   lcd_wcmd_2(0x36);
    00836 E306      LDI	R16,0x36
    00837 DC28      RCALL	_lcd_wcmd_2
(0602) 	   delay_ms(1);
    00838 E001      LDI	R16,1
    00839 E010      LDI	R17,0
    0083A 940E 0107 CALL	_delay_ms
(0603) 	   lcd_wcmd_1(0x30);
    0083C E300      LDI	R16,0x30
    0083D DB9E      RCALL	_lcd_wcmd_1
(0604) 	   lcd_wcmd_2(0x30);
    0083E E300      LDI	R16,0x30
    0083F DC20      RCALL	_lcd_wcmd_2
    00840 940E 15B8 CALL	pop_xgsetF0FC
    00842 9622      ADIW	R28,2
    00843 9508      RET
_lcd_Desk:
    00844 9722      SBIW	R28,2
(0605) 	        
(0606)     }  
(0607)     /*************************************************/  
(0608) //***********************************************************************
(0609) //      液晶显示界面初始化
(0610) //***********************************************************************
(0611) void lcd_Desk(void)
(0612) { 
(0613)   //uint i=0;   
(0614)  // lcd_clear();
(0615)   //lcd_write_str(0,0,"ADC0:");
(0616)   lcd_write_str(0,3,"反白测试第一次");
    00845 E084      LDI	R24,4
    00846 E091      LDI	R25,1
    00847 8399      STD	Y+1,R25
    00848 8388      ST	Y,R24
    00849 E023      LDI	R18,3
    0084A 2700      CLR	R16
    0084B DCCA      RCALL	_lcd_write_str
(0617)   lcd_write_str(0,0,"反白测试第一次");
    0084C E084      LDI	R24,4
    0084D E091      LDI	R25,1
    0084E 8399      STD	Y+1,R25
    0084F 8388      ST	Y,R24
    00850 2722      CLR	R18
    00851 2700      CLR	R16
    00852 DCC3      RCALL	_lcd_write_str
(0618)   //delay_ms(100);
(0619)      
(0620)     Set_White(1,1,7); 
    00853 E087      LDI	R24,7
    00854 8388      ST	Y,R24
    00855 E021      LDI	R18,1
    00856 E001      LDI	R16,1
    00857 DF23      RCALL	_Set_White
(0621) 	   
(0622) 	 
(0623)     delay_ms(3000); 
    00858 EB08      LDI	R16,0xB8
    00859 E01B      LDI	R17,0xB
    0085A 940E 0107 CALL	_delay_ms
(0624)      Set_White_off(1,1,7);
    0085C E087      LDI	R24,7
    0085D 8388      ST	Y,R24
    0085E E021      LDI	R18,1
    0085F E001      LDI	R16,1
    00860 DE9E      RCALL	_Set_White_off
(0625) 	Set_White(2,1,2); 
    00861 E082      LDI	R24,2
    00862 8388      ST	Y,R24
    00863 E021      LDI	R18,1
    00864 E002      LDI	R16,2
    00865 DF15      RCALL	_Set_White
(0626) 	 delay_ms(300); 
    00866 E20C      LDI	R16,0x2C
    00867 E011      LDI	R17,1
    00868 940E 0107 CALL	_delay_ms
(0627) 	 Set_White_off(2,2,7);
    0086A E087      LDI	R24,7
    0086B 8388      ST	Y,R24
    0086C E022      LDI	R18,2
    0086D E002      LDI	R16,2
    0086E DE90      RCALL	_Set_White_off
(0628) 	 Set_White(3,1,5);   
    0086F E085      LDI	R24,5
    00870 8388      ST	Y,R24
    00871 E021      LDI	R18,1
    00872 E003      LDI	R16,3
    00873 DF07      RCALL	_Set_White
    00874 9622      ADIW	R28,2
    00875 9508      RET
_main:
  data                 --> Y,+2
    00876 9721      SBIW	R28,1
FILE: E:\ICCDemo\Temp_Control\temp_control\main.c
(0001) 
(0002) #include<iom128v.h>
(0003) #include "main.h"
(0004) #include "lcd.h"
(0005) #include "time.h"
(0006) #include "key.h"
(0007) #include "delay.h"
(0008) #include "timertask.h"
(0009) #include "eeprom.h"
(0010) #include "pages.h"
(0011) //const unsigned char nihao[]={};
(0012) //下面两个要删掉，现在为编译暂时不删
(0013)  unsigned int temp_h=0;
(0014)  unsigned int temp_l=0;
(0015)  //uart需要参数
(0016)  unsigned char send_buf[600];
(0017)  unsigned char receive_buf[600];
(0018)  unsigned int send_len;
(0019)  unsigned int receive_len;
(0020)  //界面需要参数
(0021)  unsigned int pageNum;//当前页面，如需跳转改变这个值就行
(0022)  unsigned int pageParam[5];//传递参数。界面间参数暂存
(0023)  unsigned int prePageNum; //上一界面。应该在跳转前设置这个参数。但是用到这个参数的就Page3、4、8.所以可以直接在该界面用到在设置。不用理会规则
(0024)  //**************
(0025) struct temp temps[4]={{0},{0},{0},{0}};
(0026) 
(0027) 
(0028) //*************************************************************************
(0029) //			主程序
(0030) //*************************************************************************
(0031) void main(void)
(0032) { 
(0033)   uchar data;
(0034) temps[0].flag=0;
    00877 2422      CLR	R2
    00878 2433      CLR	R3
    00879 9230 0118 STS	temps+1,R3
    0087B 9220 0117 STS	temps,R2
(0035)  temps[1].flag=1;
    0087D E081      LDI	R24,1
    0087E E090      LDI	R25,0
    0087F 9390 011A STS	temps+3,R25
    00881 9380 0119 STS	temps+2,R24
(0036)  temps[2].flag=2;
    00883 E082      LDI	R24,2
    00884 9390 011C STS	temps+5,R25
    00886 9380 011B STS	temps+4,R24
(0037)  temps[3].flag=5; 
    00888 E085      LDI	R24,5
    00889 9390 011E STS	temps+7,R25
    0088B 9380 011D STS	temps+6,R24
(0038)   DDRE=0xFF;
    0088D EF8F      LDI	R24,0xFF
    0088E B982      OUT	0x02,R24
(0039)   SREG|=0x80;//开中断
    0088F 9478      BSET	7
(0040)   lcd_init();
    00890 940E 065A CALL	_lcd_init
(0041)   lcd_clear(); 
    00892 940E 05CD CALL	_lcd_clear
(0042)   pageNum=2;
    00894 E082      LDI	R24,2
    00895 E090      LDI	R25,0
    00896 9390 06E8 STS	pageNum+1,R25
    00898 9380 06E7 STS	pageNum,R24
(0043)  Set_White_off(1,0,12);
    0089A E08C      LDI	R24,0xC
    0089B 8388      ST	Y,R24
    0089C 2722      CLR	R18
    0089D E001      LDI	R16,1
    0089E 940E 06FF CALL	_Set_White_off
(0044) 	 Set_White_off(1,1,12);
    008A0 E08C      LDI	R24,0xC
    008A1 8388      ST	Y,R24
    008A2 E021      LDI	R18,1
    008A3 E001      LDI	R16,1
    008A4 940E 06FF CALL	_Set_White_off
(0045) 	 Set_White_off(1,2,12);
    008A6 E08C      LDI	R24,0xC
    008A7 8388      ST	Y,R24
    008A8 E022      LDI	R18,2
    008A9 E001      LDI	R16,1
    008AA 940E 06FF CALL	_Set_White_off
(0046) 	 Set_White_off(1,3,12);
    008AC E08C      LDI	R24,0xC
    008AD 8388      ST	Y,R24
    008AE E023      LDI	R18,3
    008AF E001      LDI	R16,1
    008B0 940E 06FF CALL	_Set_White_off
    008B2 C002      RJMP	0x08B5
(0047) 	 while(1){
(0048)      dispatchPages();
    008B3 940E 1547 CALL	_dispatchPages
    008B5 CFFD      RJMP	0x08B3
    008B6 9621      ADIW	R28,1
    008B7 9508      RET
FILE: E:\ICCDemo\Temp_Control\temp_control\timertask.c
(0001) #include<iom128v.h>
(0002) #include "timertask.h"
(0003) #include "time.h"
(0004) #include "lcd.h"
(0005) #include "delay.h"
(0006) unsigned char time_h_1, time_l_1,time_h_3, time_l_3,time_0, time_2,i;
(0007) //************************************************
(0008) //16位定时器，定时器1
(0009) //*************************************************
(0010) /*
(0011)   计数器1，16位的。普通计时，1024分频。在16M下约0.061ms计数一次。共4s钟,
(0012)   自行计算时间传入。传入高低八位
(0013) */
(0014) void Timerinit_1(uchar time_h,uchar time_l){
(0015)     time_h_1=time_h;
_Timerinit_1:
  time_l               --> R18
  time_h               --> R16
    008B8 9300 06EF STS	time_h_1,R16
(0016) 	time_l_1=time_l;
    008BA 9320 06EE STS	time_l_1,R18
(0017) 	 TCCR1B=0x00;
    008BC 2422      CLR	R2
    008BD BC2E      OUT	0x2E,R2
(0018) 	//写入初值
(0019)     TCNT1H=time_h;
    008BE BD0D      OUT	0x2D,R16
(0020)     TCNT1L=time_l;
    008BF BD2C      OUT	0x2C,R18
(0021) 	//普通计数，1024分频
(0022)     TCCR1A=0x00;
    008C0 BC2F      OUT	0x2F,R2
(0023)     TCCR1B=0x05;
    008C1 E085      LDI	R24,5
    008C2 BD8E      OUT	0x2E,R24
(0024) 	 TIMSK|=0x04;//开定时器1溢出中断,16位的
    008C3 B787      IN	R24,0x37
    008C4 6084      ORI	R24,4
    008C5 BF87      OUT	0x37,R24
    008C6 9508      RET
(0025) }
(0026) //************************************************
(0027) //16位定时器，定时器3
(0028) //*************************************************
(0029) /*
(0030)   计数器1，16位的。普通计时，1024分频。在16M下约0.061ms计数一次。共4s钟,
(0031)   自行计算时间传入。传入高低八位
(0032) */
(0033) void Timerinit_3(uchar time_h,uchar time_l){
(0034)  	time_h_3=time_h;
_Timerinit_3:
  time_l               --> R18
  time_h               --> R16
    008C7 9300 06ED STS	time_h_3,R16
(0035) 	time_l_3=time_l;
    008C9 9320 06EC STS	time_l_3,R18
(0036) 	//写入初值
(0037) 	 TCCR3B=0x00;
    008CB 2422      CLR	R2
    008CC 9220 008A STS	0x8A,R2
(0038)     TCNT3H=time_h;
    008CE 9300 0089 STS	0x89,R16
(0039)     TCNT3L=time_l;
    008D0 9320 0088 STS	0x88,R18
(0040) 	//普通计数，1024分频
(0041)     TCCR3A=0x00;
    008D2 9220 008B STS	0x8B,R2
(0042)     TCCR3B=0x05;
    008D4 E085      LDI	R24,5
    008D5 9380 008A STS	0x8A,R24
(0043) 	ETIMSK |=0x04;//开外部中断1
    008D7 9180 007D LDS	R24,0x7D
    008D9 6084      ORI	R24,4
    008DA 9380 007D STS	0x7D,R24
    008DC 9508      RET
(0044) }
(0045) //************************************************
(0046) //8位定时器，定时器0
(0047) //*************************************************
(0048) 
(0049) /*
(0050)   计数器0，8位的。普通计时，1024分频。
(0051)   自行计算时间传入。
(0052) */
(0053) void Timerinit_0(uchar time){
(0054)     time_0=time;
_Timerinit_0:
  time                 --> R16
    008DD 9300 06EB STS	time_0,R16
(0055) 	//写入初值
(0056)     TCNT0=time;
    008DF BF02      OUT	0x32,R16
(0057) 	TIMSK|=0x01;//开定时器0溢出中断,8位的
    008E0 B787      IN	R24,0x37
    008E1 6081      ORI	R24,1
    008E2 BF87      OUT	0x37,R24
(0058) 	 TCCR0=0x07;//普通计数，1024分频
    008E3 E087      LDI	R24,7
    008E4 BF83      OUT	0x33,R24
    008E5 9508      RET
(0059) }
(0060) //************************************************
(0061) //8位定时器，定时器2
(0062) //*************************************************
(0063) /*
(0064)   计数器0，8位的。普通计时，1024分频。
(0065)   自行计算时间传入。
(0066) */
(0067) void Timerinit_2(uchar time){
(0068)     time_2=time;
_Timerinit_2:
  time                 --> R16
    008E6 9300 06EA STS	time_2,R16
(0069) 	//写入初值
(0070)     TCNT2=time;
    008E8 BD04      OUT	0x24,R16
(0071) 	TIMSK|=0x40;//开定时器0溢出中断,8位的
    008E9 B787      IN	R24,0x37
    008EA 6480      ORI	R24,0x40
    008EB BF87      OUT	0x37,R24
(0072) 	//普通计数，1024分频
(0073)     TCCR2=0x05;
    008EC E085      LDI	R24,5
    008ED BD85      OUT	0x25,R24
    008EE 9508      RET
_int_timer0:
    008EF 920A      ST	-Y,R0
    008F0 921A      ST	-Y,R1
    008F1 922A      ST	-Y,R2
    008F2 923A      ST	-Y,R3
    008F3 924A      ST	-Y,R4
    008F4 925A      ST	-Y,R5
    008F5 926A      ST	-Y,R6
    008F6 927A      ST	-Y,R7
    008F7 928A      ST	-Y,R8
    008F8 929A      ST	-Y,R9
    008F9 930A      ST	-Y,R16
    008FA 931A      ST	-Y,R17
    008FB 932A      ST	-Y,R18
    008FC 933A      ST	-Y,R19
    008FD 938A      ST	-Y,R24
    008FE 939A      ST	-Y,R25
    008FF 93AA      ST	-Y,R26
    00900 93BA      ST	-Y,R27
    00901 93EA      ST	-Y,R30
    00902 93FA      ST	-Y,R31
    00903 B60F      IN	R0,0x3F
    00904 920A      ST	-Y,R0
    00905 9721      SBIW	R28,1
(0074) }
(0075) #pragma interrupt_handler int_timer0:17
(0076) void int_timer0(void){ 
(0077) 		TCCR0=0x00;
    00906 2422      CLR	R2
    00907 BE23      OUT	0x33,R2
(0078) 		//adc_init_once();
(0079) 		for(i=0;i<5;i++){
    00908 9220 06E9 STS	i,R2
    0090A C011      RJMP	0x091C
(0080)   		 lcd_write_char(0x01,3,0x30+i);	
    0090B 9180 06E9 LDS	R24,i
    0090D 5D80      SUBI	R24,0xD0
    0090E 8388      ST	Y,R24
    0090F E023      LDI	R18,3
    00910 E001      LDI	R16,1
    00911 940E 04F0 CALL	_lcd_write_char
(0081) 		 delay_ms(100);		
    00913 E604      LDI	R16,0x64
    00914 E010      LDI	R17,0
    00915 940E 0107 CALL	_delay_ms
    00917 9180 06E9 LDS	R24,i
    00919 5F8F      SUBI	R24,0xFF
    0091A 9380 06E9 STS	i,R24
    0091C 9180 06E9 LDS	R24,i
    0091E 3085      CPI	R24,5
    0091F F358      BCS	0x090B
(0082)         }
(0083) 		TCNT0=time_0;
    00920 9020 06EB LDS	R2,time_0
    00922 BE22      OUT	0x32,R2
(0084) 		TCCR0=0x07;
    00923 E087      LDI	R24,7
    00924 BF83      OUT	0x33,R24
(0085) 		return;
    00925 9621      ADIW	R28,1
    00926 9009      LD	R0,Y+
    00927 BE0F      OUT	0x3F,R0
    00928 91F9      LD	R31,Y+
    00929 91E9      LD	R30,Y+
    0092A 91B9      LD	R27,Y+
    0092B 91A9      LD	R26,Y+
    0092C 9199      LD	R25,Y+
    0092D 9189      LD	R24,Y+
    0092E 9139      LD	R19,Y+
    0092F 9129      LD	R18,Y+
    00930 9119      LD	R17,Y+
    00931 9109      LD	R16,Y+
    00932 9099      LD	R9,Y+
    00933 9089      LD	R8,Y+
    00934 9079      LD	R7,Y+
    00935 9069      LD	R6,Y+
    00936 9059      LD	R5,Y+
    00937 9049      LD	R4,Y+
    00938 9039      LD	R3,Y+
    00939 9029      LD	R2,Y+
    0093A 9019      LD	R1,Y+
    0093B 9009      LD	R0,Y+
    0093C 9518      RETI
_int_timer1:
    0093D 920A      ST	-Y,R0
    0093E 921A      ST	-Y,R1
    0093F 922A      ST	-Y,R2
    00940 923A      ST	-Y,R3
    00941 924A      ST	-Y,R4
    00942 925A      ST	-Y,R5
    00943 926A      ST	-Y,R6
    00944 927A      ST	-Y,R7
    00945 928A      ST	-Y,R8
    00946 929A      ST	-Y,R9
    00947 930A      ST	-Y,R16
    00948 931A      ST	-Y,R17
    00949 932A      ST	-Y,R18
    0094A 933A      ST	-Y,R19
    0094B 938A      ST	-Y,R24
    0094C 939A      ST	-Y,R25
    0094D 93AA      ST	-Y,R26
    0094E 93BA      ST	-Y,R27
    0094F 93EA      ST	-Y,R30
    00950 93FA      ST	-Y,R31
    00951 B60F      IN	R0,0x3F
    00952 920A      ST	-Y,R0
    00953 9721      SBIW	R28,1
(0086) }
(0087) //溢出中断。
(0088) #pragma interrupt_handler int_timer1:15
(0089) void int_timer1(void){
(0090) 		 TCCR1B=0x00;
    00954 2422      CLR	R2
    00955 BC2E      OUT	0x2E,R2
(0091) 		//adc_init_once();
(0092) 		for(i=0;i<5;i++){
    00956 9220 06E9 STS	i,R2
    00958 C011      RJMP	0x096A
(0093)   		 lcd_write_char(0x03,3,0x30+i);	
    00959 9180 06E9 LDS	R24,i
    0095B 5D80      SUBI	R24,0xD0
    0095C 8388      ST	Y,R24
    0095D E023      LDI	R18,3
    0095E E003      LDI	R16,3
    0095F 940E 04F0 CALL	_lcd_write_char
(0094) 		 delay_ms(100);		
    00961 E604      LDI	R16,0x64
    00962 E010      LDI	R17,0
    00963 940E 0107 CALL	_delay_ms
    00965 9180 06E9 LDS	R24,i
    00967 5F8F      SUBI	R24,0xFF
    00968 9380 06E9 STS	i,R24
    0096A 9180 06E9 LDS	R24,i
    0096C 3085      CPI	R24,5
    0096D F358      BCS	0x0959
(0095)         }
(0096) 		TCNT1H=time_h_1;
    0096E 9020 06EF LDS	R2,time_h_1
    00970 BC2D      OUT	0x2D,R2
(0097)          TCNT1L=time_l_1;
    00971 9020 06EE LDS	R2,time_l_1
    00973 BC2C      OUT	0x2C,R2
(0098) 		 TCCR1B=0x05;
    00974 E085      LDI	R24,5
    00975 BD8E      OUT	0x2E,R24
(0099) 		return;
    00976 9621      ADIW	R28,1
    00977 9009      LD	R0,Y+
    00978 BE0F      OUT	0x3F,R0
    00979 91F9      LD	R31,Y+
    0097A 91E9      LD	R30,Y+
    0097B 91B9      LD	R27,Y+
    0097C 91A9      LD	R26,Y+
    0097D 9199      LD	R25,Y+
    0097E 9189      LD	R24,Y+
    0097F 9139      LD	R19,Y+
    00980 9129      LD	R18,Y+
    00981 9119      LD	R17,Y+
    00982 9109      LD	R16,Y+
    00983 9099      LD	R9,Y+
    00984 9089      LD	R8,Y+
    00985 9079      LD	R7,Y+
    00986 9069      LD	R6,Y+
    00987 9059      LD	R5,Y+
    00988 9049      LD	R4,Y+
    00989 9039      LD	R3,Y+
    0098A 9029      LD	R2,Y+
    0098B 9019      LD	R1,Y+
    0098C 9009      LD	R0,Y+
    0098D 9518      RETI
_int_timer2:
    0098E 920A      ST	-Y,R0
    0098F 921A      ST	-Y,R1
    00990 922A      ST	-Y,R2
    00991 923A      ST	-Y,R3
    00992 924A      ST	-Y,R4
    00993 925A      ST	-Y,R5
    00994 926A      ST	-Y,R6
    00995 927A      ST	-Y,R7
    00996 928A      ST	-Y,R8
    00997 929A      ST	-Y,R9
    00998 930A      ST	-Y,R16
    00999 931A      ST	-Y,R17
    0099A 932A      ST	-Y,R18
    0099B 933A      ST	-Y,R19
    0099C 938A      ST	-Y,R24
    0099D 939A      ST	-Y,R25
    0099E 93AA      ST	-Y,R26
    0099F 93BA      ST	-Y,R27
    009A0 93EA      ST	-Y,R30
    009A1 93FA      ST	-Y,R31
    009A2 B60F      IN	R0,0x3F
    009A3 920A      ST	-Y,R0
    009A4 9721      SBIW	R28,1
(0100) }
(0101) #pragma interrupt_handler int_timer2:11
(0102) void int_timer2(void){
(0103)       PORTE=~PORTE;
    009A5 B023      IN	R2,0x03
    009A6 9420      COM	R2
    009A7 B823      OUT	0x03,R2
(0104) 		TCCR2=0x00;
    009A8 2422      CLR	R2
    009A9 BC25      OUT	0x25,R2
(0105) 		for(i=0;i<5;i++){
    009AA 9220 06E9 STS	i,R2
    009AC C011      RJMP	0x09BE
(0106)   		 lcd_write_char(0x00,3,0x30+i);	
    009AD 9180 06E9 LDS	R24,i
    009AF 5D80      SUBI	R24,0xD0
    009B0 8388      ST	Y,R24
    009B1 E023      LDI	R18,3
    009B2 2700      CLR	R16
    009B3 940E 04F0 CALL	_lcd_write_char
(0107) 		 delay_ms(100);		
    009B5 E604      LDI	R16,0x64
    009B6 E010      LDI	R17,0
    009B7 940E 0107 CALL	_delay_ms
    009B9 9180 06E9 LDS	R24,i
    009BB 5F8F      SUBI	R24,0xFF
    009BC 9380 06E9 STS	i,R24
    009BE 9180 06E9 LDS	R24,i
    009C0 3085      CPI	R24,5
    009C1 F358      BCS	0x09AD
(0108)         }
(0109) 		TCNT2=time_2;
    009C2 9020 06EA LDS	R2,time_2
    009C4 BC24      OUT	0x24,R2
(0110) 		TCCR2=0x05;
    009C5 E085      LDI	R24,5
    009C6 BD85      OUT	0x25,R24
(0111) 		return;
    009C7 9621      ADIW	R28,1
    009C8 9009      LD	R0,Y+
    009C9 BE0F      OUT	0x3F,R0
    009CA 91F9      LD	R31,Y+
    009CB 91E9      LD	R30,Y+
    009CC 91B9      LD	R27,Y+
    009CD 91A9      LD	R26,Y+
    009CE 9199      LD	R25,Y+
    009CF 9189      LD	R24,Y+
    009D0 9139      LD	R19,Y+
    009D1 9129      LD	R18,Y+
    009D2 9119      LD	R17,Y+
    009D3 9109      LD	R16,Y+
    009D4 9099      LD	R9,Y+
    009D5 9089      LD	R8,Y+
    009D6 9079      LD	R7,Y+
    009D7 9069      LD	R6,Y+
    009D8 9059      LD	R5,Y+
    009D9 9049      LD	R4,Y+
    009DA 9039      LD	R3,Y+
    009DB 9029      LD	R2,Y+
    009DC 9019      LD	R1,Y+
    009DD 9009      LD	R0,Y+
    009DE 9518      RETI
_int_timer3:
    009DF 920A      ST	-Y,R0
    009E0 921A      ST	-Y,R1
    009E1 922A      ST	-Y,R2
    009E2 923A      ST	-Y,R3
    009E3 924A      ST	-Y,R4
    009E4 925A      ST	-Y,R5
    009E5 926A      ST	-Y,R6
    009E6 927A      ST	-Y,R7
    009E7 928A      ST	-Y,R8
    009E8 929A      ST	-Y,R9
    009E9 930A      ST	-Y,R16
    009EA 931A      ST	-Y,R17
    009EB 932A      ST	-Y,R18
    009EC 933A      ST	-Y,R19
    009ED 938A      ST	-Y,R24
    009EE 939A      ST	-Y,R25
    009EF 93AA      ST	-Y,R26
    009F0 93BA      ST	-Y,R27
    009F1 93EA      ST	-Y,R30
    009F2 93FA      ST	-Y,R31
    009F3 B60F      IN	R0,0x3F
    009F4 920A      ST	-Y,R0
    009F5 9721      SBIW	R28,1
(0112) }
(0113) //16位定时器，定时器3溢出中断。
(0114) #pragma interrupt_handler int_timer3:30
(0115) void int_timer3(void){
(0116)     TCCR1B=0x00;
    009F6 2422      CLR	R2
    009F7 BC2E      OUT	0x2E,R2
(0117)      for(i=0;i<5;i++){
    009F8 9220 06E9 STS	i,R2
    009FA C011      RJMP	0x0A0C
(0118)   		 lcd_write_char(0x02,3,0x30+i);	
    009FB 9180 06E9 LDS	R24,i
    009FD 5D80      SUBI	R24,0xD0
    009FE 8388      ST	Y,R24
    009FF E023      LDI	R18,3
    00A00 E002      LDI	R16,2
    00A01 940E 04F0 CALL	_lcd_write_char
(0119) 		 delay_ms(100);		
    00A03 E604      LDI	R16,0x64
    00A04 E010      LDI	R17,0
    00A05 940E 0107 CALL	_delay_ms
    00A07 9180 06E9 LDS	R24,i
    00A09 5F8F      SUBI	R24,0xFF
    00A0A 9380 06E9 STS	i,R24
    00A0C 9180 06E9 LDS	R24,i
    00A0E 3085      CPI	R24,5
    00A0F F358      BCS	0x09FB
(0120)         }
(0121) 	TCNT3H=time_h_3;
    00A10 9020 06ED LDS	R2,time_h_3
    00A12 9220 0089 STS	0x89,R2
(0122)     TCNT3L=time_l_3;
    00A14 9020 06EC LDS	R2,time_l_3
    00A16 9220 0088 STS	0x88,R2
(0123) 	 TCCR1B=0x05;
    00A18 E085      LDI	R24,5
    00A19 BD8E      OUT	0x2E,R24
    00A1A 9621      ADIW	R28,1
    00A1B 9009      LD	R0,Y+
    00A1C BE0F      OUT	0x3F,R0
    00A1D 91F9      LD	R31,Y+
    00A1E 91E9      LD	R30,Y+
    00A1F 91B9      LD	R27,Y+
    00A20 91A9      LD	R26,Y+
    00A21 9199      LD	R25,Y+
    00A22 9189      LD	R24,Y+
    00A23 9139      LD	R19,Y+
    00A24 9129      LD	R18,Y+
    00A25 9119      LD	R17,Y+
    00A26 9109      LD	R16,Y+
    00A27 9099      LD	R9,Y+
    00A28 9089      LD	R8,Y+
    00A29 9079      LD	R7,Y+
    00A2A 9069      LD	R6,Y+
    00A2B 9059      LD	R5,Y+
    00A2C 9049      LD	R4,Y+
    00A2D 9039      LD	R3,Y+
    00A2E 9029      LD	R2,Y+
    00A2F 9019      LD	R1,Y+
    00A30 9009      LD	R0,Y+
    00A31 9518      RETI
_readTemp_1:
  i                    --> R20
    00A32 934A      ST	-Y,R20
    00A33 935A      ST	-Y,R21
FILE: E:\ICCDemo\Temp_Control\temp_control\max6675.c
(0001) #include<iom128v.h>
(0002) #include "max6675.h"
(0003) #include "main.h"
(0004) #include "delay.h"
(0005) #define sck_h_1 PORTE|=(1<<PE3) 
(0006) #define sck_l_1 PORTE&=~(1<<PE3) 
(0007) #define cs_h_1 PORTE|=1<<PE4 
(0008) #define cs_l_1 PORTE&=~(1<<PE4) 
(0009) 
(0010) #define sck_h_2 PORTE|=(1<<PE6) 
(0011) #define sck_l_2 PORTE&=~(1<<PE6) 
(0012) #define cs_h_2 PORTE|=1<<PE7 
(0013) #define cs_l_2 PORTE&=~(1<<PE7) 
(0014) 
(0015) #define sck_h_3 PORTF|=(1<<PF0) 
(0016) #define sck_l_3 PORTF&=~(1<<PF0) 
(0017) #define cs_h_3 PORTF|=1<<PF2 
(0018) #define cs_l_3 PORTF&=~(1<<PF2) 
(0019) 
(0020) #define sck_h_4 PORTF|=(1<<PF4) 
(0021) #define sck_l_4 PORTF&=~(1<<PF4) 
(0022) #define cs_h_4 PORTF|=1<<PF5 
(0023) #define cs_l_4 PORTF&=~(1<<PF5) 
(0024) /*
(0025) 仿真中没有读出数据，也没有实物
(0026) 
(0027) */
(0028) void readTemp_1(void){
(0029) 	   uint i;
(0030) 	   DDRE&=0xFB;
    00A34 B182      IN	R24,0x02
    00A35 7F8B      ANDI	R24,0xFB
    00A36 B982      OUT	0x02,R24
(0031) 	   sck_l_1;
    00A37 981B      CBI	0x03,3
(0032) 	   cs_l_1;
    00A38 981C      CBI	0x03,4
(0033) 	   delay_us(1);
    00A39 E001      LDI	R16,1
    00A3A E010      LDI	R17,0
    00A3B 940E 00FD CALL	_delay_us
(0034) 	   for(i=0;i<8;i++){
    00A3D 2744      CLR	R20
    00A3E 2755      CLR	R21
    00A3F C020      RJMP	0x0A60
(0035) 			sck_h_1;
    00A40 9A1B      SBI	0x03,3
(0036) 			delay_us(10);
    00A41 E00A      LDI	R16,0xA
    00A42 E010      LDI	R17,0
    00A43 940E 00FD CALL	_delay_us
(0037) 	    	temp_h=temp_h|(PINE&0x04);
    00A45 B181      IN	R24,0x01
    00A46 2799      CLR	R25
    00A47 7084      ANDI	R24,4
    00A48 7090      ANDI	R25,0
    00A49 9020 0113 LDS	R2,temp_h
    00A4B 9030 0114 LDS	R3,temp_h+1
    00A4D 2A28      OR	R2,R24
    00A4E 2A39      OR	R3,R25
    00A4F 9230 0114 STS	temp_h+1,R3
    00A51 9220 0113 STS	temp_h,R2
(0038) 			temp_h<<=1;
    00A53 0C22      LSL	R2
    00A54 1C33      ROL	R3
    00A55 9230 0114 STS	temp_h+1,R3
    00A57 9220 0113 STS	temp_h,R2
(0039) 			sck_l_1;
    00A59 981B      CBI	0x03,3
(0040) 			delay_us(1);
    00A5A E001      LDI	R16,1
    00A5B E010      LDI	R17,0
    00A5C 940E 00FD CALL	_delay_us
    00A5E 5F4F      SUBI	R20,0xFF
    00A5F 4F5F      SBCI	R21,0xFF
    00A60 3048      CPI	R20,0x8
    00A61 E0E0      LDI	R30,0
    00A62 075E      CPC	R21,R30
    00A63 F2E0      BCS	0x0A40
(0041) 			
(0042) 	   }
(0043) 	   for(i=0;i<8;i++){
    00A64 2744      CLR	R20
    00A65 2755      CLR	R21
    00A66 C022      RJMP	0x0A89
(0044) 			sck_h_1;
    00A67 9A1B      SBI	0x03,3
(0045) 			delay_us(10);
    00A68 E00A      LDI	R16,0xA
    00A69 E010      LDI	R17,0
    00A6A 940E 00FD CALL	_delay_us
(0046) 	    	temp_l=temp_l|(PINE&0x04);
    00A6C B181      IN	R24,0x01
    00A6D 2799      CLR	R25
    00A6E 7084      ANDI	R24,4
    00A6F 7090      ANDI	R25,0
    00A70 9020 0115 LDS	R2,temp_l
    00A72 9030 0116 LDS	R3,temp_l+1
    00A74 2A28      OR	R2,R24
    00A75 2A39      OR	R3,R25
    00A76 9230 0116 STS	temp_l+1,R3
    00A78 9220 0115 STS	temp_l,R2
(0047) 			temp_l<<=temp_l;
    00A7A 0191      MOVW	R18,R2
    00A7B 0181      MOVW	R16,R2
    00A7C 940E 1610 CALL	lsl16
    00A7E 9310 0116 STS	temp_l+1,R17
    00A80 9300 0115 STS	temp_l,R16
(0048) 			sck_l_1;
    00A82 981B      CBI	0x03,3
(0049) 			delay_us(1);
    00A83 E001      LDI	R16,1
    00A84 E010      LDI	R17,0
    00A85 940E 00FD CALL	_delay_us
    00A87 5F4F      SUBI	R20,0xFF
    00A88 4F5F      SBCI	R21,0xFF
    00A89 3048      CPI	R20,0x8
    00A8A E0E0      LDI	R30,0
    00A8B 075E      CPC	R21,R30
    00A8C F2D0      BCS	0x0A67
(0050) 	   }
(0051) 	   delay_us(1);
    00A8D E001      LDI	R16,1
    00A8E E010      LDI	R17,0
    00A8F 940E 00FD CALL	_delay_us
(0052) 	  // temp_l=0x55;
(0053) 	   return ;
    00A91 9159      LD	R21,Y+
    00A92 9149      LD	R20,Y+
    00A93 9508      RET
_readTemp_2:
  i                    --> R20
    00A94 934A      ST	-Y,R20
    00A95 935A      ST	-Y,R21
(0054) }
(0055) void readTemp_2(void){
(0056) 	   uint i;
(0057) 	   DDRE&=0xDF;
    00A96 B182      IN	R24,0x02
    00A97 7D8F      ANDI	R24,0xDF
    00A98 B982      OUT	0x02,R24
(0058) 	   sck_l_2;
    00A99 981E      CBI	0x03,6
(0059) 	   cs_l_2;
    00A9A 981F      CBI	0x03,7
(0060) 	   delay_us(1);
    00A9B E001      LDI	R16,1
    00A9C E010      LDI	R17,0
    00A9D 940E 00FD CALL	_delay_us
(0061) 	   for(i=0;i<8;i++){
    00A9F 2744      CLR	R20
    00AA0 2755      CLR	R21
    00AA1 C020      RJMP	0x0AC2
(0062) 			sck_h_2;
    00AA2 9A1E      SBI	0x03,6
(0063) 			delay_us(10);
    00AA3 E00A      LDI	R16,0xA
    00AA4 E010      LDI	R17,0
    00AA5 940E 00FD CALL	_delay_us
(0064) 	    	temp_h=temp_h|(PINE&0x20);
    00AA7 B181      IN	R24,0x01
    00AA8 2799      CLR	R25
    00AA9 7280      ANDI	R24,0x20
    00AAA 7090      ANDI	R25,0
    00AAB 9020 0113 LDS	R2,temp_h
    00AAD 9030 0114 LDS	R3,temp_h+1
    00AAF 2A28      OR	R2,R24
    00AB0 2A39      OR	R3,R25
    00AB1 9230 0114 STS	temp_h+1,R3
    00AB3 9220 0113 STS	temp_h,R2
(0065) 			temp_h<<=1;
    00AB5 0C22      LSL	R2
    00AB6 1C33      ROL	R3
    00AB7 9230 0114 STS	temp_h+1,R3
    00AB9 9220 0113 STS	temp_h,R2
(0066) 			sck_l_2;
    00ABB 981E      CBI	0x03,6
(0067) 			delay_us(1);
    00ABC E001      LDI	R16,1
    00ABD E010      LDI	R17,0
    00ABE 940E 00FD CALL	_delay_us
    00AC0 5F4F      SUBI	R20,0xFF
    00AC1 4F5F      SBCI	R21,0xFF
    00AC2 3048      CPI	R20,0x8
    00AC3 E0E0      LDI	R30,0
    00AC4 075E      CPC	R21,R30
    00AC5 F2E0      BCS	0x0AA2
(0068) 			
(0069) 	   }
(0070) 	   for(i=0;i<8;i++){
    00AC6 2744      CLR	R20
    00AC7 2755      CLR	R21
    00AC8 C022      RJMP	0x0AEB
(0071) 			sck_h_2;
    00AC9 9A1E      SBI	0x03,6
(0072) 			delay_us(10);
    00ACA E00A      LDI	R16,0xA
    00ACB E010      LDI	R17,0
    00ACC 940E 00FD CALL	_delay_us
(0073) 	    	temp_l=temp_l|(PINE&0x20);
    00ACE B181      IN	R24,0x01
    00ACF 2799      CLR	R25
    00AD0 7280      ANDI	R24,0x20
    00AD1 7090      ANDI	R25,0
    00AD2 9020 0115 LDS	R2,temp_l
    00AD4 9030 0116 LDS	R3,temp_l+1
    00AD6 2A28      OR	R2,R24
    00AD7 2A39      OR	R3,R25
    00AD8 9230 0116 STS	temp_l+1,R3
    00ADA 9220 0115 STS	temp_l,R2
(0074) 			temp_l<<=temp_l;
    00ADC 0191      MOVW	R18,R2
    00ADD 0181      MOVW	R16,R2
    00ADE 940E 1610 CALL	lsl16
    00AE0 9310 0116 STS	temp_l+1,R17
    00AE2 9300 0115 STS	temp_l,R16
(0075) 			sck_l_2;
    00AE4 981E      CBI	0x03,6
(0076) 			delay_us(1);
    00AE5 E001      LDI	R16,1
    00AE6 E010      LDI	R17,0
    00AE7 940E 00FD CALL	_delay_us
    00AE9 5F4F      SUBI	R20,0xFF
    00AEA 4F5F      SBCI	R21,0xFF
    00AEB 3048      CPI	R20,0x8
    00AEC E0E0      LDI	R30,0
    00AED 075E      CPC	R21,R30
    00AEE F2D0      BCS	0x0AC9
(0077) 	   }
(0078) 	   delay_us(1);
    00AEF E001      LDI	R16,1
    00AF0 E010      LDI	R17,0
    00AF1 940E 00FD CALL	_delay_us
(0079) 	  // temp_l=0x55;
(0080) 	   return ;
    00AF3 9159      LD	R21,Y+
    00AF4 9149      LD	R20,Y+
    00AF5 9508      RET
_readTemp_3:
  i                    --> R20
    00AF6 934A      ST	-Y,R20
    00AF7 935A      ST	-Y,R21
(0081) }
(0082) void readTemp_3(void){
(0083) 	   uint i;
(0084) 	   DDRF&=0xFE;
    00AF8 9180 0061 LDS	R24,0x61
    00AFA 7F8E      ANDI	R24,0xFE
    00AFB 9380 0061 STS	0x61,R24
(0085) 	   sck_l_3;
    00AFD 9180 0062 LDS	R24,0x62
    00AFF 7F8E      ANDI	R24,0xFE
    00B00 9380 0062 STS	0x62,R24
(0086) 	   cs_l_3;
    00B02 9180 0062 LDS	R24,0x62
    00B04 7F8B      ANDI	R24,0xFB
    00B05 9380 0062 STS	0x62,R24
(0087) 	   delay_us(1);
    00B07 E001      LDI	R16,1
    00B08 E010      LDI	R17,0
    00B09 940E 00FD CALL	_delay_us
(0088) 	   for(i=0;i<8;i++){
    00B0B 2744      CLR	R20
    00B0C 2755      CLR	R21
    00B0D C028      RJMP	0x0B36
(0089) 			sck_h_3;
    00B0E 9180 0062 LDS	R24,0x62
    00B10 6081      ORI	R24,1
    00B11 9380 0062 STS	0x62,R24
(0090) 			delay_us(10);
    00B13 E00A      LDI	R16,0xA
    00B14 E010      LDI	R17,0
    00B15 940E 00FD CALL	_delay_us
(0091) 	    	temp_h=temp_h|(PINF&0x01);
    00B17 B180      IN	R24,0x00
    00B18 2799      CLR	R25
    00B19 7081      ANDI	R24,1
    00B1A 7090      ANDI	R25,0
    00B1B 9020 0113 LDS	R2,temp_h
    00B1D 9030 0114 LDS	R3,temp_h+1
    00B1F 2A28      OR	R2,R24
    00B20 2A39      OR	R3,R25
    00B21 9230 0114 STS	temp_h+1,R3
    00B23 9220 0113 STS	temp_h,R2
(0092) 			temp_h<<=1;
    00B25 0C22      LSL	R2
    00B26 1C33      ROL	R3
    00B27 9230 0114 STS	temp_h+1,R3
    00B29 9220 0113 STS	temp_h,R2
(0093) 			sck_l_3;
    00B2B 9180 0062 LDS	R24,0x62
    00B2D 7F8E      ANDI	R24,0xFE
    00B2E 9380 0062 STS	0x62,R24
(0094) 			delay_us(1);
    00B30 E001      LDI	R16,1
    00B31 E010      LDI	R17,0
    00B32 940E 00FD CALL	_delay_us
    00B34 5F4F      SUBI	R20,0xFF
    00B35 4F5F      SBCI	R21,0xFF
    00B36 3048      CPI	R20,0x8
    00B37 E0E0      LDI	R30,0
    00B38 075E      CPC	R21,R30
    00B39 F2A0      BCS	0x0B0E
(0095) 			
(0096) 	   }
(0097) 	   for(i=0;i<8;i++){
    00B3A 2744      CLR	R20
    00B3B 2755      CLR	R21
    00B3C C02A      RJMP	0x0B67
(0098) 			sck_h_3;
    00B3D 9180 0062 LDS	R24,0x62
    00B3F 6081      ORI	R24,1
    00B40 9380 0062 STS	0x62,R24
(0099) 			delay_us(10);
    00B42 E00A      LDI	R16,0xA
    00B43 E010      LDI	R17,0
    00B44 940E 00FD CALL	_delay_us
(0100) 	    	temp_l=temp_l|(PINF&0x01);
    00B46 B180      IN	R24,0x00
    00B47 2799      CLR	R25
    00B48 7081      ANDI	R24,1
    00B49 7090      ANDI	R25,0
    00B4A 9020 0115 LDS	R2,temp_l
    00B4C 9030 0116 LDS	R3,temp_l+1
    00B4E 2A28      OR	R2,R24
    00B4F 2A39      OR	R3,R25
    00B50 9230 0116 STS	temp_l+1,R3
    00B52 9220 0115 STS	temp_l,R2
(0101) 			temp_l<<=temp_l;
    00B54 0191      MOVW	R18,R2
    00B55 0181      MOVW	R16,R2
    00B56 940E 1610 CALL	lsl16
    00B58 9310 0116 STS	temp_l+1,R17
    00B5A 9300 0115 STS	temp_l,R16
(0102) 			sck_l_3;
    00B5C 9180 0062 LDS	R24,0x62
    00B5E 7F8E      ANDI	R24,0xFE
    00B5F 9380 0062 STS	0x62,R24
(0103) 			delay_us(1);
    00B61 E001      LDI	R16,1
    00B62 E010      LDI	R17,0
    00B63 940E 00FD CALL	_delay_us
    00B65 5F4F      SUBI	R20,0xFF
    00B66 4F5F      SBCI	R21,0xFF
    00B67 3048      CPI	R20,0x8
    00B68 E0E0      LDI	R30,0
    00B69 075E      CPC	R21,R30
    00B6A F290      BCS	0x0B3D
(0104) 	   }
(0105) 	   delay_us(1);
    00B6B E001      LDI	R16,1
    00B6C E010      LDI	R17,0
    00B6D 940E 00FD CALL	_delay_us
(0106) 	  // temp_l=0x55;
(0107) 	   return ;
    00B6F 9159      LD	R21,Y+
    00B70 9149      LD	R20,Y+
    00B71 9508      RET
_readTemp_4:
  i                    --> R20
    00B72 934A      ST	-Y,R20
    00B73 935A      ST	-Y,R21
(0108) }
(0109) void readTemp_4(void){
(0110) 	   uint i;
(0111) 	   DDRF&=0xF7;
    00B74 9180 0061 LDS	R24,0x61
    00B76 7F87      ANDI	R24,0xF7
    00B77 9380 0061 STS	0x61,R24
(0112) 	   sck_l_4;
    00B79 9180 0062 LDS	R24,0x62
    00B7B 7E8F      ANDI	R24,0xEF
    00B7C 9380 0062 STS	0x62,R24
(0113) 	   cs_l_4;
    00B7E 9180 0062 LDS	R24,0x62
    00B80 7D8F      ANDI	R24,0xDF
    00B81 9380 0062 STS	0x62,R24
(0114) 	   delay_us(1);
    00B83 E001      LDI	R16,1
    00B84 E010      LDI	R17,0
    00B85 940E 00FD CALL	_delay_us
(0115) 	   for(i=0;i<8;i++){
    00B87 2744      CLR	R20
    00B88 2755      CLR	R21
    00B89 C028      RJMP	0x0BB2
(0116) 			sck_h_4;
    00B8A 9180 0062 LDS	R24,0x62
    00B8C 6180      ORI	R24,0x10
    00B8D 9380 0062 STS	0x62,R24
(0117) 			delay_us(10);
    00B8F E00A      LDI	R16,0xA
    00B90 E010      LDI	R17,0
    00B91 940E 00FD CALL	_delay_us
(0118) 	    	temp_h=temp_h|(PINF&0x80);
    00B93 B180      IN	R24,0x00
    00B94 2799      CLR	R25
    00B95 7880      ANDI	R24,0x80
    00B96 7090      ANDI	R25,0
    00B97 9020 0113 LDS	R2,temp_h
    00B99 9030 0114 LDS	R3,temp_h+1
    00B9B 2A28      OR	R2,R24
    00B9C 2A39      OR	R3,R25
    00B9D 9230 0114 STS	temp_h+1,R3
    00B9F 9220 0113 STS	temp_h,R2
(0119) 			temp_h<<=1;
    00BA1 0C22      LSL	R2
    00BA2 1C33      ROL	R3
    00BA3 9230 0114 STS	temp_h+1,R3
    00BA5 9220 0113 STS	temp_h,R2
(0120) 			sck_l_4;
    00BA7 9180 0062 LDS	R24,0x62
    00BA9 7E8F      ANDI	R24,0xEF
    00BAA 9380 0062 STS	0x62,R24
(0121) 			delay_us(1);
    00BAC E001      LDI	R16,1
    00BAD E010      LDI	R17,0
    00BAE 940E 00FD CALL	_delay_us
    00BB0 5F4F      SUBI	R20,0xFF
    00BB1 4F5F      SBCI	R21,0xFF
    00BB2 3048      CPI	R20,0x8
    00BB3 E0E0      LDI	R30,0
    00BB4 075E      CPC	R21,R30
    00BB5 F2A0      BCS	0x0B8A
(0122) 			
(0123) 	   }
(0124) 	   for(i=0;i<8;i++){
    00BB6 2744      CLR	R20
    00BB7 2755      CLR	R21
    00BB8 C02A      RJMP	0x0BE3
(0125) 			sck_h_4;
    00BB9 9180 0062 LDS	R24,0x62
    00BBB 6180      ORI	R24,0x10
    00BBC 9380 0062 STS	0x62,R24
(0126) 			delay_us(10);
    00BBE E00A      LDI	R16,0xA
    00BBF E010      LDI	R17,0
    00BC0 940E 00FD CALL	_delay_us
(0127) 	    	temp_l=temp_l|(PINF&0x80);
    00BC2 B180      IN	R24,0x00
    00BC3 2799      CLR	R25
    00BC4 7880      ANDI	R24,0x80
    00BC5 7090      ANDI	R25,0
    00BC6 9020 0115 LDS	R2,temp_l
    00BC8 9030 0116 LDS	R3,temp_l+1
    00BCA 2A28      OR	R2,R24
    00BCB 2A39      OR	R3,R25
    00BCC 9230 0116 STS	temp_l+1,R3
    00BCE 9220 0115 STS	temp_l,R2
(0128) 			temp_l<<=temp_l;
    00BD0 0191      MOVW	R18,R2
    00BD1 0181      MOVW	R16,R2
    00BD2 940E 1610 CALL	lsl16
    00BD4 9310 0116 STS	temp_l+1,R17
    00BD6 9300 0115 STS	temp_l,R16
(0129) 			sck_l_4;
    00BD8 9180 0062 LDS	R24,0x62
    00BDA 7E8F      ANDI	R24,0xEF
    00BDB 9380 0062 STS	0x62,R24
(0130) 			delay_us(1);
    00BDD E001      LDI	R16,1
    00BDE E010      LDI	R17,0
    00BDF 940E 00FD CALL	_delay_us
    00BE1 5F4F      SUBI	R20,0xFF
    00BE2 4F5F      SBCI	R21,0xFF
    00BE3 3048      CPI	R20,0x8
    00BE4 E0E0      LDI	R30,0
    00BE5 075E      CPC	R21,R30
    00BE6 F290      BCS	0x0BB9
(0131) 	   }
(0132) 	   delay_us(1);
    00BE7 E001      LDI	R16,1
    00BE8 E010      LDI	R17,0
    00BE9 940E 00FD CALL	_delay_us
(0133) 	  // temp_l=0x55;
(0134) 	   return ;
    00BEB 9159      LD	R21,Y+
    00BEC 9149      LD	R20,Y+
    00BED 9508      RET
(0135) }
(0136) uchar readOC(void){
(0137) 	  DDRD&=0x07;
_readOC:
    00BEE B381      IN	R24,0x11
    00BEF 7087      ANDI	R24,7
    00BF0 BB81      OUT	0x11,R24
(0138) 	  return PIND&(0xF8);
    00BF1 B300      IN	R16,0x10
    00BF2 7F08      ANDI	R16,0xF8
    00BF3 9508      RET
FILE: E:\ICCDemo\Temp_Control\temp_control\out.c
(0001) #include<iom128v.h>
(0002) #include "out.h"
(0003) 
(0004) void out_all(uchar out){
(0005)   DDRC=0xFF;
_out_all:
  out                  --> R16
    00BF4 EF8F      LDI	R24,0xFF
    00BF5 BB84      OUT	0x14,R24
(0006)   PORTC=out;
    00BF6 BB05      OUT	0x15,R16
    00BF7 9508      RET
_out_port:
  port                 --> R10
  out                  --> R20
    00BF8 940E 15CE CALL	push_xgset300C
    00BFA 0159      MOVW	R10,R18
    00BFB 01A8      MOVW	R20,R16
(0007) }
(0008) //0、1的传入。port由0~7
(0009) void out_port(uint out,uint port){
(0010)   DDRC=0xFF;
    00BFC EF8F      LDI	R24,0xFF
    00BFD BB84      OUT	0x14,R24
(0011)   if(out==0){
    00BFE 3040      CPI	R20,0
    00BFF 0745      CPC	R20,R21
    00C00 F471      BNE	0x0C0F
(0012)    PORTC&=~(1<<port);
    00C01 E001      LDI	R16,1
    00C02 E010      LDI	R17,0
    00C03 0195      MOVW	R18,R10
    00C04 940E 1610 CALL	lsl16
    00C06 0118      MOVW	R2,R16
    00C07 9420      COM	R2
    00C08 9430      COM	R3
    00C09 B245      IN	R4,0x15
    00C0A 2455      CLR	R5
    00C0B 2042      AND	R4,R2
    00C0C 2053      AND	R5,R3
    00C0D BA45      OUT	0x15,R4
(0013)   }else if(out==1){
    00C0E C00E      RJMP	0x0C1D
    00C0F 3041      CPI	R20,1
    00C10 E0E0      LDI	R30,0
    00C11 075E      CPC	R21,R30
    00C12 F451      BNE	0x0C1D
(0014)    PORTC|=(1<<port);
    00C13 E001      LDI	R16,1
    00C14 E010      LDI	R17,0
    00C15 0195      MOVW	R18,R10
    00C16 940E 1610 CALL	lsl16
    00C18 B225      IN	R2,0x15
    00C19 2433      CLR	R3
    00C1A 2A20      OR	R2,R16
    00C1B 2A31      OR	R3,R17
    00C1C BA25      OUT	0x15,R2
(0015)   }
    00C1D 940C 15D3 JMP	pop_xgset300C
_read_port:
  port                 --> R10
    00C1F 92AA      ST	-Y,R10
    00C20 92BA      ST	-Y,R11
    00C21 0158      MOVW	R10,R16
(0016) }
(0017) uint read_port(uint port){
(0018)   return PINC&(1<<port);
    00C22 E001      LDI	R16,1
    00C23 E010      LDI	R17,0
    00C24 0195      MOVW	R18,R10
    00C25 940E 1610 CALL	lsl16
    00C27 B223      IN	R2,0x13
    00C28 2433      CLR	R3
    00C29 2220      AND	R2,R16
    00C2A 2231      AND	R3,R17
    00C2B 0181      MOVW	R16,R2
    00C2C 90B9      LD	R11,Y+
    00C2D 90A9      LD	R10,Y+
    00C2E 9508      RET
FILE: E:\ICCDemo\Temp_Control\temp_control\uart.c
(0001) #include <iom128v.h>
(0002) #include "uart.h"
(0003) 
(0004) //常量定义
(0005) #define BAUDRATE1       115200	//波特率
(0006) //#define BAUDRATE2       9600	//波特率
(0007) #define F_CPU		7372800//晶振频率
(0008) 
(0009) //变量定义
(0010) extern unsigned char send_buf[600];
(0011) extern unsigned char receive_buf[600];
(0012) extern unsigned int send_len;
(0013) extern unsigned int receive_len;
(0014) 
(0015) unsigned char uart_timeout_flag1;
(0016) unsigned char uart_timeout_flag2;
(0017) 
(0018) //串口1对应程序
(0019) ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(0020) //USART 初始化
(0021) void init_USART1(void)
(0022) {
(0023)     //USART 115200 8, n,1  PC上位机软件(超级终端等)也要设成同样的设置才能通讯
(0024)     UCSR0C = (1<<USBS0)|(3<<UCSZ00);
_init_USART1:
    00C2F E08E      LDI	R24,0xE
    00C30 9380 0095 STS	0x95,R24
(0025)     
(0026)   //异步，8位数据，无奇偶校验，一个停止位，无倍速   
(0027)     //U2X=0时的公式计算
(0028)     UBRR0L= (F_CPU/BAUDRATE1/16-1)%256;
    00C32 E083      LDI	R24,3
    00C33 B989      OUT	0x09,R24
(0029)     UBRR0H= (F_CPU/BAUDRATE1/16-1)/256;
    00C34 2422      CLR	R2
    00C35 9220 0090 STS	0x90,R2
(0030) 
(0031)     UCSR0A = 0x00;
    00C37 B82B      OUT	0x0B,R2
(0032) 
(0033)     //使能接收中断，使能接收，使能发送
(0034)     UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    00C38 E188      LDI	R24,0x18
    00C39 B98A      OUT	0x0A,R24
    00C3A 9508      RET
(0035)     
(0036) }
(0037) 
(0038) //向串口1写数
(0039) void put_c1(unsigned char c)
(0040) {
(0041) 	while( !(UCSR0A & (1<<UDRE0)) );
_put_c1:
  c                    --> R16
    00C3B 9B5D      SBIS	0x0B,5
    00C3C CFFE      RJMP	_put_c1
(0042) 	UDR0=c;	
    00C3D B90C      OUT	0x0C,R16
    00C3E 9508      RET
(0043) }
(0044) 
(0045) //从串口1读数
(0046) unsigned char USART_Receive1( void )
(0047) {
(0048)    unsigned int j=0;
_USART_Receive1:
  j                    --> R16
    00C3F 2700      CLR	R16
    00C40 2711      CLR	R17
(0049)    uart_timeout_flag1=0; 
    00C41 2422      CLR	R2
    00C42 9220 06F1 STS	uart_timeout_flag1,R2
    00C44 C00B      RJMP	0x0C50
(0050)   //等待接受标志
(0051)   while ( !(UCSR0A & (1<<RXC0)) ){
(0052)     if(j==32000) //判断超时，并设置标志
    00C45 3000      CPI	R16,0
    00C46 E7ED      LDI	R30,0x7D
    00C47 071E      CPC	R17,R30
    00C48 F429      BNE	0x0C4E
(0053)     { uart_timeout_flag1=1;   
    00C49 E081      LDI	R24,1
    00C4A 9380 06F1 STS	uart_timeout_flag1,R24
(0054)     return FAILURE;}
    00C4C E001      LDI	R16,1
    00C4D C005      RJMP	0x0C53
(0055) 	else 
(0056) 		j++;
    00C4E 5F0F      SUBI	R16,0xFF
    00C4F 4F1F      SBCI	R17,0xFF
    00C50 9B5F      SBIS	0x0B,7
    00C51 CFF3      RJMP	0x0C45
(0057)     ;}
(0058)   //读接收数据  
(0059)   return UDR0;
    00C52 B10C      IN	R16,0x0C
    00C53 9508      RET
_receiveStrfromCom:
  k                    --> R20
    00C54 92AA      ST	-Y,R10
    00C55 934A      ST	-Y,R20
(0060) }
(0061) 
(0062) //从串口接收数据串
(0063) unsigned char receiveStrfromCom(void)
(0064) {
    00C56 C03E      RJMP	0x0C95
(0065)   unsigned char k;
(0066) 
(0067)   while(1)
(0068)   {
(0069)     ///以下为从串口接收数据的过程
(0070)     send_buf[0]=USART_Receive1();
    00C57 DFE7      RCALL	_USART_Receive1
    00C58 9300 0483 STS	send_buf,R16
(0071)     //若接收的不是命令头则继续等待
(0072)     if(send_buf[0]!=0x02)continue;
    00C5A 3002      CPI	R16,2
    00C5B F009      BEQ	0x0C5D
    00C5C C038      RJMP	0x0C95
(0073)       
(0074)     for(k=1;k<5;k++)
    00C5D E041      LDI	R20,1
    00C5E C00F      RJMP	0x0C6E
(0075)     {
(0076)         send_buf[k]=USART_Receive1(); 
    00C5F DFDF      RCALL	_USART_Receive1
    00C60 E883      LDI	R24,0x83
    00C61 E094      LDI	R25,4
    00C62 2FE4      MOV	R30,R20
    00C63 27FF      CLR	R31
    00C64 0FE8      ADD	R30,R24
    00C65 1FF9      ADC	R31,R25
    00C66 8300      ST	Z,R16
(0077)         if(uart_timeout_flag1==1)
    00C67 9180 06F1 LDS	R24,uart_timeout_flag1
    00C69 3081      CPI	R24,1
    00C6A F411      BNE	0x0C6D
(0078)         {  
(0079) //          ComSendResponse(send_buf[3],EXE_TIME_OUT,1);
(0080)           return FAILURE;
    00C6B E001      LDI	R16,1
    00C6C C029      RJMP	0x0C96
    00C6D 9543      INC	R20
    00C6E 3045      CPI	R20,5
    00C6F F378      BCS	0x0C5F
(0081)         }  
(0082)     }
(0083)     
(0084)     send_len=send_buf[4];
    00C70 9020 0487 LDS	R2,send_buf+4
    00C72 2433      CLR	R3
    00C73 9230 022A STS	send_len+1,R3
    00C75 9220 0229 STS	send_len,R2
(0085)     
(0086)     for(k=5;k<send_len+6;k++)
    00C77 E045      LDI	R20,5
    00C78 C010      RJMP	0x0C89
(0087)     {
(0088)         send_buf[k]=USART_Receive1(); 
    00C79 DFC5      RCALL	_USART_Receive1
    00C7A 2EA0      MOV	R10,R16
    00C7B E883      LDI	R24,0x83
    00C7C E094      LDI	R25,4
    00C7D 2FE4      MOV	R30,R20
    00C7E 27FF      CLR	R31
    00C7F 0FE8      ADD	R30,R24
    00C80 1FF9      ADC	R31,R25
    00C81 82A0      ST	Z,R10
(0089)         if(uart_timeout_flag1==1)
    00C82 9180 06F1 LDS	R24,uart_timeout_flag1
    00C84 3081      CPI	R24,1
    00C85 F411      BNE	0x0C88
(0090)         {  
(0091) //           ComSendResponse(send_buf[3],EXE_TIME_OUT,1);
(0092)            return FAILURE; 
    00C86 E001      LDI	R16,1
    00C87 C00E      RJMP	0x0C96
    00C88 9543      INC	R20
    00C89 9180 0229 LDS	R24,send_len
    00C8B 9190 022A LDS	R25,send_len+1
    00C8D 9606      ADIW	R24,6
    00C8E 2E24      MOV	R2,R20
    00C8F 2433      CLR	R3
    00C90 1628      CP	R2,R24
    00C91 0639      CPC	R3,R25
    00C92 F330      BCS	0x0C79
(0093)         }  
(0094)     }  
(0095)     return SUCCESS;
    00C93 2700      CLR	R16
    00C94 C001      RJMP	0x0C96
    00C95 CFC1      RJMP	0x0C57
    00C96 9149      LD	R20,Y+
    00C97 90A9      LD	R10,Y+
    00C98 9508      RET
_outStrtoCom:
  i                    --> R10
  length               --> R12
  pData                --> R14
    00C99 940E 15C7 CALL	push_xgset00FC
    00C9B 0169      MOVW	R12,R18
    00C9C 0178      MOVW	R14,R16
(0096) 
(0097)   }  
(0098)   return FAILURE;
(0099) } 
(0100) 
(0101) //向串口输出数据串
(0102) void outStrtoCom(unsigned char *pData,unsigned int length)
(0103) {
(0104) 	unsigned char i;
(0105) 	for(i=0;i<length;i++)
    00C9D 24AA      CLR	R10
    00C9E C007      RJMP	0x0CA6
(0106) 		put_c1(pData[i]);
    00C9F 2DEA      MOV	R30,R10
    00CA0 27FF      CLR	R31
    00CA1 0DEE      ADD	R30,R14
    00CA2 1DFF      ADC	R31,R15
    00CA3 8100      LD	R16,Z
    00CA4 DF96      RCALL	_put_c1
    00CA5 94A3      INC	R10
    00CA6 2C2A      MOV	R2,R10
    00CA7 2433      CLR	R3
    00CA8 142C      CP	R2,R12
    00CA9 043D      CPC	R3,R13
    00CAA F3A0      BCS	0x0C9F
    00CAB 940C 15A8 JMP	pop_xgset00FC
_MAC_CalCrc16:
  i                    --> R10
  j                    --> R22
  value_CRC            --> R20
  ucLen                --> R12
  pCrc16               --> R18
  pInput               --> R16
    00CAD 940E 15FE CALL	push_xgsetF03C
    00CAF 84C8      LDD	R12,Y+8
(0107) }
(0108) /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(0109) 
(0110) /*-----------------------------------------------
(0111) 函数名： 　MAC_CalCrc16
(0112) 功  能：  以字节为单位计算len个数的CRC16校验和，首字节
(0113) 		  为pInput[0].
(0114) 参  数：  pInput			为需要计算CRC的数据的指针
(0115)           pCrc16			为指向存储CRC值的数组
(0116)           ucLen				为需要计算CRC的数据长度
(0117) 返回值：　无　
(0118) 作  者：　lz
(0119) 日  期：  2008-06-18
(0120) ------------------------------------------------*/
(0121) void MAC_CalCrc16(unsigned char  *pInput, unsigned char * pCrc16, unsigned char ucLen)   
(0122) {   
(0123)     unsigned int value_CRC=0xffff;
    00CB0 EF4F      LDI	R20,0xFF
    00CB1 EF5F      LDI	R21,0xFF
(0124)     unsigned char i;
(0125)     unsigned char j;
(0126) 
(0127) 	for( i=0; i<ucLen; i++ )
    00CB2 24AA      CLR	R10
    00CB3 C01B      RJMP	0x0CCF
(0128) 	{	
(0129) 		value_CRC = value_CRC ^((unsigned int)pInput[i]);
    00CB4 2DEA      MOV	R30,R10
    00CB5 27FF      CLR	R31
    00CB6 0FE0      ADD	R30,R16
    00CB7 1FF1      ADC	R31,R17
    00CB8 8020      LD	R2,Z
    00CB9 2433      CLR	R3
    00CBA 2542      EOR	R20,R2
    00CBB 2553      EOR	R21,R3
(0130) 		for (j = 0; j < 8; j++)
    00CBC 2766      CLR	R22
    00CBD C00E      RJMP	0x0CCC
(0131) 		{
(0132) 			if (value_CRC & 0x0001)
    00CBE FF40      SBRS	R20,0
    00CBF C009      RJMP	0x0CC9
(0133) 			{
(0134) 				value_CRC = (value_CRC >> 1) ^ 0x8408;
    00CC0 E088      LDI	R24,0x8
    00CC1 E894      LDI	R25,0x84
    00CC2 011A      MOVW	R2,R20
    00CC3 9436      LSR	R3
    00CC4 9427      ROR	R2
    00CC5 2628      EOR	R2,R24
    00CC6 2639      EOR	R3,R25
    00CC7 01A1      MOVW	R20,R2
(0135) 			}
    00CC8 C002      RJMP	0x0CCB
(0136) 			else
(0137) 			{
(0138) 				value_CRC = (value_CRC >> 1);
    00CC9 9556      LSR	R21
    00CCA 9547      ROR	R20
    00CCB 9563      INC	R22
    00CCC 3068      CPI	R22,0x8
    00CCD F380      BCS	0x0CBE
    00CCE 94A3      INC	R10
    00CCF 14AC      CP	R10,R12
    00CD0 F318      BCS	0x0CB4
(0139) 			}
(0140) 		}
(0141) 	}
(0142) 	
(0143)   	pCrc16[0] = (unsigned char)(value_CRC>>8);
    00CD1 011A      MOVW	R2,R20
    00CD2 2C23      MOV	R2,R3
    00CD3 2433      CLR	R3
    00CD4 01F9      MOVW	R30,R18
    00CD5 8220      ST	Z,R2
(0144) 	pCrc16[1] = (unsigned char)(value_CRC);
    00CD6 8341      STD	Z+1,R20
(0145) 	
(0146) 	return;
    00CD7 940C 1607 JMP	pop_xgsetF03C
_MAC_CheckCrc16:
  CrcChk               --> Y,+1
  ucLen                --> R20
  pInput               --> R10
    00CD9 940E 15CE CALL	push_xgset300C
    00CDB 2F42      MOV	R20,R18
    00CDC 0158      MOVW	R10,R16
    00CDD 9723      SBIW	R28,3
(0147) }
(0148) 
(0149) 
(0150) /*-----------------------------------------------
(0151) 函数名：	MAC_CheckCrc16
(0152) 功  能：  校验一帧长度为ucLen的数据，pInput[ucLen]
(0153)           pInput[ucLen+1]是这帧数据的校验字节。
(0154) 参  数：  pInput      校验帧的首地址
(0155)           ucLen 　　　需校验的数据帧的长度 
(0156) 返回值：　0表示校验通过，1表示校验失败　
(0157) 作  者：　lz
(0158) 日  期：  2008-06-18
(0159) ------------------------------------------------*/
(0160) unsigned char MAC_CheckCrc16(unsigned char * pInput, unsigned char ucLen)
(0161) {
(0162) 	unsigned char CrcChk[2];
(0163) 
(0164) 	MAC_CalCrc16(pInput,CrcChk,ucLen-2);
    00CDE 2F84      MOV	R24,R20
    00CDF 5082      SUBI	R24,2
    00CE0 8388      ST	Y,R24
    00CE1 019E      MOVW	R18,R28
    00CE2 5F2F      SUBI	R18,0xFF
    00CE3 4F3F      SBCI	R19,0xFF
    00CE4 0185      MOVW	R16,R10
    00CE5 DFC7      RCALL	_MAC_CalCrc16
(0165) 
(0166) 	if (CrcChk[0]!=pInput[ucLen-2] || CrcChk[1]!=pInput[ucLen-1])
    00CE6 2FE4      MOV	R30,R20
    00CE7 27FF      CLR	R31
    00CE8 9732      SBIW	R30,2
    00CE9 0DEA      ADD	R30,R10
    00CEA 1DFB      ADC	R31,R11
    00CEB 8020      LD	R2,Z
    00CEC 8039      LDD	R3,Y+1
    00CED 1432      CP	R3,R2
    00CEE F449      BNE	0x0CF8
    00CEF 2FE4      MOV	R30,R20
    00CF0 27FF      CLR	R31
    00CF1 9731      SBIW	R30,1
    00CF2 0DEA      ADD	R30,R10
    00CF3 1DFB      ADC	R31,R11
    00CF4 8020      LD	R2,Z
    00CF5 803A      LDD	R3,Y+2
    00CF6 1432      CP	R3,R2
    00CF7 F011      BEQ	0x0CFA
(0167) 	{
(0168) 		return FAILURE; // crc16 fail!
    00CF8 E001      LDI	R16,1
    00CF9 C001      RJMP	0x0CFB
(0169) 	}
(0170) 	
(0171) 	return SUCCESS; // crc16 ok!
    00CFA 2700      CLR	R16
    00CFB 9623      ADIW	R28,3
    00CFC 940C 15D3 JMP	pop_xgset300C
_ComSendResponse:
  crc_buf              --> Y,+1
  LenData              --> R20
  statusdata           --> R12
  CmdData              --> R10
    00CFE 940E 15F0 CALL	push_xgset303C
    00D00 2EC2      MOV	R12,R18
    00D01 2EA0      MOV	R10,R16
    00D02 9723      SBIW	R28,3
    00D03 8549      LDD	R20,Y+9
(0172) }
(0173) /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(0174) //发送命令响应结果
(0175) void ComSendResponse(unsigned char CmdData,unsigned char statusdata,unsigned char LenData)
(0176) {
(0177)     unsigned char crc_buf[2];
(0178)     
(0179)     receive_buf[5]= statusdata;
    00D04 92C0 0230 STS	receive_buf+5,R12
(0180) 
(0181)     receive_buf[4]=LenData;
    00D06 9340 022F STS	receive_buf+4,R20
(0182) 
(0183)     receive_buf[3]=CmdData;
    00D08 92A0 022E STS	receive_buf+3,R10
(0184)     
(0185)     receive_buf[1]=0x00;receive_buf[2]=0x01;
    00D0A 2422      CLR	R2
    00D0B 9220 022C STS	receive_buf+1,R2
    00D0D E081      LDI	R24,1
    00D0E 9380 022D STS	receive_buf+2,R24
(0186) 
(0187)     receive_buf[0]=0x02;
    00D10 E082      LDI	R24,2
    00D11 9380 022B STS	receive_buf,R24
(0188)     
(0189)     MAC_CalCrc16(receive_buf, crc_buf,LenData+5); 
    00D13 2F84      MOV	R24,R20
    00D14 5F8B      SUBI	R24,0xFB
    00D15 8388      ST	Y,R24
    00D16 019E      MOVW	R18,R28
    00D17 5F2F      SUBI	R18,0xFF
    00D18 4F3F      SBCI	R19,0xFF
    00D19 E20B      LDI	R16,0x2B
    00D1A E012      LDI	R17,2
    00D1B DF91      RCALL	_MAC_CalCrc16
(0190)     
(0191)     receive_buf[LenData+5]=crc_buf[0];
    00D1C E380      LDI	R24,0x30
    00D1D E092      LDI	R25,2
    00D1E 2FE4      MOV	R30,R20
    00D1F 27FF      CLR	R31
    00D20 0FE8      ADD	R30,R24
    00D21 1FF9      ADC	R31,R25
    00D22 8029      LDD	R2,Y+1
    00D23 8220      ST	Z,R2
(0192)     
(0193)     receive_buf[LenData+6]=crc_buf[1];//数据包尾 
    00D24 E381      LDI	R24,0x31
    00D25 E092      LDI	R25,2
    00D26 2FE4      MOV	R30,R20
    00D27 27FF      CLR	R31
    00D28 0FE8      ADD	R30,R24
    00D29 1FF9      ADC	R31,R25
    00D2A 802A      LDD	R2,Y+2
    00D2B 8220      ST	Z,R2
(0194)     
(0195)     init_USART1(); 
    00D2C DF02      RCALL	_init_USART1
(0196)     outStrtoCom(receive_buf,LenData+7); 
    00D2D 2F24      MOV	R18,R20
    00D2E 2733      CLR	R19
    00D2F 5F29      SUBI	R18,0xF9
    00D30 4F3F      SBCI	R19,0xFF
    00D31 E20B      LDI	R16,0x2B
    00D32 E012      LDI	R17,2
    00D33 DF65      RCALL	_outStrtoCom
(0197)    
(0198)     return;
    00D34 9623      ADIW	R28,3
    00D35 940C 15F7 JMP	pop_xgset303C
_EEPROM_write:
  data                 --> R10
  addr_l               --> R14
  addr_h               --> R12
    00D37 940E 15C7 CALL	push_xgset00FC
    00D39 0179      MOVW	R14,R18
    00D3A 0168      MOVW	R12,R16
    00D3B 80AE      LDD	R10,Y+6
    00D3C 80BF      LDD	R11,Y+7
FILE: E:\ICCDemo\Temp_Control\temp_control\eeprom.c
(0001) #include<iom128v.h>
(0002) #include "eeprom.h"
(0003) #include "delay.h"
(0004) void EEPROM_write(uint addr_h,uint addr_l,uint data){
(0005)    SREG&=0x7F;//关中断
    00D3D B78F      IN	R24,0x3F
    00D3E 778F      ANDI	R24,0x7F
    00D3F BF8F      OUT	0x3F,R24
(0006)     while(EECR & (1<<EEWE)){
    00D40 99E1      SBIC	0x1C,1
    00D41 CFFE      RJMP	0x0D40
(0007) 	 			 
(0008) 	 }
(0009) 	 EEARL=addr_l;
    00D42 BAEE      OUT	0x1E,R14
(0010) 	 EEARH=addr_h;
    00D43 BACF      OUT	0x1F,R12
(0011) 	 
(0012) 	 EEDR=data;
    00D44 BAAD      OUT	0x1D,R10
(0013) 	 EECR|=(1<<EEMWE);
    00D45 9AE2      SBI	0x1C,2
(0014) 	 EECR|=(1<<EEWE);
    00D46 9AE1      SBI	0x1C,1
(0015) 	  delay_us(1);
    00D47 E001      LDI	R16,1
    00D48 E010      LDI	R17,0
    00D49 940E 00FD CALL	_delay_us
(0016) 	 SREG|=0x80;//开中断
    00D4B 9478      BSET	7
(0017) 	 return;
    00D4C 940C 15A8 JMP	pop_xgset00FC
_EEPROM_read:
  data                 --> R10
  addr_l               --> R12
  addr_h               --> R10
    00D4E 92AA      ST	-Y,R10
    00D4F 92CA      ST	-Y,R12
    00D50 0169      MOVW	R12,R18
    00D51 0158      MOVW	R10,R16
(0018) }
(0019) uchar EEPROM_read(uint addr_h,uint addr_l){
(0020)    uchar data;
(0021)    SREG&=0x7F;//关中断
    00D52 B78F      IN	R24,0x3F
    00D53 778F      ANDI	R24,0x7F
    00D54 BF8F      OUT	0x3F,R24
(0022)     while(EECR & (1<<EEWE)){ 			 
    00D55 99E1      SBIC	0x1C,1
    00D56 CFFE      RJMP	0x0D55
(0023) 	 }
(0024) 	 EEARL=addr_l;
    00D57 BACE      OUT	0x1E,R12
(0025) 	 EEARH=addr_h;
    00D58 BAAF      OUT	0x1F,R10
(0026) 	 
(0027) 	 EECR|=(1<<EERE);
    00D59 9AE0      SBI	0x1C,0
(0028) 	 delay_us(1);
    00D5A E001      LDI	R16,1
    00D5B E010      LDI	R17,0
    00D5C 940E 00FD CALL	_delay_us
(0029) 	 data=EEDR;
    00D5E B2AD      IN	R10,0x1D
(0030) 	 SREG|=0x80;//开中断
    00D5F 9478      BSET	7
(0031) 	 return data;
    00D60 2D0A      MOV	R16,R10
    00D61 90C9      LD	R12,Y+
    00D62 90A9      LD	R10,Y+
    00D63 9508      RET
_pageTime:
  y                    --> R10
    00D64 92AA      ST	-Y,R10
    00D65 92BA      ST	-Y,R11
    00D66 0158      MOVW	R10,R16
    00D67 9722      SBIW	R28,2
FILE: E:\ICCDemo\Temp_Control\temp_control\pages.c
(0001) #include<iom128v.h>
(0002) #include "main.h"
(0003) #include "lcd.h"
(0004) #include "time.h"
(0005) #include "timertask.h"
(0006) #include "key.h"
(0007) #include "delay.h"
(0008) //************************
(0009) // 所有界面信息在这里,用到全局变量， 
(0010) // unsigned int pageNum;//当前页面，如需跳转改变这个值就行
(0011) // unsigned int pageParam[5];//传递参数。界面间参数暂存
(0012) // unsigned int prePageNum;
(0013) //************************
(0014) 
(0015) //用于显第一行日期信息，其中Page1、Page3 、Page8使用，
(0016) //由定时器触发该函数，进入这三个界面是启动定时器，退出时关闭
(0017) void pageTime(uint y){
(0018)                 //关定时器
(0019)    lcd_write_str(0,y,"时间:");
    00D68 E281      LDI	R24,0x21
    00D69 E092      LDI	R25,2
    00D6A 8399      STD	Y+1,R25
    00D6B 8388      ST	Y,R24
    00D6C 2D2A      MOV	R18,R10
    00D6D 2700      CLR	R16
    00D6E 940E 0516 CALL	_lcd_write_str
(0020)    showTime_page(y);
    00D70 0185      MOVW	R16,R10
    00D71 940E 0237 CALL	_showTime_page
    00D73 9622      ADIW	R28,2
    00D74 90B9      LD	R11,Y+
    00D75 90A9      LD	R10,Y+
    00D76 9508      RET
_page1:
  cur                  --> R20
  keyV                 --> R10
  y                    --> R22
  i                    --> R10
    00D77 940E 15FE CALL	push_xgsetF03C
    00D79 9722      SBIW	R28,2
(0021)                  //开定时器 
(0022) }
(0023) //page1,首页的界面
(0024) void page1(void){
(0025)    uint cur=0;
(0026)    uchar keyV;
(0027)    uint i;//用于循环
(0028)    uint y;//确定是那个半屏幕
(0029)    prePageNum=1;//首页不会再有上一界面，这里设置。虽然违反规则
    00D7A E081      LDI	R24,1
    00D7B E090      LDI	R25,0
    00D7C 9390 06DC STS	prePageNum+1,R25
    00D7E 9380 06DB STS	prePageNum,R24
(0030)    //初始化起始选择
(0031) 	 
(0032)    
(0033)    
(0034)    lcd_write_str(1,1," T1:100");
    00D80 E189      LDI	R24,0x19
    00D81 E092      LDI	R25,2
    00D82 8399      STD	Y+1,R25
    00D83 8388      ST	Y,R24
    00D84 E021      LDI	R18,1
    00D85 E001      LDI	R16,1
    00D86 940E 0516 CALL	_lcd_write_str
(0035)    lcd_write_char(5,1,0xA1);
    00D88 EA81      LDI	R24,0xA1
    00D89 8388      ST	Y,R24
    00D8A E021      LDI	R18,1
    00D8B E005      LDI	R16,5
    00D8C 940E 04F0 CALL	_lcd_write_char
(0036)    lcd_write_char_con(1,0xE6);
    00D8E EE26      LDI	R18,0xE6
    00D8F E001      LDI	R16,1
    00D90 940E 04BE CALL	_lcd_write_char_con
(0037) 	
(0038)    
(0039)     lcd_write_str(6,1," T2:800");
    00D92 E181      LDI	R24,0x11
    00D93 E092      LDI	R25,2
    00D94 8399      STD	Y+1,R25
    00D95 8388      ST	Y,R24
    00D96 E021      LDI	R18,1
    00D97 E006      LDI	R16,6
    00D98 940E 0516 CALL	_lcd_write_str
(0040) 	lcd_write_char(10,1,0xA1);
    00D9A EA81      LDI	R24,0xA1
    00D9B 8388      ST	Y,R24
    00D9C E021      LDI	R18,1
    00D9D E00A      LDI	R16,0xA
    00D9E 940E 04F0 CALL	_lcd_write_char
(0041) 	lcd_write_char_con(1,0xE6);
    00DA0 EE26      LDI	R18,0xE6
    00DA1 E001      LDI	R16,1
    00DA2 940E 04BE CALL	_lcd_write_char_con
(0042) 	
(0043)     lcd_write_str(1,2," T3:停止");
    00DA4 E088      LDI	R24,0x8
    00DA5 E092      LDI	R25,2
    00DA6 8399      STD	Y+1,R25
    00DA7 8388      ST	Y,R24
    00DA8 E022      LDI	R18,2
    00DA9 E001      LDI	R16,1
    00DAA 940E 0516 CALL	_lcd_write_str
(0044) 
(0045)     lcd_write_str(6,2," T4:故障");
    00DAC EF8F      LDI	R24,0xFF
    00DAD E091      LDI	R25,1
    00DAE 8399      STD	Y+1,R25
    00DAF 8388      ST	Y,R24
    00DB0 E022      LDI	R18,2
    00DB1 E006      LDI	R16,6
    00DB2 940E 0516 CALL	_lcd_write_str
(0046) 
(0047) 	
(0048) 	lcd_write_str(1,3,"开始    ");
    00DB4 EF86      LDI	R24,0xF6
    00DB5 E091      LDI	R25,1
    00DB6 8399      STD	Y+1,R25
    00DB7 8388      ST	Y,R24
    00DB8 E023      LDI	R18,3
    00DB9 E001      LDI	R16,1
    00DBA 940E 0516 CALL	_lcd_write_str
(0049)     lcd_write_str_con(3,"停止    ");
    00DBC EE2D      LDI	R18,0xED
    00DBD E031      LDI	R19,1
    00DBE E003      LDI	R16,3
    00DBF 940E 0560 CALL	_lcd_write_str_con
(0050) 	lcd_write_str_con(3,"设置");
    00DC1 EE28      LDI	R18,0xE8
    00DC2 E031      LDI	R19,1
    00DC3 E003      LDI	R16,3
    00DC4 940E 0560 CALL	_lcd_write_str_con
(0051) 	
(0052) 	
(0053) 	
(0054) 	 
(0055) 	cur=0;
    00DC6 2744      CLR	R20
    00DC7 2755      CLR	R21
(0056) 	Set_White(2,1,3);
    00DC8 E083      LDI	R24,3
    00DC9 8388      ST	Y,R24
    00DCA E021      LDI	R18,1
    00DCB E002      LDI	R16,2
    00DCC 940E 077B CALL	_Set_White
    00DCE C30F      RJMP	0x10DE
(0057) 	while(1){
(0058) 	 pageTime(0);
    00DCF 2700      CLR	R16
    00DD0 2711      CLR	R17
    00DD1 DF92      RCALL	_pageTime
(0059) 	for(i=0;i<4;i++){
    00DD2 24AA      CLR	R10
    00DD3 24BB      CLR	R11
    00DD4 C081      RJMP	0x0E56
(0060) 	  if(i==0){
    00DD5 20AA      TST	R10
    00DD6 F449      BNE	0x0DE0
    00DD7 20BB      TST	R11
    00DD8 F439      BNE	0x0DE0
(0061) 	    y=1;
    00DD9 E061      LDI	R22,1
    00DDA E070      LDI	R23,0
(0062) 	    lcd_write_pos(3,1);
    00DDB E021      LDI	R18,1
    00DDC E003      LDI	R16,3
    00DDD 940E 04D2 CALL	_lcd_write_pos
(0063) 	  }else if(i==1){
    00DDF C023      RJMP	0x0E03
    00DE0 01C5      MOVW	R24,R10
    00DE1 3081      CPI	R24,1
    00DE2 E0E0      LDI	R30,0
    00DE3 079E      CPC	R25,R30
    00DE4 F439      BNE	0x0DEC
(0064) 	    y=1;
    00DE5 E061      LDI	R22,1
    00DE6 E070      LDI	R23,0
(0065) 	    lcd_write_pos(8,1);
    00DE7 E021      LDI	R18,1
    00DE8 E008      LDI	R16,0x8
    00DE9 940E 04D2 CALL	_lcd_write_pos
(0066) 	  }else if(i==2){
    00DEB C017      RJMP	0x0E03
    00DEC 01C5      MOVW	R24,R10
    00DED 3082      CPI	R24,2
    00DEE E0E0      LDI	R30,0
    00DEF 079E      CPC	R25,R30
    00DF0 F439      BNE	0x0DF8
(0067) 	    y=2;
    00DF1 E062      LDI	R22,2
    00DF2 E070      LDI	R23,0
(0068) 	    lcd_write_pos(3,2);
    00DF3 E022      LDI	R18,2
    00DF4 E003      LDI	R16,3
    00DF5 940E 04D2 CALL	_lcd_write_pos
(0069) 	  }else if(i==3){
    00DF7 C00B      RJMP	0x0E03
    00DF8 01C5      MOVW	R24,R10
    00DF9 3083      CPI	R24,3
    00DFA E0E0      LDI	R30,0
    00DFB 079E      CPC	R25,R30
    00DFC F431      BNE	0x0E03
(0070) 	    y=2;
    00DFD E062      LDI	R22,2
    00DFE E070      LDI	R23,0
(0071) 	    lcd_write_pos(8,2);
    00DFF E022      LDI	R18,2
    00E00 E008      LDI	R16,0x8
    00E01 940E 04D2 CALL	_lcd_write_pos
(0072) 	  }
(0073) 	   switch(temps[i].flag){
    00E03 E187      LDI	R24,0x17
    00E04 E091      LDI	R25,1
    00E05 01F5      MOVW	R30,R10
    00E06 0FEE      LSL	R30
    00E07 1FFF      ROL	R31
    00E08 0FE8      ADD	R30,R24
    00E09 1FF9      ADC	R31,R25
    00E0A 80C0      LD	R12,Z
    00E0B 80D1      LDD	R13,Z+1
    00E0C 20CC      TST	R12
    00E0D F411      BNE	0x0E10
    00E0E 20DD      TST	R13
    00E0F F0D1      BEQ	0x0E2A
    00E10 01C6      MOVW	R24,R12
    00E11 3081      CPI	R24,1
    00E12 E0E0      LDI	R30,0
    00E13 079E      CPC	R25,R30
    00E14 F0D9      BEQ	0x0E30
    00E15 3082      CPI	R24,2
    00E16 E0E0      LDI	R30,0
    00E17 079E      CPC	R25,R30
    00E18 F0E9      BEQ	0x0E36
    00E19 3083      CPI	R24,3
    00E1A E0E0      LDI	R30,0
    00E1B 079E      CPC	R25,R30
    00E1C F0F9      BEQ	0x0E3C
    00E1D 3084      CPI	R24,4
    00E1E E0E0      LDI	R30,0
    00E1F 079E      CPC	R25,R30
    00E20 F109      BEQ	0x0E42
    00E21 3085      CPI	R24,5
    00E22 E0E0      LDI	R30,0
    00E23 079E      CPC	R25,R30
    00E24 F119      BEQ	0x0E48
    00E25 3086      CPI	R24,6
    00E26 E0E0      LDI	R30,0
    00E27 079E      CPC	R25,R30
    00E28 F129      BEQ	0x0E4E
    00E29 C029      RJMP	0x0E53
(0074) 	     case 0:
(0075) 		   lcd_write_str_con(y,"停止");
    00E2A EE23      LDI	R18,0xE3
    00E2B E031      LDI	R19,1
    00E2C 2F06      MOV	R16,R22
    00E2D 940E 0560 CALL	_lcd_write_str_con
(0076) 		   break;
    00E2F C023      RJMP	0x0E53
(0077) 		 case 1:
(0078) 		   lcd_write_str_con(y,"150");
    00E30 ED2F      LDI	R18,0xDF
    00E31 E031      LDI	R19,1
    00E32 2F06      MOV	R16,R22
    00E33 940E 0560 CALL	_lcd_write_str_con
(0079) 		   break;
    00E35 C01D      RJMP	0x0E53
(0080) 		 case 2:
(0081) 		   lcd_write_str_con(y,"故障");
    00E36 ED2A      LDI	R18,0xDA
    00E37 E031      LDI	R19,1
    00E38 2F06      MOV	R16,R22
    00E39 940E 0560 CALL	_lcd_write_str_con
(0082) 		   break;
    00E3B C017      RJMP	0x0E53
(0083) 		 case 3:
(0084) 		   lcd_write_str_con(y,"暂停");
    00E3C ED25      LDI	R18,0xD5
    00E3D E031      LDI	R19,1
    00E3E 2F06      MOV	R16,R22
    00E3F 940E 0560 CALL	_lcd_write_str_con
(0085) 		   break;
    00E41 C011      RJMP	0x0E53
(0086) 		 case 4:
(0087) 		   lcd_write_str_con(y,"结束");
    00E42 ED20      LDI	R18,0xD0
    00E43 E031      LDI	R19,1
    00E44 2F06      MOV	R16,R22
    00E45 940E 0560 CALL	_lcd_write_str_con
(0088) 		   break;
    00E47 C00B      RJMP	0x0E53
(0089) 		 case 5:
(0090) 		   lcd_write_str_con(y,"等待");
    00E48 EC2B      LDI	R18,0xCB
    00E49 E031      LDI	R19,1
    00E4A 2F06      MOV	R16,R22
    00E4B 940E 0560 CALL	_lcd_write_str_con
(0091) 		   break;
    00E4D C005      RJMP	0x0E53
(0092) 		 case 6:
(0093) 		   lcd_write_str_con(y,"加载");
    00E4E EC26      LDI	R18,0xC6
    00E4F E031      LDI	R19,1
    00E50 2F06      MOV	R16,R22
    00E51 940E 0560 CALL	_lcd_write_str_con
    00E53 01C5      MOVW	R24,R10
    00E54 9601      ADIW	R24,1
    00E55 015C      MOVW	R10,R24
    00E56 01C5      MOVW	R24,R10
    00E57 3084      CPI	R24,4
    00E58 E0E0      LDI	R30,0
    00E59 079E      CPC	R25,R30
    00E5A F408      BCC	0x0E5C
    00E5B CF79      RJMP	0x0DD5
(0094) 		   break;
(0095) 		   break;
(0096) 		 default:
(0097) 		   break;
(0098) 	   }
(0099) 	}
(0100) 	 keyV=KeyScan_once();
    00E5C 940E 0397 CALL	_KeyScan_once
    00E5E 2EA0      MOV	R10,R16
(0101) 	 if(keyV=='a'){
    00E5F 3601      CPI	R16,0x61
    00E60 F009      BEQ	0x0E62
    00E61 C048      RJMP	0x0EAA
(0102) 	      //pageNum=8;//跳转到设置时间的界面
(0103) 		   pageNum=8;
    00E62 E088      LDI	R24,0x8
    00E63 E090      LDI	R25,0
    00E64 9390 06E8 STS	pageNum+1,R25
    00E66 9380 06E7 STS	pageNum,R24
(0104) 	   switch(cur){
    00E68 3040      CPI	R20,0
    00E69 0745      CPC	R20,R21
    00E6A F0A9      BEQ	0x0E80
    00E6B 3041      CPI	R20,1
    00E6C E0E0      LDI	R30,0
    00E6D 075E      CPC	R21,R30
    00E6E F0C1      BEQ	0x0E87
    00E6F 3042      CPI	R20,2
    00E70 E0E0      LDI	R30,0
    00E71 075E      CPC	R21,R30
    00E72 F0D9      BEQ	0x0E8E
    00E73 3043      CPI	R20,3
    00E74 E0E0      LDI	R30,0
    00E75 075E      CPC	R21,R30
    00E76 F0F1      BEQ	0x0E95
    00E77 3045      CPI	R20,5
    00E78 E0E0      LDI	R30,0
    00E79 075E      CPC	R21,R30
    00E7A F109      BEQ	0x0E9C
    00E7B 3046      CPI	R20,6
    00E7C E0E0      LDI	R30,0
    00E7D 075E      CPC	R21,R30
    00E7E F121      BEQ	0x0EA3
    00E7F C25F      RJMP	0x10DF
(0105) 		 case 0: 
(0106) 		    Set_White_off(2,1,3);
    00E80 E083      LDI	R24,3
    00E81 8388      ST	Y,R24
    00E82 E021      LDI	R18,1
    00E83 E002      LDI	R16,2
    00E84 940E 06FF CALL	_Set_White_off
(0107) 		    break;
    00E86 C258      RJMP	0x10DF
(0108) 		 case 1:
(0109) 		   Set_White_off(7,1,8);
    00E87 E088      LDI	R24,0x8
    00E88 8388      ST	Y,R24
    00E89 E021      LDI	R18,1
    00E8A E007      LDI	R16,7
    00E8B 940E 06FF CALL	_Set_White_off
(0110) 		   break;
    00E8D C251      RJMP	0x10DF
(0111) 		 case 2:
(0112) 		  Set_White_off(2,2,3);
    00E8E E083      LDI	R24,3
    00E8F 8388      ST	Y,R24
    00E90 E022      LDI	R18,2
    00E91 E002      LDI	R16,2
    00E92 940E 06FF CALL	_Set_White_off
(0113) 		  break;
    00E94 C24A      RJMP	0x10DF
(0114) 		 case 3:
(0115) 		   Set_White_off(7,2,8);
    00E95 E088      LDI	R24,0x8
    00E96 8388      ST	Y,R24
    00E97 E022      LDI	R18,2
    00E98 E007      LDI	R16,7
    00E99 940E 06FF CALL	_Set_White_off
(0116) 		    break;
    00E9B C243      RJMP	0x10DF
(0117) 		case 5:
(0118) 		    Set_White_off(6,3,7);
    00E9C E087      LDI	R24,7
    00E9D 8388      ST	Y,R24
    00E9E E023      LDI	R18,3
    00E9F E006      LDI	R16,6
    00EA0 940E 06FF CALL	_Set_White_off
(0119) 		    break;
    00EA2 C23C      RJMP	0x10DF
(0120) 		 case 6:
(0121) 		   Set_White_off(10,3,11);
    00EA3 E08B      LDI	R24,0xB
    00EA4 8388      ST	Y,R24
    00EA5 E023      LDI	R18,3
    00EA6 E00A      LDI	R16,0xA
    00EA7 940E 06FF CALL	_Set_White_off
(0122) 		    break;
(0123) 		  default:
(0124) 		   break;
(0125) 		 }
(0126) 	   return ;
    00EA9 C235      RJMP	0x10DF
(0127) 	}else if(keyV=='d'){
    00EAA 2D8A      MOV	R24,R10
    00EAB 3684      CPI	R24,0x64
    00EAC F009      BEQ	0x0EAE
    00EAD C04C      RJMP	0x0EFA
(0128) 	     switch(cur){
    00EAE 3040      CPI	R20,0
    00EAF 0745      CPC	R20,R21
    00EB0 F069      BEQ	0x0EBE
    00EB1 3041      CPI	R20,1
    00EB2 E0E0      LDI	R30,0
    00EB3 075E      CPC	R21,R30
    00EB4 F0C1      BEQ	0x0ECD
    00EB5 3042      CPI	R20,2
    00EB6 E0E0      LDI	R30,0
    00EB7 075E      CPC	R21,R30
    00EB8 F119      BEQ	0x0EDC
    00EB9 3043      CPI	R20,3
    00EBA E0E0      LDI	R30,0
    00EBB 075E      CPC	R21,R30
    00EBC F171      BEQ	0x0EEB
    00EBD C220      RJMP	0x10DE
(0129) 		  case 0:
(0130) 		   Set_White_off(2,1,3);
    00EBE E083      LDI	R24,3
    00EBF 8388      ST	Y,R24
    00EC0 E021      LDI	R18,1
    00EC1 E002      LDI	R16,2
    00EC2 940E 06FF CALL	_Set_White_off
(0131) 		   Set_White(2,2,3);
    00EC4 E083      LDI	R24,3
    00EC5 8388      ST	Y,R24
    00EC6 E022      LDI	R18,2
    00EC7 E002      LDI	R16,2
    00EC8 940E 077B CALL	_Set_White
(0132) 		   cur=2;
    00ECA E042      LDI	R20,2
    00ECB E050      LDI	R21,0
(0133) 		   break;
    00ECC C211      RJMP	0x10DE
(0134) 		  case 1:
(0135) 		   Set_White_off(7,1,8);
    00ECD E088      LDI	R24,0x8
    00ECE 8388      ST	Y,R24
    00ECF E021      LDI	R18,1
    00ED0 E007      LDI	R16,7
    00ED1 940E 06FF CALL	_Set_White_off
(0136) 		   Set_White(7,2,8);
    00ED3 E088      LDI	R24,0x8
    00ED4 8388      ST	Y,R24
    00ED5 E022      LDI	R18,2
    00ED6 E007      LDI	R16,7
    00ED7 940E 077B CALL	_Set_White
(0137) 		   cur=3;
    00ED9 E043      LDI	R20,3
    00EDA E050      LDI	R21,0
(0138) 		   break;
    00EDB C202      RJMP	0x10DE
(0139) 		  case 2:
(0140) 		   Set_White_off(2,2,3);
    00EDC E083      LDI	R24,3
    00EDD 8388      ST	Y,R24
    00EDE E022      LDI	R18,2
    00EDF E002      LDI	R16,2
    00EE0 940E 06FF CALL	_Set_White_off
(0141) 		   Set_White(2,3,3);
    00EE2 E083      LDI	R24,3
    00EE3 8388      ST	Y,R24
    00EE4 E023      LDI	R18,3
    00EE5 E002      LDI	R16,2
    00EE6 940E 077B CALL	_Set_White
(0142) 		   cur=4;
    00EE8 E044      LDI	R20,4
    00EE9 E050      LDI	R21,0
(0143) 		   break;
    00EEA C1F3      RJMP	0x10DE
(0144) 		  case 3:
(0145) 		   Set_White_off(7,2,8);
    00EEB E088      LDI	R24,0x8
    00EEC 8388      ST	Y,R24
    00EED E022      LDI	R18,2
    00EEE E007      LDI	R16,7
    00EEF 940E 06FF CALL	_Set_White_off
(0146) 		   Set_White(6,3,7);
    00EF1 E087      LDI	R24,7
    00EF2 8388      ST	Y,R24
    00EF3 E023      LDI	R18,3
    00EF4 E006      LDI	R16,6
    00EF5 940E 077B CALL	_Set_White
(0147) 		   cur=5;
    00EF7 E045      LDI	R20,5
    00EF8 E050      LDI	R21,0
(0148) 		   break;
(0149) 		  default:
(0150) 		   break;
(0151) 		 }
(0152) 	}else if(keyV=='u'){switch(cur){
    00EF9 C1E4      RJMP	0x10DE
    00EFA 2D8A      MOV	R24,R10
    00EFB 3785      CPI	R24,0x75
    00EFC F009      BEQ	0x0EFE
    00EFD C061      RJMP	0x0F5F
    00EFE 3042      CPI	R20,2
    00EFF E0E0      LDI	R30,0
    00F00 075E      CPC	R21,R30
    00F01 F091      BEQ	0x0F14
    00F02 3043      CPI	R20,3
    00F03 E0E0      LDI	R30,0
    00F04 075E      CPC	R21,R30
    00F05 F0E9      BEQ	0x0F23
    00F06 3044      CPI	R20,4
    00F07 E0E0      LDI	R30,0
    00F08 075E      CPC	R21,R30
    00F09 F141      BEQ	0x0F32
    00F0A 3045      CPI	R20,5
    00F0B E0E0      LDI	R30,0
    00F0C 075E      CPC	R21,R30
    00F0D F199      BEQ	0x0F41
    00F0E 3046      CPI	R20,6
    00F0F E0E0      LDI	R30,0
    00F10 075E      CPC	R21,R30
    00F11 F409      BNE	0x0F13
    00F12 C03D      RJMP	0x0F50
    00F13 C1CA      RJMP	0x10DE
(0153) 		  case 2:
(0154) 		   Set_White_off(2,2,3);
    00F14 E083      LDI	R24,3
    00F15 8388      ST	Y,R24
    00F16 E022      LDI	R18,2
    00F17 E002      LDI	R16,2
    00F18 940E 06FF CALL	_Set_White_off
(0155) 		   Set_White(2,1,3);
    00F1A E083      LDI	R24,3
    00F1B 8388      ST	Y,R24
    00F1C E021      LDI	R18,1
    00F1D E002      LDI	R16,2
    00F1E 940E 077B CALL	_Set_White
(0156) 		   cur=0;
    00F20 2744      CLR	R20
    00F21 2755      CLR	R21
(0157) 		   break;
    00F22 C1BB      RJMP	0x10DE
(0158) 		  case 3:
(0159) 		   Set_White_off(7,2,8);
    00F23 E088      LDI	R24,0x8
    00F24 8388      ST	Y,R24
    00F25 E022      LDI	R18,2
    00F26 E007      LDI	R16,7
    00F27 940E 06FF CALL	_Set_White_off
(0160) 		   Set_White(7,1,8);
    00F29 E088      LDI	R24,0x8
    00F2A 8388      ST	Y,R24
    00F2B E021      LDI	R18,1
    00F2C E007      LDI	R16,7
    00F2D 940E 077B CALL	_Set_White
(0161) 		   cur=1;
    00F2F E041      LDI	R20,1
    00F30 E050      LDI	R21,0
(0162) 		   break;
    00F31 C1AC      RJMP	0x10DE
(0163) 		  case 4:
(0164) 		   Set_White_off(2,3,5);
    00F32 E085      LDI	R24,5
    00F33 8388      ST	Y,R24
    00F34 E023      LDI	R18,3
    00F35 E002      LDI	R16,2
    00F36 940E 06FF CALL	_Set_White_off
(0165) 		   Set_White(2,2,3);
    00F38 E083      LDI	R24,3
    00F39 8388      ST	Y,R24
    00F3A E022      LDI	R18,2
    00F3B E002      LDI	R16,2
    00F3C 940E 077B CALL	_Set_White
(0166) 		   cur=2;
    00F3E E042      LDI	R20,2
    00F3F E050      LDI	R21,0
(0167) 		   break;
    00F40 C19D      RJMP	0x10DE
(0168) 		  case 5:
(0169) 		   Set_White_off(6,3,7);
    00F41 E087      LDI	R24,7
    00F42 8388      ST	Y,R24
    00F43 E023      LDI	R18,3
    00F44 E006      LDI	R16,6
    00F45 940E 06FF CALL	_Set_White_off
(0170) 		   Set_White(7,2,8);
    00F47 E088      LDI	R24,0x8
    00F48 8388      ST	Y,R24
    00F49 E022      LDI	R18,2
    00F4A E007      LDI	R16,7
    00F4B 940E 077B CALL	_Set_White
(0171) 		   cur=3;
    00F4D E043      LDI	R20,3
    00F4E E050      LDI	R21,0
(0172) 		   break;
    00F4F C18E      RJMP	0x10DE
(0173) 		  case 6:
(0174) 		   Set_White_off(10,3,11);
    00F50 E08B      LDI	R24,0xB
    00F51 8388      ST	Y,R24
    00F52 E023      LDI	R18,3
    00F53 E00A      LDI	R16,0xA
    00F54 940E 06FF CALL	_Set_White_off
(0175) 		   Set_White(7,2,8);
    00F56 E088      LDI	R24,0x8
    00F57 8388      ST	Y,R24
    00F58 E022      LDI	R18,2
    00F59 E007      LDI	R16,7
    00F5A 940E 077B CALL	_Set_White
(0176) 		   cur=3;
    00F5C E043      LDI	R20,3
    00F5D E050      LDI	R21,0
(0177) 		   break;
(0178) 		  default:
(0179) 		   break;
(0180) 		 }
(0181) 	}else if(keyV=='l'){switch(cur){
    00F5E C17F      RJMP	0x10DE
    00F5F 2D8A      MOV	R24,R10
    00F60 368C      CPI	R24,0x6C
    00F61 F009      BEQ	0x0F63
    00F62 C04D      RJMP	0x0FB0
    00F63 3041      CPI	R20,1
    00F64 E0E0      LDI	R30,0
    00F65 075E      CPC	R21,R30
    00F66 F069      BEQ	0x0F74
    00F67 3043      CPI	R20,3
    00F68 E0E0      LDI	R30,0
    00F69 075E      CPC	R21,R30
    00F6A F0C1      BEQ	0x0F83
    00F6B 3045      CPI	R20,5
    00F6C E0E0      LDI	R30,0
    00F6D 075E      CPC	R21,R30
    00F6E F119      BEQ	0x0F92
    00F6F 3046      CPI	R20,6
    00F70 E0E0      LDI	R30,0
    00F71 075E      CPC	R21,R30
    00F72 F171      BEQ	0x0FA1
    00F73 C16A      RJMP	0x10DE
(0182) 		  case 1:
(0183) 		   Set_White_off(7,1,8);
    00F74 E088      LDI	R24,0x8
    00F75 8388      ST	Y,R24
    00F76 E021      LDI	R18,1
    00F77 E007      LDI	R16,7
    00F78 940E 06FF CALL	_Set_White_off
(0184) 		   Set_White(2,1,3);
    00F7A E083      LDI	R24,3
    00F7B 8388      ST	Y,R24
    00F7C E021      LDI	R18,1
    00F7D E002      LDI	R16,2
    00F7E 940E 077B CALL	_Set_White
(0185) 		   cur=0;
    00F80 2744      CLR	R20
    00F81 2755      CLR	R21
(0186) 		   break;
    00F82 C15B      RJMP	0x10DE
(0187) 		  case 3:
(0188) 		   Set_White_off(7,2,8);
    00F83 E088      LDI	R24,0x8
    00F84 8388      ST	Y,R24
    00F85 E022      LDI	R18,2
    00F86 E007      LDI	R16,7
    00F87 940E 06FF CALL	_Set_White_off
(0189) 		   Set_White(2,2,3);
    00F89 E083      LDI	R24,3
    00F8A 8388      ST	Y,R24
    00F8B E022      LDI	R18,2
    00F8C E002      LDI	R16,2
    00F8D 940E 077B CALL	_Set_White
(0190) 		   cur=2;
    00F8F E042      LDI	R20,2
    00F90 E050      LDI	R21,0
(0191) 		   break;
    00F91 C14C      RJMP	0x10DE
(0192) 		  case 5:
(0193) 		   Set_White_off(6,3,7);
    00F92 E087      LDI	R24,7
    00F93 8388      ST	Y,R24
    00F94 E023      LDI	R18,3
    00F95 E006      LDI	R16,6
    00F96 940E 06FF CALL	_Set_White_off
(0194) 		   Set_White(2,3,3);
    00F98 E083      LDI	R24,3
    00F99 8388      ST	Y,R24
    00F9A E023      LDI	R18,3
    00F9B E002      LDI	R16,2
    00F9C 940E 077B CALL	_Set_White
(0195) 		   cur=4;
    00F9E E044      LDI	R20,4
    00F9F E050      LDI	R21,0
(0196) 		   break;
    00FA0 C13D      RJMP	0x10DE
(0197) 		  case 6:
(0198) 		   Set_White_off(10,3,11);
    00FA1 E08B      LDI	R24,0xB
    00FA2 8388      ST	Y,R24
    00FA3 E023      LDI	R18,3
    00FA4 E00A      LDI	R16,0xA
    00FA5 940E 06FF CALL	_Set_White_off
(0199) 		   Set_White(6,3,7);
    00FA7 E087      LDI	R24,7
    00FA8 8388      ST	Y,R24
    00FA9 E023      LDI	R18,3
    00FAA E006      LDI	R16,6
    00FAB 940E 077B CALL	_Set_White
(0200) 		   cur=5;
    00FAD E045      LDI	R20,5
    00FAE E050      LDI	R21,0
(0201) 		   break;
(0202) 		  default:
(0203) 		   break;
(0204) 		 }
(0205) 	}else if(keyV=='r'){
    00FAF C12E      RJMP	0x10DE
    00FB0 2D8A      MOV	R24,R10
    00FB1 3782      CPI	R24,0x72
    00FB2 F009      BEQ	0x0FB4
    00FB3 C04C      RJMP	0x1000
(0206) 	switch(cur){
    00FB4 3040      CPI	R20,0
    00FB5 0745      CPC	R20,R21
    00FB6 F069      BEQ	0x0FC4
    00FB7 3042      CPI	R20,2
    00FB8 E0E0      LDI	R30,0
    00FB9 075E      CPC	R21,R30
    00FBA F0C1      BEQ	0x0FD3
    00FBB 3044      CPI	R20,4
    00FBC E0E0      LDI	R30,0
    00FBD 075E      CPC	R21,R30
    00FBE F119      BEQ	0x0FE2
    00FBF 3045      CPI	R20,5
    00FC0 E0E0      LDI	R30,0
    00FC1 075E      CPC	R21,R30
    00FC2 F171      BEQ	0x0FF1
    00FC3 C11A      RJMP	0x10DE
(0207) 		  case 0:
(0208) 		   Set_White_off(2,1,3);
    00FC4 E083      LDI	R24,3
    00FC5 8388      ST	Y,R24
    00FC6 E021      LDI	R18,1
    00FC7 E002      LDI	R16,2
    00FC8 940E 06FF CALL	_Set_White_off
(0209) 		   Set_White(7,1,8);
    00FCA E088      LDI	R24,0x8
    00FCB 8388      ST	Y,R24
    00FCC E021      LDI	R18,1
    00FCD E007      LDI	R16,7
    00FCE 940E 077B CALL	_Set_White
(0210) 		   cur=1;
    00FD0 E041      LDI	R20,1
    00FD1 E050      LDI	R21,0
(0211) 		   break;
    00FD2 C10B      RJMP	0x10DE
(0212) 		  case 2:
(0213) 		   Set_White_off(2,2,3);
    00FD3 E083      LDI	R24,3
    00FD4 8388      ST	Y,R24
    00FD5 E022      LDI	R18,2
    00FD6 E002      LDI	R16,2
    00FD7 940E 06FF CALL	_Set_White_off
(0214) 		   Set_White(7,2,8);
    00FD9 E088      LDI	R24,0x8
    00FDA 8388      ST	Y,R24
    00FDB E022      LDI	R18,2
    00FDC E007      LDI	R16,7
    00FDD 940E 077B CALL	_Set_White
(0215) 		   cur=3;
    00FDF E043      LDI	R20,3
    00FE0 E050      LDI	R21,0
(0216) 		   break;
    00FE1 C0FC      RJMP	0x10DE
(0217) 		  case 4:
(0218) 		   Set_White_off(2,3,3);
    00FE2 E083      LDI	R24,3
    00FE3 8388      ST	Y,R24
    00FE4 E023      LDI	R18,3
    00FE5 E002      LDI	R16,2
    00FE6 940E 06FF CALL	_Set_White_off
(0219) 		   Set_White(6,3,7);
    00FE8 E087      LDI	R24,7
    00FE9 8388      ST	Y,R24
    00FEA E023      LDI	R18,3
    00FEB E006      LDI	R16,6
    00FEC 940E 077B CALL	_Set_White
(0220) 		   cur=5;
    00FEE E045      LDI	R20,5
    00FEF E050      LDI	R21,0
(0221) 		   break;
    00FF0 C0ED      RJMP	0x10DE
(0222) 		  case 5:
(0223) 		   Set_White_off(6,3,7);
    00FF1 E087      LDI	R24,7
    00FF2 8388      ST	Y,R24
    00FF3 E023      LDI	R18,3
    00FF4 E006      LDI	R16,6
    00FF5 940E 06FF CALL	_Set_White_off
(0224) 		   Set_White(10,3,11);
    00FF7 E08B      LDI	R24,0xB
    00FF8 8388      ST	Y,R24
    00FF9 E023      LDI	R18,3
    00FFA E00A      LDI	R16,0xA
    00FFB 940E 077B CALL	_Set_White
(0225) 		   cur=6;
    00FFD E046      LDI	R20,6
    00FFE E050      LDI	R21,0
(0226) 		   break;
(0227) 		  default:
(0228) 		   break;
(0229) 		 }
(0230) 	}else if(keyV=='s'){
    00FFF C0DE      RJMP	0x10DE
    01000 2D8A      MOV	R24,R10
    01001 3783      CPI	R24,0x73
    01002 F009      BEQ	0x1004
    01003 C048      RJMP	0x104C
(0231) 	   pageNum=5;
    01004 E085      LDI	R24,5
    01005 E090      LDI	R25,0
    01006 9390 06E8 STS	pageNum+1,R25
    01008 9380 06E7 STS	pageNum,R24
(0232) 	   switch(cur){
    0100A 3040      CPI	R20,0
    0100B 0745      CPC	R20,R21
    0100C F0A9      BEQ	0x1022
    0100D 3041      CPI	R20,1
    0100E E0E0      LDI	R30,0
    0100F 075E      CPC	R21,R30
    01010 F0C1      BEQ	0x1029
    01011 3042      CPI	R20,2
    01012 E0E0      LDI	R30,0
    01013 075E      CPC	R21,R30
    01014 F0D9      BEQ	0x1030
    01015 3043      CPI	R20,3
    01016 E0E0      LDI	R30,0
    01017 075E      CPC	R21,R30
    01018 F0F1      BEQ	0x1037
    01019 3045      CPI	R20,5
    0101A E0E0      LDI	R30,0
    0101B 075E      CPC	R21,R30
    0101C F109      BEQ	0x103E
    0101D 3046      CPI	R20,6
    0101E E0E0      LDI	R30,0
    0101F 075E      CPC	R21,R30
    01020 F121      BEQ	0x1045
    01021 C0BD      RJMP	0x10DF
(0233) 		 case 0: 
(0234) 		    Set_White_off(2,1,3);
    01022 E083      LDI	R24,3
    01023 8388      ST	Y,R24
    01024 E021      LDI	R18,1
    01025 E002      LDI	R16,2
    01026 940E 06FF CALL	_Set_White_off
(0235) 		    break;
    01028 C0B6      RJMP	0x10DF
(0236) 		 case 1:
(0237) 		   Set_White_off(7,1,8);
    01029 E088      LDI	R24,0x8
    0102A 8388      ST	Y,R24
    0102B E021      LDI	R18,1
    0102C E007      LDI	R16,7
    0102D 940E 06FF CALL	_Set_White_off
(0238) 		   break;
    0102F C0AF      RJMP	0x10DF
(0239) 		 case 2:
(0240) 		  Set_White_off(2,2,3);
    01030 E083      LDI	R24,3
    01031 8388      ST	Y,R24
    01032 E022      LDI	R18,2
    01033 E002      LDI	R16,2
    01034 940E 06FF CALL	_Set_White_off
(0241) 		  break;
    01036 C0A8      RJMP	0x10DF
(0242) 		 case 3:
(0243) 		   Set_White_off(7,2,8);
    01037 E088      LDI	R24,0x8
    01038 8388      ST	Y,R24
    01039 E022      LDI	R18,2
    0103A E007      LDI	R16,7
    0103B 940E 06FF CALL	_Set_White_off
(0244) 		    break;
    0103D C0A1      RJMP	0x10DF
(0245) 		case 5:
(0246) 		    Set_White_off(6,3,7);
    0103E E087      LDI	R24,7
    0103F 8388      ST	Y,R24
    01040 E023      LDI	R18,3
    01041 E006      LDI	R16,6
    01042 940E 06FF CALL	_Set_White_off
(0247) 		    break;
    01044 C09A      RJMP	0x10DF
(0248) 		 case 6:
(0249) 		   Set_White_off(10,3,11);
    01045 E08B      LDI	R24,0xB
    01046 8388      ST	Y,R24
    01047 E023      LDI	R18,3
    01048 E00A      LDI	R16,0xA
    01049 940E 06FF CALL	_Set_White_off
(0250) 		    break;
(0251) 		  default:
(0252) 		   break;
(0253) 		 }
(0254) 	   return ;
    0104B C093      RJMP	0x10DF
(0255) 	}else if(keyV=='t'){
    0104C 2D8A      MOV	R24,R10
    0104D 3784      CPI	R24,0x74
    0104E F009      BEQ	0x1050
    0104F C08E      RJMP	0x10DE
(0256) 	   switch(cur){
    01050 3040      CPI	R20,0
    01051 0745      CPC	R20,R21
    01052 F0F1      BEQ	0x1071
    01053 3041      CPI	R20,1
    01054 E0E0      LDI	R30,0
    01055 075E      CPC	R21,R30
    01056 F191      BEQ	0x1089
    01057 3042      CPI	R20,2
    01058 E0E0      LDI	R30,0
    01059 075E      CPC	R21,R30
    0105A F409      BNE	0x105C
    0105B C043      RJMP	0x109F
    0105C 3043      CPI	R20,3
    0105D E0E0      LDI	R30,0
    0105E 075E      CPC	R21,R30
    0105F F409      BNE	0x1061
    01060 C055      RJMP	0x10B6
    01061 3044      CPI	R20,4
    01062 E0E0      LDI	R30,0
    01063 075E      CPC	R21,R30
    01064 F409      BNE	0x1066
    01065 C078      RJMP	0x10DE
    01066 3045      CPI	R20,5
    01067 E0E0      LDI	R30,0
    01068 075E      CPC	R21,R30
    01069 F409      BNE	0x106B
    0106A C073      RJMP	0x10DE
    0106B 3046      CPI	R20,6
    0106C E0E0      LDI	R30,0
    0106D 075E      CPC	R21,R30
    0106E F409      BNE	0x1070
    0106F C05C      RJMP	0x10CC
    01070 C06D      RJMP	0x10DE
(0257) 		 case 0: 
(0258) 		    Set_White_off(2,1,3);
    01071 E083      LDI	R24,3
    01072 8388      ST	Y,R24
    01073 E021      LDI	R18,1
    01074 E002      LDI	R16,2
    01075 940E 06FF CALL	_Set_White_off
(0259) 		    prePageNum=1;
    01077 E081      LDI	R24,1
    01078 E090      LDI	R25,0
    01079 9390 06DC STS	prePageNum+1,R25
    0107B 9380 06DB STS	prePageNum,R24
(0260) 		    pageParam[0]=0;//传递使用第一个，对应不同的温度
    0107D 2422      CLR	R2
    0107E 2433      CLR	R3
    0107F 9230 06DE STS	pageParam+1,R3
    01081 9220 06DD STS	pageParam,R2
(0261) 		    pageNum=3;
    01083 E083      LDI	R24,3
    01084 9390 06E8 STS	pageNum+1,R25
    01086 9380 06E7 STS	pageNum,R24
(0262) 		    return;
    01088 C056      RJMP	0x10DF
(0263) 		 case 1:
(0264) 		   Set_White_off(7,1,8);
    01089 E088      LDI	R24,0x8
    0108A 8388      ST	Y,R24
    0108B E021      LDI	R18,1
    0108C E007      LDI	R16,7
    0108D 940E 06FF CALL	_Set_White_off
(0265) 		    prePageNum=1;
    0108F E081      LDI	R24,1
    01090 E090      LDI	R25,0
    01091 9390 06DC STS	prePageNum+1,R25
    01093 9380 06DB STS	prePageNum,R24
(0266) 		   pageParam[0]=1;//传递使用第一个，对应不同的温度
    01095 9390 06DE STS	pageParam+1,R25
    01097 9380 06DD STS	pageParam,R24
(0267) 		    pageNum=3;
    01099 E083      LDI	R24,3
    0109A 9390 06E8 STS	pageNum+1,R25
    0109C 9380 06E7 STS	pageNum,R24
(0268) 		    return;
    0109E C040      RJMP	0x10DF
(0269) 		 case 2:
(0270) 		  Set_White_off(2,2,3);
    0109F E083      LDI	R24,3
    010A0 8388      ST	Y,R24
    010A1 E022      LDI	R18,2
    010A2 E002      LDI	R16,2
    010A3 940E 06FF CALL	_Set_White_off
(0271) 		    prePageNum=1;
    010A5 E081      LDI	R24,1
    010A6 E090      LDI	R25,0
    010A7 9390 06DC STS	prePageNum+1,R25
    010A9 9380 06DB STS	prePageNum,R24
(0272) 		    pageParam[0]=2;//传递使用第一个，对应不同的温度
    010AB E082      LDI	R24,2
    010AC 9390 06DE STS	pageParam+1,R25
    010AE 9380 06DD STS	pageParam,R24
(0273) 		   pageNum=3;
    010B0 E083      LDI	R24,3
    010B1 9390 06E8 STS	pageNum+1,R25
    010B3 9380 06E7 STS	pageNum,R24
(0274) 		   return;
    010B5 C029      RJMP	0x10DF
(0275) 		 case 3:
(0276) 		   Set_White_off(7,2,8);
    010B6 E088      LDI	R24,0x8
    010B7 8388      ST	Y,R24
    010B8 E022      LDI	R18,2
    010B9 E007      LDI	R16,7
    010BA 940E 06FF CALL	_Set_White_off
(0277) 		     prePageNum=1;
    010BC E081      LDI	R24,1
    010BD E090      LDI	R25,0
    010BE 9390 06DC STS	prePageNum+1,R25
    010C0 9380 06DB STS	prePageNum,R24
(0278) 		    pageParam[0]=3;//传递使用第一个，对应不同的温度
    010C2 E083      LDI	R24,3
    010C3 9390 06DE STS	pageParam+1,R25
    010C5 9380 06DD STS	pageParam,R24
(0279) 		    pageNum=3;
    010C7 9390 06E8 STS	pageNum+1,R25
    010C9 9380 06E7 STS	pageNum,R24
(0280) 		    return;
    010CB C013      RJMP	0x10DF
(0281) 		 case 4:
(0282) 		    //调用函数全部开始，参数正确的
(0283) 		   break;
(0284) 		 case 5:
(0285) 		    //全部停止
(0286) 		   break;
(0287) 		 case 6:
(0288) 		   Set_White_off(10,3,11);
    010CC E08B      LDI	R24,0xB
    010CD 8388      ST	Y,R24
    010CE E023      LDI	R18,3
    010CF E00A      LDI	R16,0xA
    010D0 940E 06FF CALL	_Set_White_off
(0289) 		    prePageNum=1;
    010D2 E081      LDI	R24,1
    010D3 E090      LDI	R25,0
    010D4 9390 06DC STS	prePageNum+1,R25
    010D6 9380 06DB STS	prePageNum,R24
(0290) 		   pageNum=5;
    010D8 E085      LDI	R24,5
    010D9 9390 06E8 STS	pageNum+1,R25
    010DB 9380 06E7 STS	pageNum,R24
(0291) 		    return;
    010DD C001      RJMP	0x10DF
    010DE CCF0      RJMP	0x0DCF
    010DF 9622      ADIW	R28,2
    010E0 940C 1607 JMP	pop_xgsetF03C
_page2:
  cur                  --> R20
  keyV                 --> R10
    010E2 940E 15E2 CALL	push_xgsetF00C
    010E4 9722      SBIW	R28,2
(0292) 		  default:
(0293) 		   break;
(0294) 		 }
(0295) 	
(0296) 	}
(0297)   }
(0298)    return;
(0299) }
(0300)  void page2(void){
(0301)    uint cur=0;
    010E5 2744      CLR	R20
    010E6 2755      CLR	R21
(0302)    uchar keyV;
(0303)    //初始画面，会有读取EEPROM的判断默认操作，本次只是画界面
(0304)    lcd_write_str(2,0,"是否恢复上次工作");
    010E7 EB85      LDI	R24,0xB5
    010E8 E091      LDI	R25,1
    010E9 8399      STD	Y+1,R25
    010EA 8388      ST	Y,R24
    010EB 2722      CLR	R18
    010EC E002      LDI	R16,2
    010ED 940E 0516 CALL	_lcd_write_str
(0305)    lcd_write_str(2,2,"恢复");
    010EF EB80      LDI	R24,0xB0
    010F0 E091      LDI	R25,1
    010F1 8399      STD	Y+1,R25
    010F2 8388      ST	Y,R24
    010F3 E022      LDI	R18,2
    010F4 E002      LDI	R16,2
    010F5 940E 0516 CALL	_lcd_write_str
(0306)    lcd_write_str(8,2,"取消");
    010F7 EA8B      LDI	R24,0xAB
    010F8 E091      LDI	R25,1
    010F9 8399      STD	Y+1,R25
    010FA 8388      ST	Y,R24
    010FB E022      LDI	R18,2
    010FC E008      LDI	R16,0x8
    010FD 940E 0516 CALL	_lcd_write_str
(0307)    Set_White(3,2,4);
    010FF E084      LDI	R24,4
    01100 8388      ST	Y,R24
    01101 E022      LDI	R18,2
    01102 E003      LDI	R16,3
    01103 940E 077B CALL	_Set_White
    01105 C04F      RJMP	0x1155
(0308)     while(1){
(0309)       keyV=KeyScan_once();
    01106 940E 0397 CALL	_KeyScan_once
    01108 2EA0      MOV	R10,R16
(0310) 	  switch(keyV){
    01109 2D6A      MOV	R22,R10
    0110A 2777      CLR	R23
    0110B 366C      CPI	R22,0x6C
    0110C E0E0      LDI	R30,0
    0110D 077E      CPC	R23,R30
    0110E F071      BEQ	0x111D
    0110F 366C      CPI	R22,0x6C
    01110 E0E0      LDI	R30,0
    01111 077E      CPC	R23,R30
    01112 F40C      BGE	0x1114
    01113 C041      RJMP	0x1155
    01114 3762      CPI	R22,0x72
    01115 E0E0      LDI	R30,0
    01116 077E      CPC	R23,R30
    01117 F0C1      BEQ	0x1130
    01118 3764      CPI	R22,0x74
    01119 E0E0      LDI	R30,0
    0111A 077E      CPC	R23,R30
    0111B F131      BEQ	0x1142
    0111C C038      RJMP	0x1155
(0311) 	    case 'l':
(0312) 		   if(cur==1){
    0111D 3041      CPI	R20,1
    0111E E0E0      LDI	R30,0
    0111F 075E      CPC	R21,R30
    01120 F5A1      BNE	0x1155
(0313) 		      Set_White_off(9,2,10);
    01121 E08A      LDI	R24,0xA
    01122 8388      ST	Y,R24
    01123 E022      LDI	R18,2
    01124 E009      LDI	R16,0x9
    01125 940E 06FF CALL	_Set_White_off
(0314) 		      Set_White(3,2,4);
    01127 E084      LDI	R24,4
    01128 8388      ST	Y,R24
    01129 E022      LDI	R18,2
    0112A E003      LDI	R16,3
    0112B 940E 077B CALL	_Set_White
(0315) 			  cur=1;
    0112D E041      LDI	R20,1
    0112E E050      LDI	R21,0
(0316) 		   }
(0317) 		   break;
    0112F C025      RJMP	0x1155
(0318) 		case 'r':
(0319) 		   if(cur==0){
    01130 3040      CPI	R20,0
    01131 0745      CPC	R20,R21
    01132 F511      BNE	0x1155
(0320) 		      Set_White_off(3,2,4);
    01133 E084      LDI	R24,4
    01134 8388      ST	Y,R24
    01135 E022      LDI	R18,2
    01136 E003      LDI	R16,3
    01137 940E 06FF CALL	_Set_White_off
(0321) 		      Set_White(9,2,10);
    01139 E08A      LDI	R24,0xA
    0113A 8388      ST	Y,R24
    0113B E022      LDI	R18,2
    0113C E009      LDI	R16,0x9
    0113D 940E 077B CALL	_Set_White
(0322) 			  cur=0;
    0113F 2744      CLR	R20
    01140 2755      CLR	R21
(0323) 		   }
(0324) 		  break;
    01141 C013      RJMP	0x1155
(0325) 		case 't':
(0326) 		  //执行相关操作
(0327) 		   Set_White_off(9,2,10);
    01142 E08A      LDI	R24,0xA
    01143 8388      ST	Y,R24
    01144 E022      LDI	R18,2
    01145 E009      LDI	R16,0x9
    01146 940E 06FF CALL	_Set_White_off
(0328) 		    Set_White_off(3,2,4);
    01148 E084      LDI	R24,4
    01149 8388      ST	Y,R24
    0114A E022      LDI	R18,2
    0114B E003      LDI	R16,3
    0114C 940E 06FF CALL	_Set_White_off
(0329) 		  pageNum=1;
    0114E E081      LDI	R24,1
    0114F E090      LDI	R25,0
    01150 9390 06E8 STS	pageNum+1,R25
    01152 9380 06E7 STS	pageNum,R24
(0330) 		  return;
    01154 C001      RJMP	0x1156
    01155 CFB0      RJMP	0x1106
    01156 9622      ADIW	R28,2
    01157 940C 15E9 JMP	pop_xgsetF00C
_page3:
  cur                  --> R10
  keyV                 --> R20
    01159 940E 15CE CALL	push_xgset300C
    0115B 9722      SBIW	R28,2
(0331) 	  }
(0332) 	}
(0333)  }
(0334)  void page3(void){
(0335)   uint cur=0;
    0115C 24AA      CLR	R10
    0115D 24BB      CLR	R11
(0336)    uchar keyV;
(0337)    lcd_write_str(2,0,"单个温控界面");
    0115E E98E      LDI	R24,0x9E
    0115F E091      LDI	R25,1
    01160 8399      STD	Y+1,R25
    01161 8388      ST	Y,R24
    01162 2722      CLR	R18
    01163 E002      LDI	R16,2
    01164 940E 0516 CALL	_lcd_write_str
    01166 C00C      RJMP	0x1173
(0338)    //Set_White(9,2,10);
(0339)     while(1){
(0340)       keyV=KeyScan_once();
    01167 940E 0397 CALL	_KeyScan_once
    01169 2F40      MOV	R20,R16
(0341) 	  if(keyV=='e'){
    0116A 3605      CPI	R16,0x65
    0116B F439      BNE	0x1173
(0342) 		    pageNum=1;
    0116C E081      LDI	R24,1
    0116D E090      LDI	R25,0
    0116E 9390 06E8 STS	pageNum+1,R25
    01170 9380 06E7 STS	pageNum,R24
(0343) 		    return;
    01172 C001      RJMP	0x1174
    01173 CFF3      RJMP	0x1167
    01174 9622      ADIW	R28,2
    01175 940C 15D3 JMP	pop_xgset300C
_page4:
  cur                  --> R10
  keyV                 --> R20
    01177 940E 15CE CALL	push_xgset300C
    01179 9722      SBIW	R28,2
(0344) 	  }
(0345) 	}
(0346)  }
(0347)   void page4(void){
(0348)     uint cur=0;
    0117A 24AA      CLR	R10
    0117B 24BB      CLR	R11
(0349)    uchar keyV;
(0350)    lcd_write_str(2,0,"单个温控设置界面");
    0117C E88D      LDI	R24,0x8D
    0117D E091      LDI	R25,1
    0117E 8399      STD	Y+1,R25
    0117F 8388      ST	Y,R24
    01180 2722      CLR	R18
    01181 E002      LDI	R16,2
    01182 940E 0516 CALL	_lcd_write_str
    01184 C00C      RJMP	0x1191
(0351)    //Set_White(9,2,10);
(0352)     while(1){
(0353)       keyV=KeyScan_once();
    01185 940E 0397 CALL	_KeyScan_once
    01187 2F40      MOV	R20,R16
(0354) 	  if(keyV=='e'){
    01188 3605      CPI	R16,0x65
    01189 F439      BNE	0x1191
(0355) 		    pageNum=3;
    0118A E083      LDI	R24,3
    0118B E090      LDI	R25,0
    0118C 9390 06E8 STS	pageNum+1,R25
    0118E 9380 06E7 STS	pageNum,R24
(0356) 		    return;
    01190 C001      RJMP	0x1192
    01191 CFF3      RJMP	0x1185
    01192 9622      ADIW	R28,2
    01193 940C 15D3 JMP	pop_xgset300C
_page5:
  cur                  --> R20
  keyV                 --> R22
    01195 940E 15D8 CALL	push_xgsetF000
    01197 9722      SBIW	R28,2
(0357) 	  }
(0358) 	}
(0359)  }
(0360)  void page5(void){
(0361)   uint cur=0;
(0362)    uchar keyV;
(0363)    lcd_write_str(4,0,"断电自动重置");
    01198 E880      LDI	R24,0x80
    01199 E091      LDI	R25,1
    0119A 8399      STD	Y+1,R25
    0119B 8388      ST	Y,R24
    0119C 2722      CLR	R18
    0119D E004      LDI	R16,4
    0119E 940E 0516 CALL	_lcd_write_str
(0364)    lcd_write_str(4,1,"设置时间");
    011A0 E787      LDI	R24,0x77
    011A1 E091      LDI	R25,1
    011A2 8399      STD	Y+1,R25
    011A3 8388      ST	Y,R24
    011A4 E021      LDI	R18,1
    011A5 E004      LDI	R16,4
    011A6 940E 0516 CALL	_lcd_write_str
(0365)    lcd_write_str(4,2,"重置系统");
    011A8 E68E      LDI	R24,0x6E
    011A9 E091      LDI	R25,1
    011AA 8399      STD	Y+1,R25
    011AB 8388      ST	Y,R24
    011AC E022      LDI	R18,2
    011AD E004      LDI	R16,4
    011AE 940E 0516 CALL	_lcd_write_str
(0366)    lcd_write_char(3,0,0xA1);
    011B0 EA81      LDI	R24,0xA1
    011B1 8388      ST	Y,R24
    011B2 2722      CLR	R18
    011B3 E003      LDI	R16,3
    011B4 940E 04F0 CALL	_lcd_write_char
(0367)    lcd_write_char_con(0,0xC1);
    011B6 EC21      LDI	R18,0xC1
    011B7 2700      CLR	R16
    011B8 940E 04BE CALL	_lcd_write_char_con
(0368)    
(0369)    /* lcd_write_char(1,0,0xA1);
(0370)    lcd_write_char_con(0,0xCC);*/
(0371)    cur=0;
    011BA 2744      CLR	R20
    011BB 2755      CLR	R21
(0372)    Set_White(5,0,10);
    011BC E08A      LDI	R24,0xA
    011BD 8388      ST	Y,R24
    011BE 2722      CLR	R18
    011BF E005      LDI	R16,5
    011C0 940E 077B CALL	_Set_White
    011C2 C0A4      RJMP	0x1267
(0373)    while(1){
(0374)       keyV=KeyScan_once();
    011C3 940E 0397 CALL	_KeyScan_once
    011C5 2F60      MOV	R22,R16
(0375) 	  if(keyV=='u'){
    011C6 3705      CPI	R16,0x75
    011C7 F539      BNE	0x11EF
(0376) 	    switch(cur){
    011C8 3041      CPI	R20,1
    011C9 E0E0      LDI	R30,0
    011CA 075E      CPC	R21,R30
    011CB F029      BEQ	0x11D1
    011CC 3042      CPI	R20,2
    011CD E0E0      LDI	R30,0
    011CE 075E      CPC	R21,R30
    011CF F081      BEQ	0x11E0
    011D0 C096      RJMP	0x1267
(0377) 		  case 1:
(0378) 		   Set_White_off(5,1,8);
    011D1 E088      LDI	R24,0x8
    011D2 8388      ST	Y,R24
    011D3 E021      LDI	R18,1
    011D4 E005      LDI	R16,5
    011D5 940E 06FF CALL	_Set_White_off
(0379) 		   Set_White(5,0,10);
    011D7 E08A      LDI	R24,0xA
    011D8 8388      ST	Y,R24
    011D9 2722      CLR	R18
    011DA E005      LDI	R16,5
    011DB 940E 077B CALL	_Set_White
(0380) 		   cur=0;
    011DD 2744      CLR	R20
    011DE 2755      CLR	R21
(0381) 		   break;
    011DF C087      RJMP	0x1267
(0382) 		  case 2: 
(0383) 		   Set_White_off(5,2,8);
    011E0 E088      LDI	R24,0x8
    011E1 8388      ST	Y,R24
    011E2 E022      LDI	R18,2
    011E3 E005      LDI	R16,5
    011E4 940E 06FF CALL	_Set_White_off
(0384) 		   Set_White(5,1,8);
    011E6 E088      LDI	R24,0x8
    011E7 8388      ST	Y,R24
    011E8 E021      LDI	R18,1
    011E9 E005      LDI	R16,5
    011EA 940E 077B CALL	_Set_White
(0385) 		   cur=1;
    011EC E041      LDI	R20,1
    011ED E050      LDI	R21,0
(0386) 		   break;
(0387) 		}
(0388) 	  }else if(keyV=='d'){
    011EE C078      RJMP	0x1267
    011EF 3664      CPI	R22,0x64
    011F0 F531      BNE	0x1217
(0389) 	      switch(cur){
    011F1 3040      CPI	R20,0
    011F2 0745      CPC	R20,R21
    011F3 F029      BEQ	0x11F9
    011F4 3041      CPI	R20,1
    011F5 E0E0      LDI	R30,0
    011F6 075E      CPC	R21,R30
    011F7 F081      BEQ	0x1208
    011F8 C06E      RJMP	0x1267
(0390) 		  case 0:
(0391) 		   Set_White_off(5,0,10);
    011F9 E08A      LDI	R24,0xA
    011FA 8388      ST	Y,R24
    011FB 2722      CLR	R18
    011FC E005      LDI	R16,5
    011FD 940E 06FF CALL	_Set_White_off
(0392) 		   Set_White(5,1,8);
    011FF E088      LDI	R24,0x8
    01200 8388      ST	Y,R24
    01201 E021      LDI	R18,1
    01202 E005      LDI	R16,5
    01203 940E 077B CALL	_Set_White
(0393) 		   cur=1;
    01205 E041      LDI	R20,1
    01206 E050      LDI	R21,0
(0394) 		   break;
    01207 C05F      RJMP	0x1267
(0395) 		  case 1: 
(0396) 		   Set_White_off(5,1,8);
    01208 E088      LDI	R24,0x8
    01209 8388      ST	Y,R24
    0120A E021      LDI	R18,1
    0120B E005      LDI	R16,5
    0120C 940E 06FF CALL	_Set_White_off
(0397) 		   Set_White(5,2,8);
    0120E E088      LDI	R24,0x8
    0120F 8388      ST	Y,R24
    01210 E022      LDI	R18,2
    01211 E005      LDI	R16,5
    01212 940E 077B CALL	_Set_White
(0398) 		   cur=2;
    01214 E042      LDI	R20,2
    01215 E050      LDI	R21,0
(0399) 		   break;
(0400) 		}
(0401) 	  }else if(keyV=='e'){
    01216 C050      RJMP	0x1267
    01217 3665      CPI	R22,0x65
    01218 F539      BNE	0x1240
(0402) 	     switch(cur){
    01219 3040      CPI	R20,0
    0121A 0745      CPC	R20,R21
    0121B F049      BEQ	0x1225
    0121C 3041      CPI	R20,1
    0121D E0E0      LDI	R30,0
    0121E 075E      CPC	R21,R30
    0121F F061      BEQ	0x122C
    01220 3042      CPI	R20,2
    01221 E0E0      LDI	R30,0
    01222 075E      CPC	R21,R30
    01223 F079      BEQ	0x1233
    01224 C014      RJMP	0x1239
(0403) 		 case 0: 
(0404) 		   Set_White_off(5,0,10);
    01225 E08A      LDI	R24,0xA
    01226 8388      ST	Y,R24
    01227 2722      CLR	R18
    01228 E005      LDI	R16,5
    01229 940E 06FF CALL	_Set_White_off
(0405) 		    break;
    0122B C00D      RJMP	0x1239
(0406) 		 case 1:
(0407) 		   Set_White_off(5,1,8);
    0122C E088      LDI	R24,0x8
    0122D 8388      ST	Y,R24
    0122E E021      LDI	R18,1
    0122F E005      LDI	R16,5
    01230 940E 06FF CALL	_Set_White_off
(0408) 		   break;
    01232 C006      RJMP	0x1239
(0409) 		 case 2:
(0410) 		  Set_White_off(5,2,8);
    01233 E088      LDI	R24,0x8
    01234 8388      ST	Y,R24
    01235 E022      LDI	R18,2
    01236 E005      LDI	R16,5
    01237 940E 06FF CALL	_Set_White_off
(0411) 		  break;
(0412) 	
(0413) 		  default:
(0414) 		   break;
(0415) 		 }
(0416) 	    pageNum=1;
    01239 E081      LDI	R24,1
    0123A E090      LDI	R25,0
    0123B 9390 06E8 STS	pageNum+1,R25
    0123D 9380 06E7 STS	pageNum,R24
(0417) 		return;
    0123F C028      RJMP	0x1268
(0418) 	  }else if(keyV=='t'){
    01240 3764      CPI	R22,0x74
    01241 F529      BNE	0x1267
(0419) 	    switch(cur){
    01242 3040      CPI	R20,0
    01243 0745      CPC	R20,R21
    01244 F111      BEQ	0x1267
    01245 3041      CPI	R20,1
    01246 E0E0      LDI	R30,0
    01247 075E      CPC	R21,R30
    01248 F029      BEQ	0x124E
    01249 3042      CPI	R20,2
    0124A E0E0      LDI	R30,0
    0124B 075E      CPC	R21,R30
    0124C F069      BEQ	0x125A
    0124D C019      RJMP	0x1267
(0420) 		  case 0:
(0421) 		     //执行EEPROM操作
(0422) 		    break;
(0423) 		  case 1:
(0424) 		   pageNum=8;
    0124E E088      LDI	R24,0x8
    0124F E090      LDI	R25,0
    01250 9390 06E8 STS	pageNum+1,R25
    01252 9380 06E7 STS	pageNum,R24
(0425) 		   Set_White_off(5,1,8);
    01254 8388      ST	Y,R24
    01255 E021      LDI	R18,1
    01256 E005      LDI	R16,5
    01257 940E 06FF CALL	_Set_White_off
(0426) 		   return;
    01259 C00E      RJMP	0x1268
(0427) 		  
(0428) 		  case 2:
(0429) 		    pageNum=7;
    0125A E087      LDI	R24,7
    0125B E090      LDI	R25,0
    0125C 9390 06E8 STS	pageNum+1,R25
    0125E 9380 06E7 STS	pageNum,R24
(0430) 		    Set_White_off(5,2,8);
    01260 E088      LDI	R24,0x8
    01261 8388      ST	Y,R24
    01262 E022      LDI	R18,2
    01263 E005      LDI	R16,5
    01264 940E 06FF CALL	_Set_White_off
(0431) 		   return;
    01266 C001      RJMP	0x1268
    01267 CF5B      RJMP	0x11C3
    01268 9622      ADIW	R28,2
    01269 940C 15DD JMP	pop_xgsetF000
_page6:
    0126B 9722      SBIW	R28,2
(0432) 		}
(0433) 	    
(0434) 	  }
(0435)    }
(0436)    
(0437)  }
(0438)  void page6(void){//复用的方法
(0439)    lcd_write_str(5,1,"保存成功！");
    0126C E683      LDI	R24,0x63
    0126D E091      LDI	R25,1
    0126E 8399      STD	Y+1,R25
    0126F 8388      ST	Y,R24
    01270 E021      LDI	R18,1
    01271 E005      LDI	R16,5
    01272 940E 0516 CALL	_lcd_write_str
(0440)    delay_ms(500);
    01274 EF04      LDI	R16,0xF4
    01275 E011      LDI	R17,1
    01276 940E 0107 CALL	_delay_ms
(0441)    pageNum=prePageNum;
    01278 9020 06DB LDS	R2,prePageNum
    0127A 9030 06DC LDS	R3,prePageNum+1
    0127C 9230 06E8 STS	pageNum+1,R3
    0127E 9220 06E7 STS	pageNum,R2
    01280 9622      ADIW	R28,2
    01281 9508      RET
_page7:
  cur                  --> R20
  keyV                 --> R10
    01282 940E 15E2 CALL	push_xgsetF00C
    01284 9722      SBIW	R28,2
(0442)  }
(0443)  void page7(void){
(0444)    uint cur=1;
    01285 E041      LDI	R20,1
    01286 E050      LDI	R21,0
(0445)    uchar keyV;
(0446)    lcd_write_str(2,0,"是否重置");
    01287 E58A      LDI	R24,0x5A
    01288 E091      LDI	R25,1
    01289 8399      STD	Y+1,R25
    0128A 8388      ST	Y,R24
    0128B 2722      CLR	R18
    0128C E002      LDI	R16,2
    0128D 940E 0516 CALL	_lcd_write_str
(0447)    lcd_write_str(2,2,"确认");
    0128F E585      LDI	R24,0x55
    01290 E091      LDI	R25,1
    01291 8399      STD	Y+1,R25
    01292 8388      ST	Y,R24
    01293 E022      LDI	R18,2
    01294 E002      LDI	R16,2
    01295 940E 0516 CALL	_lcd_write_str
(0448)    lcd_write_str(8,2,"取消");
    01297 EA8B      LDI	R24,0xAB
    01298 E091      LDI	R25,1
    01299 8399      STD	Y+1,R25
    0129A 8388      ST	Y,R24
    0129B E022      LDI	R18,2
    0129C E008      LDI	R16,0x8
    0129D 940E 0516 CALL	_lcd_write_str
(0449)    Set_White(9,2,10);
    0129F E08A      LDI	R24,0xA
    012A0 8388      ST	Y,R24
    012A1 E022      LDI	R18,2
    012A2 E009      LDI	R16,0x9
    012A3 940E 077B CALL	_Set_White
    012A5 C074      RJMP	0x131A
(0450)     while(1){
(0451)       keyV=KeyScan_once();
    012A6 940E 0397 CALL	_KeyScan_once
    012A8 2EA0      MOV	R10,R16
(0452) 	  switch(keyV){
    012A9 2D6A      MOV	R22,R10
    012AA 2777      CLR	R23
    012AB 366C      CPI	R22,0x6C
    012AC E0E0      LDI	R30,0
    012AD 077E      CPC	R23,R30
    012AE F0A1      BEQ	0x12C3
    012AF E68C      LDI	R24,0x6C
    012B0 E090      LDI	R25,0
    012B1 1786      CP	R24,R22
    012B2 0797      CPC	R25,R23
    012B3 F034      BLT	0x12BA
    012B4 3665      CPI	R22,0x65
    012B5 E0E0      LDI	R30,0
    012B6 077E      CPC	R23,R30
    012B7 F409      BNE	0x12B9
    012B8 C04E      RJMP	0x1307
    012B9 C060      RJMP	0x131A
    012BA 3762      CPI	R22,0x72
    012BB E0E0      LDI	R30,0
    012BC 077E      CPC	R23,R30
    012BD F0C9      BEQ	0x12D7
    012BE 3764      CPI	R22,0x74
    012BF E0E0      LDI	R30,0
    012C0 077E      CPC	R23,R30
    012C1 F141      BEQ	0x12EA
    012C2 C057      RJMP	0x131A
(0453) 	    case 'l':
(0454) 		   if(cur==1){
    012C3 3041      CPI	R20,1
    012C4 E0E0      LDI	R30,0
    012C5 075E      CPC	R21,R30
    012C6 F009      BEQ	0x12C8
    012C7 C052      RJMP	0x131A
(0455) 		      Set_White_off(9,2,10);
    012C8 E08A      LDI	R24,0xA
    012C9 8388      ST	Y,R24
    012CA E022      LDI	R18,2
    012CB E009      LDI	R16,0x9
    012CC 940E 06FF CALL	_Set_White_off
(0456) 		      Set_White(3,2,4);
    012CE E084      LDI	R24,4
    012CF 8388      ST	Y,R24
    012D0 E022      LDI	R18,2
    012D1 E003      LDI	R16,3
    012D2 940E 077B CALL	_Set_White
(0457) 			  cur=0;
    012D4 2744      CLR	R20
    012D5 2755      CLR	R21
(0458) 		   }
(0459) 		   break;
    012D6 C043      RJMP	0x131A
(0460) 		case 'r':
(0461) 		   if(cur==0){
    012D7 3040      CPI	R20,0
    012D8 0745      CPC	R20,R21
    012D9 F009      BEQ	0x12DB
    012DA C03F      RJMP	0x131A
(0462) 		      Set_White_off(3,2,4);
    012DB E084      LDI	R24,4
    012DC 8388      ST	Y,R24
    012DD E022      LDI	R18,2
    012DE E003      LDI	R16,3
    012DF 940E 06FF CALL	_Set_White_off
(0463) 		      Set_White(9,2,10);
    012E1 E08A      LDI	R24,0xA
    012E2 8388      ST	Y,R24
    012E3 E022      LDI	R18,2
    012E4 E009      LDI	R16,0x9
    012E5 940E 077B CALL	_Set_White
(0464) 			  cur=1;
    012E7 E041      LDI	R20,1
    012E8 E050      LDI	R21,0
(0465) 		   }
(0466) 		  break;
    012E9 C030      RJMP	0x131A
(0467) 		case 't':
(0468) 		  //执行相关操作	  
(0469) 		  if(cur==0){
    012EA 3040      CPI	R20,0
    012EB 0745      CPC	R20,R21
    012EC F469      BNE	0x12FA
(0470) 		     Set_White_off(3,2,4);
    012ED E084      LDI	R24,4
    012EE 8388      ST	Y,R24
    012EF E022      LDI	R18,2
    012F0 E003      LDI	R16,3
    012F1 940E 06FF CALL	_Set_White_off
(0471) 			 
(0472) 		       //进入重置画面。在Page9启动看门狗重置系统、不喂狗
(0473) 		       pageNum=9;
    012F3 E089      LDI	R24,0x9
    012F4 E090      LDI	R25,0
    012F5 9390 06E8 STS	pageNum+1,R25
    012F7 9380 06E7 STS	pageNum,R24
(0474) 		  }else {
    012F9 C021      RJMP	0x131B
(0475) 		      Set_White_off(9,2,10);
    012FA E08A      LDI	R24,0xA
    012FB 8388      ST	Y,R24
    012FC E022      LDI	R18,2
    012FD E009      LDI	R16,0x9
    012FE 940E 06FF CALL	_Set_White_off
(0476) 		       pageNum=5;
    01300 E085      LDI	R24,5
    01301 E090      LDI	R25,0
    01302 9390 06E8 STS	pageNum+1,R25
    01304 9380 06E7 STS	pageNum,R24
(0477) 		  }
(0478) 		  return;
    01306 C014      RJMP	0x131B
(0479) 		 case 'e':
(0480) 		    Set_White_off(3,2,4);
    01307 E084      LDI	R24,4
    01308 8388      ST	Y,R24
    01309 E022      LDI	R18,2
    0130A E003      LDI	R16,3
    0130B 940E 06FF CALL	_Set_White_off
(0481) 		    Set_White_off(9,2,10);
    0130D E08A      LDI	R24,0xA
    0130E 8388      ST	Y,R24
    0130F E022      LDI	R18,2
    01310 E009      LDI	R16,0x9
    01311 940E 06FF CALL	_Set_White_off
(0482) 		    pageNum=5;
    01313 E085      LDI	R24,5
    01314 E090      LDI	R25,0
    01315 9390 06E8 STS	pageNum+1,R25
    01317 9380 06E7 STS	pageNum,R24
(0483) 		    return;
    01319 C001      RJMP	0x131B
    0131A CF8B      RJMP	0x12A6
    0131B 9622      ADIW	R28,2
    0131C 940C 15E9 JMP	pop_xgsetF00C
_page8:
  dateAc               --> Y,+17
  keyV                 --> R22
  cur                  --> R20
  date                 --> Y,+2
  i                    --> R22
    0131E 940E 15D8 CALL	push_xgsetF000
    01320 97AD      SBIW	R28,0x2D
(0484) 	  }
(0485) 	}
(0486)  }
(0487)  //由于使用DS1307，暂时不做读取和保存时间的。等实时时钟模块买来
(0488)  void page8(void){
(0489)    uint cur=0;
    01321 2744      CLR	R20
    01322 2755      CLR	R21
(0490)    uchar keyV;
(0491)    uchar date[15];
(0492)    uint i;
(0493)     uint dateAc[14]={1,2,3,4,6,7,9,10,2,3,5,6,8,9};
    01323 E18F      LDI	R24,0x1F
    01324 E091      LDI	R25,1
    01325 01FE      MOVW	R30,R28
    01326 9671      ADIW	R30,0x11
    01327 E10C      LDI	R16,0x1C
    01328 E010      LDI	R17,0
    01329 93FA      ST	-Y,R31
    0132A 93EA      ST	-Y,R30
    0132B 939A      ST	-Y,R25
    0132C 938A      ST	-Y,R24
    0132D 940E 161D CALL	asgnblk
(0494) 	prePageNum=8;//同样 是违反规则的设置
    0132F E088      LDI	R24,0x8
    01330 E090      LDI	R25,0
    01331 9390 06DC STS	prePageNum+1,R25
    01333 9380 06DB STS	prePageNum,R24
(0495)    date[0]=2;
    01335 E082      LDI	R24,2
    01336 838A      STD	Y+2,R24
(0496)    date[1]=0;
    01337 2422      CLR	R2
    01338 822B      STD	Y+3,R2
(0497)    date[2]=1;
    01339 E081      LDI	R24,1
    0133A 838C      STD	Y+4,R24
(0498)    date[3]=5;
    0133B E085      LDI	R24,5
    0133C 838D      STD	Y+5,R24
(0499)    date[4]=1;
    0133D E081      LDI	R24,1
    0133E 838E      STD	Y+6,R24
(0500)    date[5]=2;
    0133F E082      LDI	R24,2
    01340 838F      STD	Y+7,R24
(0501)    date[6]=2;
    01341 8788      STD	Y+8,R24
(0502)    date[7]=5;
    01342 E085      LDI	R24,5
    01343 8789      STD	Y+9,R24
(0503)    date[8]=1;
    01344 E081      LDI	R24,1
    01345 878A      STD	Y+10,R24
(0504)    date[9]=2;
    01346 E082      LDI	R24,2
    01347 878B      STD	Y+11,R24
(0505)    date[10]=3;
    01348 E083      LDI	R24,3
    01349 878C      STD	Y+12,R24
(0506)    date[11]=0;
    0134A 862D      STD	Y+13,R2
(0507)    date[12]=5;
    0134B E085      LDI	R24,5
    0134C 878E      STD	Y+14,R24
(0508)    date[13]=0;
    0134D 862F      STD	Y+15,R2
(0509)     lcd_write_pos(1,0);
    0134E 2722      CLR	R18
    0134F E001      LDI	R16,1
    01350 940E 04D2 CALL	_lcd_write_pos
(0510)   for(i=0;i<8;i++){
    01352 2766      CLR	R22
    01353 2777      CLR	R23
    01354 C01D      RJMP	0x1372
(0511)    lcd_write_char_con(0,0x30 | date[i]);
    01355 01CE      MOVW	R24,R28
    01356 9602      ADIW	R24,2
    01357 01FB      MOVW	R30,R22
    01358 0FE8      ADD	R30,R24
    01359 1FF9      ADC	R31,R25
    0135A 8120      LD	R18,Z
    0135B 6320      ORI	R18,0x30
    0135C 2700      CLR	R16
    0135D 940E 04BE CALL	_lcd_write_char_con
(0512)     lcd_write_char_con(0,' ');
    0135F E220      LDI	R18,0x20
    01360 2700      CLR	R16
    01361 940E 04BE CALL	_lcd_write_char_con
(0513) 	if(i==3 || i==5){
    01363 3063      CPI	R22,3
    01364 E0E0      LDI	R30,0
    01365 077E      CPC	R23,R30
    01366 F021      BEQ	0x136B
    01367 3065      CPI	R22,5
    01368 E0E0      LDI	R30,0
    01369 077E      CPC	R23,R30
    0136A F429      BNE	0x1370
(0514) 	  lcd_write_str_con(0,"- ");
    0136B E522      LDI	R18,0x52
    0136C E031      LDI	R19,1
    0136D 2700      CLR	R16
    0136E 940E 0560 CALL	_lcd_write_str_con
    01370 5F6F      SUBI	R22,0xFF
    01371 4F7F      SBCI	R23,0xFF
    01372 3068      CPI	R22,0x8
    01373 E0E0      LDI	R30,0
    01374 077E      CPC	R23,R30
    01375 F2F8      BCS	0x1355
(0515) 	}
(0516)   }
(0517)    lcd_write_pos(2,1);
    01376 E021      LDI	R18,1
    01377 E002      LDI	R16,2
    01378 940E 04D2 CALL	_lcd_write_pos
(0518)    for(i=8;i<14;i++){
    0137A E068      LDI	R22,0x8
    0137B E070      LDI	R23,0
    0137C C01D      RJMP	0x139A
(0519)    lcd_write_char_con(1,0x30 | date[i]);
    0137D 01CE      MOVW	R24,R28
    0137E 9602      ADIW	R24,2
    0137F 01FB      MOVW	R30,R22
    01380 0FE8      ADD	R30,R24
    01381 1FF9      ADC	R31,R25
    01382 8120      LD	R18,Z
    01383 6320      ORI	R18,0x30
    01384 E001      LDI	R16,1
    01385 940E 04BE CALL	_lcd_write_char_con
(0520)    lcd_write_char_con(0,' ');
    01387 E220      LDI	R18,0x20
    01388 2700      CLR	R16
    01389 940E 04BE CALL	_lcd_write_char_con
(0521)    if(i==9 || i==11){
    0138B 3069      CPI	R22,0x9
    0138C E0E0      LDI	R30,0
    0138D 077E      CPC	R23,R30
    0138E F021      BEQ	0x1393
    0138F 306B      CPI	R22,0xB
    01390 E0E0      LDI	R30,0
    01391 077E      CPC	R23,R30
    01392 F429      BNE	0x1398
(0522) 	 lcd_write_str_con(0,": ");
    01393 E42F      LDI	R18,0x4F
    01394 E031      LDI	R19,1
    01395 2700      CLR	R16
    01396 940E 0560 CALL	_lcd_write_str_con
    01398 5F6F      SUBI	R22,0xFF
    01399 4F7F      SBCI	R23,0xFF
    0139A 306E      CPI	R22,0xE
    0139B E0E0      LDI	R30,0
    0139C 077E      CPC	R23,R30
    0139D F2F8      BCS	0x137D
(0523)    }
(0524)   } 
(0525)    lcd_write_str(3,2,"保存");
    0139E E48A      LDI	R24,0x4A
    0139F E091      LDI	R25,1
    013A0 8399      STD	Y+1,R25
    013A1 8388      ST	Y,R24
    013A2 E022      LDI	R18,2
    013A3 E003      LDI	R16,3
    013A4 940E 0516 CALL	_lcd_write_str
(0526)    lcd_write_str(8,2,"取消");
    013A6 EA8B      LDI	R24,0xAB
    013A7 E091      LDI	R25,1
    013A8 8399      STD	Y+1,R25
    013A9 8388      ST	Y,R24
    013AA E022      LDI	R18,2
    013AB E008      LDI	R16,0x8
    013AC 940E 0516 CALL	_lcd_write_str
(0527)    //初始化date
(0528)   
(0529)    cur=0;
    013AE 2744      CLR	R20
    013AF 2755      CLR	R21
(0530)    lcd_write_pos(1,0);//初始游标位置
    013B0 2722      CLR	R18
    013B1 E001      LDI	R16,1
    013B2 940E 04D2 CALL	_lcd_write_pos
(0531)    cur_set(3);//上半屏幕游标设置
    013B4 E003      LDI	R16,3
    013B5 E010      LDI	R17,0
    013B6 940E 06AB CALL	_cur_set
    013B8 C17E      RJMP	0x1537
(0532)    while(1){
(0533)      pageTime(3);//
    013B9 E003      LDI	R16,3
    013BA E010      LDI	R17,0
    013BB D9A8      RCALL	_pageTime
(0534) 	 keyV=KeyScan_once();
    013BC 940E 0397 CALL	_KeyScan_once
    013BE 2F60      MOV	R22,R16
(0535) 	 if(keyV=='u'){
    013BF 3705      CPI	R16,0x75
    013C0 F571      BNE	0x13EF
(0536) 	   if(cur>13){//调到时间第一个
    013C1 E08D      LDI	R24,0xD
    013C2 E090      LDI	R25,0
    013C3 1784      CP	R24,R20
    013C4 0795      CPC	R25,R21
    013C5 F4B8      BCC	0x13DD
(0537) 	        Set_White_off(4,2,5);
    013C6 E085      LDI	R24,5
    013C7 8388      ST	Y,R24
    013C8 E022      LDI	R18,2
    013C9 E004      LDI	R16,4
    013CA 940E 06FF CALL	_Set_White_off
(0538) 			Set_White_off(9,2,10);
    013CC E08A      LDI	R24,0xA
    013CD 8388      ST	Y,R24
    013CE E022      LDI	R18,2
    013CF E009      LDI	R16,0x9
    013D0 940E 06FF CALL	_Set_White_off
(0539) 	        lcd_write_pos(2,1);
    013D2 E021      LDI	R18,1
    013D3 E002      LDI	R16,2
    013D4 940E 04D2 CALL	_lcd_write_pos
(0540) 		    cur_set(3);
    013D6 E003      LDI	R16,3
    013D7 E010      LDI	R17,0
    013D8 940E 06AB CALL	_cur_set
(0541) 			cur=8; 
    013DA E048      LDI	R20,0x8
    013DB E050      LDI	R21,0
(0542) 		   }else if(cur>7 && cur <14){//调到日期第一个
    013DC C15A      RJMP	0x1537
    013DD E087      LDI	R24,7
    013DE E090      LDI	R25,0
    013DF 1784      CP	R24,R20
    013E0 0795      CPC	R25,R21
    013E1 F008      BCS	0x13E3
    013E2 C154      RJMP	0x1537
    013E3 304E      CPI	R20,0xE
    013E4 E0E0      LDI	R30,0
    013E5 075E      CPC	R21,R30
    013E6 F008      BCS	0x13E8
    013E7 C14F      RJMP	0x1537
(0543) 		    lcd_write_pos(1,0);
    013E8 2722      CLR	R18
    013E9 E001      LDI	R16,1
    013EA 940E 04D2 CALL	_lcd_write_pos
(0544) 			cur=0; 
    013EC 2744      CLR	R20
    013ED 2755      CLR	R21
(0545) 		   }
(0546) 	 }else if(keyV=='d'){
    013EE C148      RJMP	0x1537
    013EF 3664      CPI	R22,0x64
    013F0 F519      BNE	0x1414
(0547) 	     if(cur>7 && cur <14){//在时间上，第三行，默认要保存，所以调到保存上
    013F1 E087      LDI	R24,7
    013F2 E090      LDI	R25,0
    013F3 1784      CP	R24,R20
    013F4 0795      CPC	R25,R21
    013F5 F488      BCC	0x1407
    013F6 304E      CPI	R20,0xE
    013F7 E0E0      LDI	R30,0
    013F8 075E      CPC	R21,R30
    013F9 F468      BCC	0x1407
(0548) 		      cur_set(0);//关下半屏幕游标
    013FA 2700      CLR	R16
    013FB 2711      CLR	R17
    013FC 940E 06AB CALL	_cur_set
(0549) 			  Set_White(4,2,5);
    013FE E085      LDI	R24,5
    013FF 8388      ST	Y,R24
    01400 E022      LDI	R18,2
    01401 E004      LDI	R16,4
    01402 940E 077B CALL	_Set_White
(0550) 			  cur=14;
    01404 E04E      LDI	R20,0xE
    01405 E050      LDI	R21,0
(0551) 		 }else if(cur<=7){ //调到时间第一个
    01406 C130      RJMP	0x1537
    01407 E087      LDI	R24,7
    01408 E090      LDI	R25,0
    01409 1784      CP	R24,R20
    0140A 0795      CPC	R25,R21
    0140B F408      BCC	0x140D
    0140C C12A      RJMP	0x1537
(0552) 		    lcd_write_pos(2,1);
    0140D E021      LDI	R18,1
    0140E E002      LDI	R16,2
    0140F 940E 04D2 CALL	_lcd_write_pos
(0553) 			cur=8; 
    01411 E048      LDI	R20,0x8
    01412 E050      LDI	R21,0
(0554) 		 }
(0555) 	 }else if(keyV=='l'){
    01413 C123      RJMP	0x1537
    01414 366C      CPI	R22,0x6C
    01415 F009      BEQ	0x1417
    01416 C043      RJMP	0x145A
(0556) 			if(cur<=8 && cur>0){
    01417 E088      LDI	R24,0x8
    01418 E090      LDI	R25,0
    01419 1784      CP	R24,R20
    0141A 0795      CPC	R25,R21
    0141B F090      BCS	0x142E
    0141C 3040      CPI	R20,0
    0141D 0745      CPC	R20,R21
    0141E F079      BEQ	0x142E
(0557) 			 cur--;
    0141F 5041      SUBI	R20,1
    01420 4050      SBCI	R21,0
(0558) 			 lcd_write_pos(dateAc[cur],0);
    01421 2722      CLR	R18
    01422 01CE      MOVW	R24,R28
    01423 9641      ADIW	R24,0x11
    01424 01FA      MOVW	R30,R20
    01425 0FEE      LSL	R30
    01426 1FFF      ROL	R31
    01427 0FE8      ADD	R30,R24
    01428 1FF9      ADC	R31,R25
    01429 8100      LD	R16,Z
    0142A 8111      LDD	R17,Z+1
    0142B 940E 04D2 CALL	_lcd_write_pos
(0559) 			}else if (cur>8 && cur<14){
    0142D C109      RJMP	0x1537
    0142E E088      LDI	R24,0x8
    0142F E090      LDI	R25,0
    01430 1784      CP	R24,R20
    01431 0795      CPC	R25,R21
    01432 F498      BCC	0x1446
    01433 304E      CPI	R20,0xE
    01434 E0E0      LDI	R30,0
    01435 075E      CPC	R21,R30
    01436 F478      BCC	0x1446
(0560) 			 cur--;
    01437 5041      SUBI	R20,1
    01438 4050      SBCI	R21,0
(0561) 			 lcd_write_pos(dateAc[cur],1);
    01439 E021      LDI	R18,1
    0143A 01CE      MOVW	R24,R28
    0143B 9641      ADIW	R24,0x11
    0143C 01FA      MOVW	R30,R20
    0143D 0FEE      LSL	R30
    0143E 1FFF      ROL	R31
    0143F 0FE8      ADD	R30,R24
    01440 1FF9      ADC	R31,R25
    01441 8100      LD	R16,Z
    01442 8111      LDD	R17,Z+1
    01443 940E 04D2 CALL	_lcd_write_pos
(0562) 			}else if (cur==15){
    01445 C0F1      RJMP	0x1537
    01446 304F      CPI	R20,0xF
    01447 E0E0      LDI	R30,0
    01448 075E      CPC	R21,R30
    01449 F009      BEQ	0x144B
    0144A C0EC      RJMP	0x1537
(0563) 			    Set_White_off(9,2,10);
    0144B E08A      LDI	R24,0xA
    0144C 8388      ST	Y,R24
    0144D E022      LDI	R18,2
    0144E E009      LDI	R16,0x9
    0144F 940E 06FF CALL	_Set_White_off
(0564) 			    Set_White(4,2,5);
    01451 E085      LDI	R24,5
    01452 8388      ST	Y,R24
    01453 E022      LDI	R18,2
    01454 E004      LDI	R16,4
    01455 940E 077B CALL	_Set_White
(0565) 				cur=14;
    01457 E04E      LDI	R20,0xE
    01458 E050      LDI	R21,0
(0566) 			}
(0567) 			
(0568) 		
(0569) 	 }else if(keyV=='r'){
    01459 C0DD      RJMP	0x1537
    0145A 3762      CPI	R22,0x72
    0145B F009      BEQ	0x145D
    0145C C03A      RJMP	0x1497
(0570) 	       if(cur<7){
    0145D 3047      CPI	R20,7
    0145E E0E0      LDI	R30,0
    0145F 075E      CPC	R21,R30
    01460 F478      BCC	0x1470
(0571) 			   cur++;
    01461 5F4F      SUBI	R20,0xFF
    01462 4F5F      SBCI	R21,0xFF
(0572) 			   lcd_write_pos(dateAc[cur],0);
    01463 2722      CLR	R18
    01464 01CE      MOVW	R24,R28
    01465 9641      ADIW	R24,0x11
    01466 01FA      MOVW	R30,R20
    01467 0FEE      LSL	R30
    01468 1FFF      ROL	R31
    01469 0FE8      ADD	R30,R24
    0146A 1FF9      ADC	R31,R25
    0146B 8100      LD	R16,Z
    0146C 8111      LDD	R17,Z+1
    0146D 940E 04D2 CALL	_lcd_write_pos
(0573) 			}else if (cur<13){
    0146F C0C7      RJMP	0x1537
    01470 304D      CPI	R20,0xD
    01471 E0E0      LDI	R30,0
    01472 075E      CPC	R21,R30
    01473 F478      BCC	0x1483
(0574) 			   cur++;
    01474 5F4F      SUBI	R20,0xFF
    01475 4F5F      SBCI	R21,0xFF
(0575) 			   lcd_write_pos(dateAc[cur],1);
    01476 E021      LDI	R18,1
    01477 01CE      MOVW	R24,R28
    01478 9641      ADIW	R24,0x11
    01479 01FA      MOVW	R30,R20
    0147A 0FEE      LSL	R30
    0147B 1FFF      ROL	R31
    0147C 0FE8      ADD	R30,R24
    0147D 1FF9      ADC	R31,R25
    0147E 8100      LD	R16,Z
    0147F 8111      LDD	R17,Z+1
    01480 940E 04D2 CALL	_lcd_write_pos
(0576) 			}else if (cur==14){
    01482 C0B4      RJMP	0x1537
    01483 304E      CPI	R20,0xE
    01484 E0E0      LDI	R30,0
    01485 075E      CPC	R21,R30
    01486 F009      BEQ	0x1488
    01487 C0AF      RJMP	0x1537
(0577) 			    Set_White_off(4,2,5);
    01488 E085      LDI	R24,5
    01489 8388      ST	Y,R24
    0148A E022      LDI	R18,2
    0148B E004      LDI	R16,4
    0148C 940E 06FF CALL	_Set_White_off
(0578) 				Set_White(9,2,10);
    0148E E08A      LDI	R24,0xA
    0148F 8388      ST	Y,R24
    01490 E022      LDI	R18,2
    01491 E009      LDI	R16,0x9
    01492 940E 077B CALL	_Set_White
(0579) 				cur=15;
    01494 E04F      LDI	R20,0xF
    01495 E050      LDI	R21,0
(0580) 			}
(0581) 	 }else if(keyV=='e'){
    01496 C0A0      RJMP	0x1537
    01497 3665      CPI	R22,0x65
    01498 F4B9      BNE	0x14B0
(0582) 	     cur_set(0);//关上半屏幕游标
    01499 2700      CLR	R16
    0149A 2711      CLR	R17
    0149B 940E 06AB CALL	_cur_set
(0583) 		  Set_White_off(4,2,5);
    0149D E085      LDI	R24,5
    0149E 8388      ST	Y,R24
    0149F E022      LDI	R18,2
    014A0 E004      LDI	R16,4
    014A1 940E 06FF CALL	_Set_White_off
(0584) 		  Set_White_off(9,2,10);
    014A3 E08A      LDI	R24,0xA
    014A4 8388      ST	Y,R24
    014A5 E022      LDI	R18,2
    014A6 E009      LDI	R16,0x9
    014A7 940E 06FF CALL	_Set_White_off
(0585) 		 pageNum=1;
    014A9 E081      LDI	R24,1
    014AA E090      LDI	R25,0
    014AB 9390 06E8 STS	pageNum+1,R25
    014AD 9380 06E7 STS	pageNum,R24
(0586) 		 return;
    014AF C088      RJMP	0x1538
(0587) 	     //退出界面
(0588) 	 }else if(keyV=='t'){
    014B0 3764      CPI	R22,0x74
    014B1 F539      BNE	0x14D9
(0589) 	      if(cur==14){
    014B2 304E      CPI	R20,0xE
    014B3 E0E0      LDI	R30,0
    014B4 075E      CPC	R21,R30
    014B5 F439      BNE	0x14BD
(0590) 		        //保存操作
(0591) 				pageNum=6;
    014B6 E086      LDI	R24,6
    014B7 E090      LDI	R25,0
    014B8 9390 06E8 STS	pageNum+1,R25
    014BA 9380 06E7 STS	pageNum,R24
(0592) 				return;
    014BC C07B      RJMP	0x1538
(0593) 		 }else if(cur==15){
    014BD 304F      CPI	R20,0xF
    014BE E0E0      LDI	R30,0
    014BF 075E      CPC	R21,R30
    014C0 F009      BEQ	0x14C2
    014C1 C075      RJMP	0x1537
(0594) 		        //取消操作
(0595) 			 cur_set(0);//关上半屏幕游标
    014C2 2700      CLR	R16
    014C3 2711      CLR	R17
    014C4 940E 06AB CALL	_cur_set
(0596) 		  Set_White_off(4,2,5);
    014C6 E085      LDI	R24,5
    014C7 8388      ST	Y,R24
    014C8 E022      LDI	R18,2
    014C9 E004      LDI	R16,4
    014CA 940E 06FF CALL	_Set_White_off
(0597) 		  Set_White_off(9,2,10);
    014CC E08A      LDI	R24,0xA
    014CD 8388      ST	Y,R24
    014CE E022      LDI	R18,2
    014CF E009      LDI	R16,0x9
    014D0 940E 06FF CALL	_Set_White_off
(0598) 		 pageNum=1;
    014D2 E081      LDI	R24,1
    014D3 E090      LDI	R25,0
    014D4 9390 06E8 STS	pageNum+1,R25
    014D6 9380 06E7 STS	pageNum,R24
(0599) 		 return;
    014D8 C05F      RJMP	0x1538
(0600) 		 }
(0601) 	 }else if(keyV=='0' || keyV=='1' || keyV=='2' || keyV=='3' || keyV=='4' || keyV=='5' 
    014D9 3360      CPI	R22,0x30
    014DA F099      BEQ	0x14EE
    014DB 3361      CPI	R22,0x31
    014DC F089      BEQ	0x14EE
    014DD 3362      CPI	R22,0x32
    014DE F079      BEQ	0x14EE
    014DF 3363      CPI	R22,0x33
    014E0 F069      BEQ	0x14EE
    014E1 3364      CPI	R22,0x34
    014E2 F059      BEQ	0x14EE
    014E3 3365      CPI	R22,0x35
    014E4 F049      BEQ	0x14EE
    014E5 3366      CPI	R22,0x36
    014E6 F039      BEQ	0x14EE
    014E7 3367      CPI	R22,0x37
    014E8 F029      BEQ	0x14EE
    014E9 3368      CPI	R22,0x38
    014EA F019      BEQ	0x14EE
    014EB 3369      CPI	R22,0x39
    014EC F009      BEQ	0x14EE
    014ED C049      RJMP	0x1537
(0602) 	           || keyV=='6'  || keyV=='7' || keyV=='8' || keyV=='9'){
(0603) 			if(cur<14){
    014EE 304E      CPI	R20,0xE
    014EF E0E0      LDI	R30,0
    014F0 075E      CPC	R21,R30
    014F1 F008      BCS	0x14F3
    014F2 C044      RJMP	0x1537
(0604) 			 lcd_write_char_con(0,0x30 | keyV);
    014F3 2F26      MOV	R18,R22
    014F4 6320      ORI	R18,0x30
    014F5 2700      CLR	R16
    014F6 940E 04BE CALL	_lcd_write_char_con
(0605) 			 lcd_write_char_con(0,' ');
    014F8 E220      LDI	R18,0x20
    014F9 2700      CLR	R16
    014FA 940E 04BE CALL	_lcd_write_char_con
(0606) 			 date[cur]=keyV;
    014FC 01CE      MOVW	R24,R28
    014FD 9602      ADIW	R24,2
    014FE 01FA      MOVW	R30,R20
    014FF 0FE8      ADD	R30,R24
    01500 1FF9      ADC	R31,R25
    01501 8360      ST	Z,R22
(0607) 			  if(cur==3 || cur==5){
    01502 3043      CPI	R20,3
    01503 E0E0      LDI	R30,0
    01504 075E      CPC	R21,R30
    01505 F021      BEQ	0x150A
    01506 3045      CPI	R20,5
    01507 E0E0      LDI	R30,0
    01508 075E      CPC	R21,R30
    01509 F431      BNE	0x1510
(0608) 			    lcd_write_str_con(0,"- ");
    0150A E522      LDI	R18,0x52
    0150B E031      LDI	R19,1
    0150C 2700      CLR	R16
    0150D 940E 0560 CALL	_lcd_write_str_con
(0609) 			 }else if(cur==9 || cur==11){
    0150F C00D      RJMP	0x151D
    01510 3049      CPI	R20,0x9
    01511 E0E0      LDI	R30,0
    01512 075E      CPC	R21,R30
    01513 F021      BEQ	0x1518
    01514 304B      CPI	R20,0xB
    01515 E0E0      LDI	R30,0
    01516 075E      CPC	R21,R30
    01517 F429      BNE	0x151D
(0610) 			    lcd_write_str_con(0,": ");
    01518 E42F      LDI	R18,0x4F
    01519 E031      LDI	R19,1
    0151A 2700      CLR	R16
    0151B 940E 0560 CALL	_lcd_write_str_con
(0611) 			 }
(0612) 			 cur++;
    0151D 5F4F      SUBI	R20,0xFF
    0151E 4F5F      SBCI	R21,0xFF
(0613) 			 if(cur==8){
    0151F 3048      CPI	R20,0x8
    01520 E0E0      LDI	R30,0
    01521 075E      CPC	R21,R30
    01522 F431      BNE	0x1529
(0614) 			    lcd_write_pos(dateAc[8],1);
    01523 E021      LDI	R18,1
    01524 A109      LDD	R16,Y+33
    01525 A11A      LDD	R17,Y+34
    01526 940E 04D2 CALL	_lcd_write_pos
(0615) 			 }else if(cur==14){
    01528 C00E      RJMP	0x1537
    01529 304E      CPI	R20,0xE
    0152A E0E0      LDI	R30,0
    0152B 075E      CPC	R21,R30
    0152C F451      BNE	0x1537
(0616) 			  cur_set(0);//关下半屏幕游标
    0152D 2700      CLR	R16
    0152E 2711      CLR	R17
    0152F 940E 06AB CALL	_cur_set
(0617) 			  Set_White(4,2,5);
    01531 E085      LDI	R24,5
    01532 8388      ST	Y,R24
    01533 E022      LDI	R18,2
    01534 E004      LDI	R16,4
    01535 940E 077B CALL	_Set_White
    01537 CE81      RJMP	0x13B9
    01538 96AD      ADIW	R28,0x2D
    01539 940C 15DD JMP	pop_xgsetF000
_page9:
    0153B 9722      SBIW	R28,2
(0618) 			 }
(0619) 			}
(0620) 	 }
(0621)    }
(0622)  }
(0623) void page9(void){//复用的方法
(0624)    lcd_write_str(5,1,"重置中。。。。");
    0153C E38B      LDI	R24,0x3B
    0153D E091      LDI	R25,1
    0153E 8399      STD	Y+1,R25
    0153F 8388      ST	Y,R24
    01540 E021      LDI	R18,1
    01541 E005      LDI	R16,5
    01542 940E 0516 CALL	_lcd_write_str
(0625)    while(1){
    01544 CFFF      RJMP	0x1544
    01545 9622      ADIW	R28,2
    01546 9508      RET
(0626)       
(0627)    }
(0628)  }
(0629) //分发Pages
(0630) void dispatchPages(void){
(0631)       lcd_clear();//清屏幕
_dispatchPages:
    01547 940E 05CD CALL	_lcd_clear
(0632)       if(pageNum==1){
    01549 9180 06E7 LDS	R24,pageNum
    0154B 9190 06E8 LDS	R25,pageNum+1
    0154D 3081      CPI	R24,1
    0154E E0E0      LDI	R30,0
    0154F 079E      CPC	R25,R30
    01550 F411      BNE	0x1553
(0633) 	    page1();
    01551 D825      RCALL	_page1
(0634) 	  }else if(pageNum==2){
    01552 C04F      RJMP	0x15A2
    01553 9180 06E7 LDS	R24,pageNum
    01555 9190 06E8 LDS	R25,pageNum+1
    01557 3082      CPI	R24,2
    01558 E0E0      LDI	R30,0
    01559 079E      CPC	R25,R30
    0155A F411      BNE	0x155D
(0635) 	    page2();
    0155B DB86      RCALL	_page2
(0636) 	  }else if(pageNum==3){
    0155C C045      RJMP	0x15A2
    0155D 9180 06E7 LDS	R24,pageNum
    0155F 9190 06E8 LDS	R25,pageNum+1
    01561 3083      CPI	R24,3
    01562 E0E0      LDI	R30,0
    01563 079E      CPC	R25,R30
    01564 F411      BNE	0x1567
(0637) 	    page3();
    01565 DBF3      RCALL	_page3
(0638) 	  }else if(pageNum==4){
    01566 C03B      RJMP	0x15A2
    01567 9180 06E7 LDS	R24,pageNum
    01569 9190 06E8 LDS	R25,pageNum+1
    0156B 3084      CPI	R24,4
    0156C E0E0      LDI	R30,0
    0156D 079E      CPC	R25,R30
    0156E F411      BNE	0x1571
(0639) 	    page4();
    0156F DC07      RCALL	_page4
(0640) 	  }else if(pageNum==5){
    01570 C031      RJMP	0x15A2
    01571 9180 06E7 LDS	R24,pageNum
    01573 9190 06E8 LDS	R25,pageNum+1
    01575 3085      CPI	R24,5
    01576 E0E0      LDI	R30,0
    01577 079E      CPC	R25,R30
    01578 F411      BNE	0x157B
(0641) 	    page5();
    01579 DC1B      RCALL	_page5
(0642) 	  }else if(pageNum==6){
    0157A C027      RJMP	0x15A2
    0157B 9180 06E7 LDS	R24,pageNum
    0157D 9190 06E8 LDS	R25,pageNum+1
    0157F 3086      CPI	R24,6
    01580 E0E0      LDI	R30,0
    01581 079E      CPC	R25,R30
    01582 F411      BNE	0x1585
(0643) 	    page6();
    01583 DCE7      RCALL	_page6
(0644) 	  }else if(pageNum==7){
    01584 C01D      RJMP	0x15A2
    01585 9180 06E7 LDS	R24,pageNum
    01587 9190 06E8 LDS	R25,pageNum+1
    01589 3087      CPI	R24,7
    0158A E0E0      LDI	R30,0
    0158B 079E      CPC	R25,R30
    0158C F411      BNE	0x158F
(0645) 	    page7();
    0158D DCF4      RCALL	_page7
(0646) 	  }else if(pageNum==8){
    0158E C013      RJMP	0x15A2
    0158F 9180 06E7 LDS	R24,pageNum
    01591 9190 06E8 LDS	R25,pageNum+1
    01593 3088      CPI	R24,0x8
    01594 E0E0      LDI	R30,0
    01595 079E      CPC	R25,R30
    01596 F411      BNE	0x1599
(0647) 	    page8();
    01597 DD86      RCALL	_page8
(0648) 	  }else if(pageNum==9){
    01598 C009      RJMP	0x15A2
    01599 9180 06E7 LDS	R24,pageNum
    0159B 9190 06E8 LDS	R25,pageNum+1
    0159D 3089      CPI	R24,0x9
    0159E E0E0      LDI	R30,0
    0159F 079E      CPC	R25,R30
    015A0 F409      BNE	0x15A2
(0649) 	    page9();
    015A1 DF99      RCALL	_page9
(0650) 	  }
FILE: <library>
    015A2 9508      RET
push_arg4:
    015A3 933A      ST	-Y,R19
    015A4 932A      ST	-Y,R18
push_arg2:
    015A5 931A      ST	-Y,R17
    015A6 930A      ST	-Y,R16
    015A7 9508      RET
pop_xgset00FC:
    015A8 90A9      LD	R10,Y+
    015A9 90B9      LD	R11,Y+
    015AA 90C9      LD	R12,Y+
    015AB 90D9      LD	R13,Y+
    015AC 90E9      LD	R14,Y+
    015AD 90F9      LD	R15,Y+
    015AE 9508      RET
pop_xgset30FC:
    015AF 90A9      LD	R10,Y+
    015B0 90B9      LD	R11,Y+
    015B1 90C9      LD	R12,Y+
    015B2 90D9      LD	R13,Y+
    015B3 90E9      LD	R14,Y+
    015B4 90F9      LD	R15,Y+
    015B5 9149      LD	R20,Y+
    015B6 9159      LD	R21,Y+
    015B7 9508      RET
pop_xgsetF0FC:
    015B8 90A9      LD	R10,Y+
    015B9 90B9      LD	R11,Y+
    015BA 90C9      LD	R12,Y+
    015BB 90D9      LD	R13,Y+
    015BC 90E9      LD	R14,Y+
    015BD 90F9      LD	R15,Y+
    015BE 9149      LD	R20,Y+
    015BF 9159      LD	R21,Y+
    015C0 9169      LD	R22,Y+
    015C1 9179      LD	R23,Y+
    015C2 9508      RET
push_xgsetF0FC:
    015C3 937A      ST	-Y,R23
    015C4 936A      ST	-Y,R22
push_xgset30FC:
    015C5 935A      ST	-Y,R21
    015C6 934A      ST	-Y,R20
push_xgset00FC:
    015C7 92FA      ST	-Y,R15
    015C8 92EA      ST	-Y,R14
push_xgset003C:
    015C9 92DA      ST	-Y,R13
    015CA 92CA      ST	-Y,R12
    015CB 92BA      ST	-Y,R11
    015CC 92AA      ST	-Y,R10
    015CD 9508      RET
push_xgset300C:
    015CE 935A      ST	-Y,R21
    015CF 934A      ST	-Y,R20
    015D0 92BA      ST	-Y,R11
    015D1 92AA      ST	-Y,R10
    015D2 9508      RET
pop_xgset300C:
    015D3 90A9      LD	R10,Y+
    015D4 90B9      LD	R11,Y+
    015D5 9149      LD	R20,Y+
    015D6 9159      LD	R21,Y+
    015D7 9508      RET
push_xgsetF000:
    015D8 937A      ST	-Y,R23
    015D9 936A      ST	-Y,R22
    015DA 935A      ST	-Y,R21
    015DB 934A      ST	-Y,R20
    015DC 9508      RET
pop_xgsetF000:
    015DD 9149      LD	R20,Y+
    015DE 9159      LD	R21,Y+
    015DF 9169      LD	R22,Y+
    015E0 9179      LD	R23,Y+
    015E1 9508      RET
push_xgsetF00C:
    015E2 937A      ST	-Y,R23
    015E3 936A      ST	-Y,R22
    015E4 935A      ST	-Y,R21
    015E5 934A      ST	-Y,R20
    015E6 92BA      ST	-Y,R11
    015E7 92AA      ST	-Y,R10
    015E8 9508      RET
pop_xgsetF00C:
    015E9 90A9      LD	R10,Y+
    015EA 90B9      LD	R11,Y+
    015EB 9149      LD	R20,Y+
    015EC 9159      LD	R21,Y+
    015ED 9169      LD	R22,Y+
    015EE 9179      LD	R23,Y+
    015EF 9508      RET
push_xgset303C:
    015F0 935A      ST	-Y,R21
    015F1 934A      ST	-Y,R20
    015F2 92DA      ST	-Y,R13
    015F3 92CA      ST	-Y,R12
    015F4 92BA      ST	-Y,R11
    015F5 92AA      ST	-Y,R10
    015F6 9508      RET
pop_xgset303C:
    015F7 90A9      LD	R10,Y+
    015F8 90B9      LD	R11,Y+
    015F9 90C9      LD	R12,Y+
    015FA 90D9      LD	R13,Y+
    015FB 9149      LD	R20,Y+
    015FC 9159      LD	R21,Y+
    015FD 9508      RET
push_xgsetF03C:
    015FE 937A      ST	-Y,R23
    015FF 936A      ST	-Y,R22
    01600 935A      ST	-Y,R21
    01601 934A      ST	-Y,R20
    01602 92DA      ST	-Y,R13
    01603 92CA      ST	-Y,R12
    01604 92BA      ST	-Y,R11
    01605 92AA      ST	-Y,R10
    01606 9508      RET
pop_xgsetF03C:
    01607 90A9      LD	R10,Y+
    01608 90B9      LD	R11,Y+
    01609 90C9      LD	R12,Y+
    0160A 90D9      LD	R13,Y+
    0160B 9149      LD	R20,Y+
    0160C 9159      LD	R21,Y+
    0160D 9169      LD	R22,Y+
    0160E 9179      LD	R23,Y+
    0160F 9508      RET
lsl16:
    01610 2322      TST	R18
    01611 F021      BEQ	0x1616
    01612 0F00      LSL	R16
    01613 1F11      ROL	R17
    01614 952A      DEC	R18
    01615 CFFA      RJMP	lsl16
    01616 9508      RET
lsl8:
    01617 2311      TST	R17
    01618 F019      BEQ	0x161C
    01619 0F00      LSL	R16
    0161A 951A      DEC	R17
    0161B CFFB      RJMP	lsl8
    0161C 9508      RET
asgnblk:
    0161D 93AA      ST	-Y,R26
    0161E 93BA      ST	-Y,R27
    0161F 93EA      ST	-Y,R30
    01620 93FA      ST	-Y,R31
    01621 920A      ST	-Y,R0
    01622 81AF      LDD	R26,Y+7
    01623 85B8      LDD	R27,Y+8
    01624 81ED      LDD	R30,Y+5
    01625 81FE      LDD	R31,Y+6
    01626 3000      CPI	R16,0
    01627 0701      CPC	R16,R17
    01628 F029      BEQ	0x162E
    01629 9001      LD	R0,Z+
    0162A 920D      ST	X+,R0
    0162B 5001      SUBI	R16,1
    0162C 4010      SBCI	R17,0
    0162D CFF8      RJMP	0x1626
    0162E 9009      LD	R0,Y+
    0162F 91F9      LD	R31,Y+
    01630 91E9      LD	R30,Y+
    01631 91B9      LD	R27,Y+
    01632 91A9      LD	R26,Y+
    01633 9624      ADIW	R28,4
    01634 9508      RET
